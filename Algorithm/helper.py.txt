from consts import GRID_WIDTH, GRID_HEIGHT, Orientation


def is_within_bounds(mid_x: int, mid_y: int):
    """Check if cell is within grid boundaries and return True if valid."""
    return 0 < mid_x < GRID_WIDTH - 1 and 0 < mid_y < GRID_HEIGHT - 1


def generate_commands(states, barriers):
    """Generate commands based on the list of cell states along the path."""

    # Transform barriers into a dictionary with IDs as keys
    barrier_dict = {barrier['id']: barrier for barrier in barriers}

    commands = []

    for i in range(1, len(states)):
        steps = "00"

        if states[i].orientation == states[i - 1].orientation:
            if (states[i].x > states[i - 1].x and states[i].orientation == Orientation.RIGHT) or \
               (states[i].y > states[i - 1].y and states[i].orientation == Orientation.UP):
                commands.append("FW10")
            elif (states[i].x < states[i - 1].x and states[i].orientation == Orientation.LEFT) or \
                 (states[i].y < states[i - 1].y and states[i].orientation == Orientation.DOWN):
                commands.append("FW10")
            else:
                commands.append("BW10")

            if states[i].photo_id != -1:
                current_barrier = barrier_dict[states[i].photo_id]
                robot_position = states[i]

                if current_barrier['d'] == 6 and robot_position.orientation == 2:
                    if current_barrier['y'] > robot_position.y:
                        commands.append(f"SNAP{states[i].photo_id}_L")
                    elif current_barrier['y'] == robot_position.y:
                        commands.append(f"SNAP{states[i].photo_id}_C")
                    else:
                        commands.append(f"SNAP{states[i].photo_id}_R")

                elif current_barrier['d'] == 2 and robot_position.orientation == 6:
                    if current_barrier['y'] > robot_position.y:
                        commands.append(f"SNAP{states[i].photo_id}_R")
                    elif current_barrier['y'] == robot_position.y:
                        commands.append(f"SNAP{states[i].photo_id}_C")
                    else:
                        commands.append(f"SNAP{states[i].photo_id}_L")

                elif current_barrier['d'] == 0 and robot_position.orientation == 4:
                    if current_barrier['x'] > robot_position.x:
                        commands.append(f"SNAP{states[i].photo_id}_L")
                    elif current_barrier['x'] == robot_position.x:
                        commands.append(f"SNAP{states[i].photo_id}_C")
                    else:
                        commands.append(f"SNAP{states[i].photo_id}_R")

                elif current_barrier['d'] == 4 and robot_position.orientation == 0:
                    if current_barrier['x'] > robot_position.x:
                        commands.append(f"SNAP{states[i].photo_id}_R")
                    elif current_barrier['x'] == robot_position.x:
                        commands.append(f"SNAP{states[i].photo_id}_C")
                    else:
                        commands.append(f"SNAP{states[i].photo_id}_L")

            continue

        if states[i - 1].orientation == Orientation.UP:
            if states[i].orientation == Orientation.RIGHT:
                if states[i].y > states[i - 1].y:
                    commands.append("FR{}".format(steps))
                else:
                    commands.append("BL{}".format(steps))
            elif states[i].orientation == Orientation.LEFT:
                if states[i].y > states[i - 1].y:
                    commands.append("FL{}".format(steps))
                else:
                    commands.append("BR{}".format(steps))
            else:
                raise Exception("Invalid turn direction")

        elif states[i - 1].orientation == Orientation.RIGHT:
            if states[i].orientation == Orientation.UP:
                if states[i].y > states[i - 1].y:
                    commands.append("FL{}".format(steps))
                else:
                    commands.append("BR{}".format(steps))
            elif states[i].orientation == Orientation.DOWN:
                if states[i].y > states[i - 1].y:
                    commands.append("BL{}".format(steps))
                else:
                    commands.append("FR{}".format(steps))
            else:
                raise Exception("Invalid turn direction")

        elif states[i - 1].orientation == Orientation.DOWN:
            if states[i].orientation == Orientation.RIGHT:
                if states[i].y > states[i - 1].y:
                    commands.append("BR{}".format(steps))
                else:
                    commands.append("FL{}".format(steps))
            elif states[i].orientation == Orientation.LEFT:
                if states[i].y > states[i - 1].y:
                    commands.append("BL{}".format(steps))
                else:
                    commands.append("FR{}".format(steps))
            else:
                raise Exception("Invalid turn direction")

        elif states[i - 1].orientation == Orientation.LEFT:
            if states[i].orientation == Orientation.UP:
                if states[i].y > states[i - 1].y:
                    commands.append("FR{}".format(steps))
                else:
                    commands.append("BL{}".format(steps))
            elif states[i].orientation == Orientation.DOWN:
                if states[i].y > states[i - 1].y:
                    commands.append("BR{}".format(steps))
                else:
                    commands.append("FL{}".format(steps))
            else:
                raise Exception("Invalid turn direction")
        else:
            raise Exception("Invalid position")

        if states[i].photo_id != -1:
            current_barrier = barrier_dict[states[i].photo_id]
            robot_position = states[i]

            if current_barrier['d'] == 6 and robot_position.orientation == 2:
                if current_barrier['y'] > robot_position.y:
                    commands.append(f"SNAP{states[i].photo_id}_L")
                elif current_barrier['y'] == robot_position.y:
                    commands.append(f"SNAP{states[i].photo_id}_C")
                else:
                    commands.append(f"SNAP{states[i].photo_id}_R")

            elif current_barrier['d'] == 2 and robot_position.orientation == 6:
                if current_barrier['y'] > robot_position.y:
                    commands.append(f"SNAP{states[i].photo_id}_R")
                elif current_barrier['y'] == robot_position.y:
                    commands.append(f"SNAP{states[i].photo_id}_C")
                else:
                    commands.append(f"SNAP{states[i].photo_id}_L")

            elif current_barrier['d'] == 0 and robot_position.orientation == 4:
                if current_barrier['x'] > robot_position.x:
                    commands.append(f"SNAP{states[i].photo_id}_L")
                elif current_barrier['x'] == robot_position.x:
                    commands.append(f"SNAP{states[i].photo_id}_C")
                else:
                    commands.append(f"SNAP{states[i].photo_id}_R")

            elif current_barrier['d'] == 4 and robot_position.orientation == 0:
                if current_barrier['x'] > robot_position.x:
                    commands.append(f"SNAP{states[i].photo_id}_R")
                elif current_barrier['x'] == robot_position.x:
                    commands.append(f"SNAP{states[i].photo_id}_C")
                else:
                    commands.append(f"SNAP{states[i].photo_id}_L")

    commands.append("FIN")

    compressed_commands = [commands[0]]
    for i in range(1, len(commands)):
        if commands[i].startswith("BW") and compressed_commands[-1].startswith("BW"):
            steps = int(compressed_commands[-1][2:])
            if steps != 90:
                compressed_commands[-1] = "BW{}".format(steps + 10)
                continue
        elif commands[i].startswith("FW") and compressed_commands[-1].startswith("FW"):
            steps = int(compressed_commands[-1][2:])
            if steps != 90:
                compressed_commands[-1] = "FW{}".format(steps + 10)
                continue
        compressed_commands.append(commands[i])

    return compressed_commands
