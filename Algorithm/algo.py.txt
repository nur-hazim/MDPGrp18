import heapq
import math
from typing import List
import numpy as np
from Robot import Robot
from Entity import Obstacle, GridComponent, Grid
from consts import Orientation, MOVE_ORIENTATION, TURN_MODIFIER, MAX_ITERATIONS, TURN_DIAMETER, OBSTACLE_PENALTY
from python_tsp.exact import solve_tsp_dynamic_programming

turn_wrt_big_turns = [[3 * TURN_DIAMETER, TURN_DIAMETER],
                       [4 * TURN_DIAMETER, 2 * TURN_DIAMETER]]


class MazeNavigator: 
    def __init__(self, dimension_x: int, dimension_y: int, automaton_x: int, automaton_y: int, automaton_direction: Orientation, large_turn=None):
        self.route_table = dict() 
        self.expense_table = dict() 
        if large_turn is None:
            self.large_turn = 0
        else:
            self.large_turn = int(large_turn)

        self.grid = Grid(dimension_x, dimension_y)
        self.automaton = Robot(automaton_x, automaton_y, automaton_direction)  

    def insert_obstacle(self, x: int, y: int, direction: Orientation, obstacle_id: int):  
        obstacle = Obstacle(x, y, direction, obstacle_id) 
        self.grid.add_obstacle(obstacle)

    def clear_obstacle(self):
        self.grid.reset_obstacles()

    @staticmethod
    def calculate_coordinate_distance(x1: int, y1: int, x2: int, y2: int, level=1): 
        """ find euclidean distance
        """
        horizontal_distance = x1 - x2
        vertical_distance = y1 - y2
        if level == 2:
            return math.sqrt(horizontal_distance ** 2 + vertical_distance ** 2)

        return abs(horizontal_distance) + abs(vertical_distance)

    @staticmethod
    def calculate_state_distance(start_state: GridComponent, end_state: GridComponent, level=1): 
        """ Calculate distance between states. """
        return MazeNavigator.calculate_coordinate_distance(start_state.x, start_state.y, end_state.x, end_state.y, level)

    @staticmethod
    def retrieve_visit_options(n):  
        """ Returns binary string combinations for visiting each view_position of each obstacle. """
        s = []
        l = bin(2 ** n - 1).count('1')

        for i in range(2 ** n):
            s.append(bin(i)[2:].zfill(l))

        s.sort(key=lambda x: x.count('1'), reverse=True)
        return s


    def retrieve_optimal_order_dp(self, retrying) -> List[GridComponent]:
         # Main function to call
        distance = 1e9
        optimal_path = []

        all_view_positions = self.grid.get_view_obstacle_positions(retrying)

        for op in self.retrieve_visit_options(len(all_view_positions)):
            items = [self.automaton.get_start_state()]
            cur_view_positions = []

            for idx in range(len(all_view_positions)):
                # len(all_view_positions)== len(obstacles) since all_view_positions is an array containing more arrays
                # (one for each obstacle) containing view states of each obstacle
                if op[idx] == '1':
                    items = items + all_view_positions[idx]
                    #append current view stateS for obstacle that was labelled "1"
                    cur_view_positions.append(all_view_positions[idx])

            self.path_cost_generator(items)
            combination = []
            self.get_combination(cur_view_positions, 0, [], combination, [MAX_ITERATIONS])
            # Picks out a single view_position for each obstacle. Creates many combinations based on which view_position it picks
            #^ recusive function
            for c in combination: 
                visited_candidates = [0] 
                cur_index = 1
                #Start at 1. Since 0 is the robots starting position (so we want +1 to get corresponding index for other nodes). 
                # Will be used to traverse visited_candidates
                fixed_cost = 0 
                #view_positon = The array of possible view states for each obstacle
                for index, view_position in enumerate(cur_view_positions):
                    #visited_candidates = holds the global indexing(indexing in items) of the visited viewing states
                    visited_candidates.append(cur_index + c[index])
                    fixed_cost += view_position[c[index]].penalty
                    cur_index += len(view_position)
                    #penalty : Either 0 or 5 or 50(SCREEN_SHOT COST), based on Obstacle.get_view_state
                
                cost_np = np.zeros((len(visited_candidates), len(visited_candidates)))

                # -1 : Since last node has no other node to visit
                for s in range(len(visited_candidates) - 1):
                    for e in range(s + 1, len(visited_candidates)):
                        u = items[visited_candidates[s]] # extract out global index from visited candidates, to extract the view state from items
                        v = items[visited_candidates[e]] # cost was found during lower order a*star
                        if (u, v) in self.expense_table.keys():
                            cost_np[s][e] = self.expense_table[(u, v)]
                        else:
                            cost_np[s][e] = 1e9
                        cost_np[e][s] = cost_np[s][e] # Ensure table is symetric
                cost_np[:, 0] = 0
                _permutation, _distance = solve_tsp_dynamic_programming(cost_np)
                if _distance + fixed_cost >= distance:
                    continue

                optimal_path = [items[0]] # Add start point to optimal path
                distance = _distance + fixed_cost

                for i in range(len(_permutation) - 1): # Extract optimal index permutation of visited_candidates, to extract optimal view state order
                    from_item = items[visited_candidates[_permutation[i]]]
                    to_item = items[visited_candidates[_permutation[i + 1]]]
                    # +1 To go to next node in optimal path
                    cur_path = self.path_table[(from_item, to_item)]
                    for j in range(1, len(cur_path)):
                        optimal_path.append(GridComponent(cur_path[j][0], cur_path[j][1], cur_path[j][2]))

                    optimal_path[-1].set_screenshot(to_item.screenshot_id)

            if optimal_path:
                # if found optimal path, return
                break

        return optimal_path, distance

    @staticmethod
    def get_combination(view_positions, index, current, result, iteration_left):
        if index == len(view_positions):
            result.append(current[:])
            return

        if iteration_left[0] == 0:
            return

        iteration_left[0] -= 1
        for j in range(len(view_positions[index])):
            current.append(j)
            MazeNavigator.get_combination(view_positions, index + 1, current, result, iteration_left)
            current.pop()

    def retrieve_safe_cost(self, x, y):
        """ as it says
        """
        for ob in self.grid.obstacles:
            if abs(ob.x-x) == 2 and abs(ob.y-y) == 2:
                return OBSTACLE_PENALTY
            
            if abs(ob.x-x) == 1 and abs(ob.y-y) == 2:
                return OBSTACLE_PENALTY
            
            if abs(ob.x-x) == 2 and abs(ob.y-y) == 1:
                return OBSTACLE_PENALTY

        return 0

    def retrieve_neighbors(self, x, y, direction):
        """
        gets back list of tuples
        neighbours follow the 6 possible movements. must also check if reachable
        tuple is new coordinates + direction
        """

        neighbors = []

        for dx, dy, md in MOVE_ORIENTATION:
            if md == direction: 
                if self.grid.reachable(x + dx, y + dy): 
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x + dx, y + dy)
                    neighbors.append((x + dx, y + dy, md, OBSTACLE_PENALTY))
                if self.grid.reachable(x - dx, y - dy):  
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x - dx, y - dy)
                    neighbors.append((x - dx, y - dy, md, OBSTACLE_PENALTY))

            else:
                
                bigger_change = turn_wrt_big_turns[self.large_turn][0]
                smaller_change = turn_wrt_big_turns[self.large_turn][1]

                # north <-> east
            if direction == Orientation.UP and md == Orientation.RIGHT:

                if self.grid.reachable(x + bigger_change, y + smaller_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x + bigger_change, y + smaller_change)
                    neighbors.append((x + bigger_change, y + smaller_change, md, OBSTACLE_PENALTY + 10))

                if self.grid.reachable(x - smaller_change, y - bigger_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x - smaller_change, y - bigger_change)
                    neighbors.append((x - smaller_change, y - bigger_change, md, OBSTACLE_PENALTY + 10))

            if direction == Orientation.RIGHT and md == Orientation.UP:
                if self.grid.reachable(x + smaller_change, y + bigger_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x + smaller_change, y + bigger_change)
                    neighbors.append((x + smaller_change, y + bigger_change, md, OBSTACLE_PENALTY + 10))

                if self.grid.reachable(x - bigger_change, y - smaller_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x - bigger_change, y - smaller_change)
                    neighbors.append((x - bigger_change, y - smaller_change, md, OBSTACLE_PENALTY + 10))

            if direction == Orientation.RIGHT and md == Orientation.DOWN:
                
                if self.grid.reachable(x + smaller_change, y - bigger_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x + smaller_change, y - bigger_change)
                    neighbors.append((x + smaller_change, y - bigger_change, md, OBSTACLE_PENALTY + 10))

                if self.grid.reachable(x - bigger_change, y + smaller_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x - bigger_change, y + smaller_change)
                    neighbors.append((x - bigger_change, y + smaller_change, md, OBSTACLE_PENALTY + 10))

            if direction == Orientation.DOWN and md == Orientation.RIGHT:
                if self.grid.reachable(x + bigger_change, y - smaller_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x + bigger_change, y - smaller_change)
                    neighbors.append((x + bigger_change, y - smaller_change, md, OBSTACLE_PENALTY + 10))

                if self.grid.reachable(x - smaller_change, y + bigger_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x - smaller_change, y + bigger_change)
                    neighbors.append((x - smaller_change, y + bigger_change, md, OBSTACLE_PENALTY + 10))

            if direction == Orientation.DOWN and md == Orientation.LEFT:
                if self.grid.reachable(x - bigger_change, y - smaller_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x - bigger_change, y - smaller_change)
                    neighbors.append((x - bigger_change, y - smaller_change, md, OBSTACLE_PENALTY + 10))

                if self.grid.reachable(x + smaller_change, y + bigger_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x + smaller_change, y + bigger_change)
                    neighbors.append((x + smaller_change, y + bigger_change, md, OBSTACLE_PENALTY + 10))

            if direction == Orientation.LEFT and md == Orientation.DOWN:
                if self.grid.reachable(x - smaller_change, y - bigger_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x - smaller_change, y - bigger_change)
                    neighbors.append((x - smaller_change, y - bigger_change, md, OBSTACLE_PENALTY + 10))

                if self.grid.reachable(x + bigger_change, y + smaller_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x + bigger_change, y + smaller_change)
                    neighbors.append((x + bigger_change, y + smaller_change, md, OBSTACLE_PENALTY + 10))

            if direction == Orientation.LEFT and md == Orientation.UP:
                if self.grid.reachable(x - smaller_change, y + bigger_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x - smaller_change, y + bigger_change)
                    neighbors.append((x - smaller_change, y + bigger_change, md, OBSTACLE_PENALTY + 10))

                if self.grid.reachable(x + bigger_change, y - smaller_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x + bigger_change, y - smaller_change)
                    neighbors.append((x + bigger_change, y - smaller_change, md, OBSTACLE_PENALTY + 10))

            if direction == Orientation.UP and md == Orientation.LEFT:
                if self.grid.reachable(x + smaller_change, y - bigger_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x + smaller_change, y - bigger_change)
                    neighbors.append((x + smaller_change, y - bigger_change, md, OBSTACLE_PENALTY + 10))

                if self.grid.reachable(x - bigger_change, y + smaller_change, turn=True) and self.grid.reachable(x, y, preTurn=True):
                    OBSTACLE_PENALTY = self.retrieve_safe_cost(x - bigger_change, y + smaller_change)
                    neighbors.append((x - bigger_change, y + smaller_change, md, OBSTACLE_PENALTY + 10))

            return neighbors


    def path_cost_generator(self, states: List[GridComponent]):
        """ get path cost betweeen each states and update tables
        """
        def record_path(start, end, parent: dict, cost: int):

            # Update cost table for the (start,end) and (end,start) edges
            self.expense_table[(start, end)] = cost
            self.expense_table[(end, start)] = cost

            path = []
            cursor = (end.x, end.y, end.direction)

            while cursor in parent:
                path.append(cursor)
                cursor = parent[cursor]

            path.append(cursor)

            # Update path table for the (start,end) and (end,start) edges, with the (start,end) edge being the reversed path
            self.route_table[(start, end)] = path[::-1]
            self.route_table[(end, start)] = path

        def astar_search(start: GridComponent, end: GridComponent):
            # astar search algo with three states: x, y, direction

            # If it is already done before, return
            if (start, end) in self.route_table:
                return

            # Heuristic to guide the search: 'distance' is calculated by f = g + h
            # g is the actual distance moved so far from the start node to current node
            # h is the heuristic distance from current node to end node
            g_distance = {(start.x, start.y, start.orientation): 0}
            # ^ hashmap, 
#key : tuple (x co-ord of next cell, y co-ord of next cell, direction of robot in next cell)
#value : cost


            # format of each item in heap: (f_distance of node, x coord of node, y coord of node)
            #  min-heap
            heap = [(self.calculate_state_distance(start, end), start.x, start.y, start.orientation)]
            parent = dict()
            visited = set()

            while heap:
                # Pop the node with the smallest distance
                _, cur_x, cur_y, cur_direction = heapq.heappop(heap)
                
                if (cur_x, cur_y, cur_direction) in visited:
                    continue

                # heapq uses the first element of each tuple (in this case, self.compute_state_distance(start, end)) to determine the order. The tuple with the
                #  smallest distance value will be popped off the heap.
                if end.is_eq(cur_x, cur_y, cur_direction):
                    record_path(start, end, parent, g_distance[(cur_x, cur_y, cur_direction)])
                    return
                # IF we reached the end stateUpdate the path_table and expense_table within the MazeSolver Class

                visited.add((cur_x, cur_y, cur_direction))
                cur_distance = g_distance[(cur_x, cur_y, cur_direction)]

                for next_x, next_y, new_direction, OBSTACLE_PENALTY in self.retrieve_neighbors(cur_x, cur_y, cur_direction):
                    if (next_x, next_y, new_direction) in visited:
                        continue

                    move_cost = Orientation.rotation_penalty(new_direction, cur_direction) * TURN_MODIFIER + 1 + OBSTACLE_PENALTY
                    
                    next_cost = cur_distance + move_cost + self.calculate_coordinate_distance(next_x, next_y, end.x, end.y) # refers to heuristic and cost to go toend node of the state pairing

                    if (next_x, next_y, new_direction) not in g_distance or g_distance[(next_x, next_y, new_direction)] > cur_distance + move_cost:
                        # Update new distance if its smaller
                        g_distance[(next_x, next_y, new_direction)] = cur_distance + move_cost
                        parent[(next_x, next_y, new_direction)] = (cur_x, cur_y, cur_direction)

                        heapq.heappush(heap, (next_cost, next_x, next_y, new_direction))

        # Nested loop through all the state pairings
        for i in range(len(states) - 1):
            for j in range(i + 1, len(states)):
                astar_search(states[i], states[j])

if __name__ == "__main__":
    pass
