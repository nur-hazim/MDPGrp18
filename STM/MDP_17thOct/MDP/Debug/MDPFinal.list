
MDPFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ec4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001518  08013058  08013058  00014058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014570  08014570  00016320  2**0
                  CONTENTS
  4 .ARM          00000008  08014570  08014570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014578  08014578  00016320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014578  08014578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801457c  0801457c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000320  20000000  08014580  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00016320  2**0
                  CONTENTS
 10 .bss          000052e4  20000320  20000320  00016320  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005604  20005604  00016320  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00016320  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ec80  00000000  00000000  00016350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004181  00000000  00000000  00034fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c68  00000000  00000000  00039158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000164d  00000000  00000000  0003adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026038  00000000  00000000  0003c40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a60  00000000  00000000  00062445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb448  00000000  00000000  00082ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016e2ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008d44  00000000  00000000  0016e330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00177074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000320 	.word	0x20000320
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801303c 	.word	0x0801303c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000324 	.word	0x20000324
 80001cc:	0801303c 	.word	0x0801303c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af04      	add	r7, sp, #16
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	460b      	mov	r3, r1
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <_ICM20948_SelectUserBank+0x26>
 8000f9a:	2368      	movs	r3, #104	@ 0x68
 8000f9c:	e000      	b.n	8000fa0 <_ICM20948_SelectUserBank+0x28>
 8000f9e:	2369      	movs	r3, #105	@ 0x69
 8000fa0:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8000fa2:	7dbb      	ldrb	r3, [r7, #22]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	b299      	uxth	r1, r3
 8000faa:	230a      	movs	r3, #10
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	f107 0315 	add.w	r3, r7, #21
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	227f      	movs	r2, #127	@ 0x7f
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f007 fbc3 	bl	8008748 <HAL_I2C_Mem_Write>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	4608      	mov	r0, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	70fb      	strb	r3, [r7, #3]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	70bb      	strb	r3, [r7, #2]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <_ICM20948_WriteByte+0x28>
 8000ff4:	2368      	movs	r3, #104	@ 0x68
 8000ff6:	e000      	b.n	8000ffa <_ICM20948_WriteByte+0x2a>
 8000ff8:	2369      	movs	r3, #105	@ 0x69
 8000ffa:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b299      	uxth	r1, r3
 8001004:	78bb      	ldrb	r3, [r7, #2]
 8001006:	b29a      	uxth	r2, r3
 8001008:	230a      	movs	r3, #10
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	2301      	movs	r3, #1
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	1c7b      	adds	r3, r7, #1
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f007 fb96 	bl	8008748 <HAL_I2C_Mem_Write>
 800101c:	4603      	mov	r3, r0
 800101e:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001020:	7bfb      	ldrb	r3, [r7, #15]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <ICM20948_init>:
	}

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	70fb      	strb	r3, [r7, #3]
 8001036:	4613      	mov	r3, r2
 8001038:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff97 	bl	8000f78 <_ICM20948_SelectUserBank>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800104e:	78f9      	ldrb	r1, [r7, #3]
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	2206      	movs	r2, #6
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ffbb 	bl	8000fd0 <_ICM20948_WriteByte>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 800105e:	20c8      	movs	r0, #200	@ 0xc8
 8001060:	f006 f978 	bl	8007354 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8001064:	78f9      	ldrb	r1, [r7, #3]
 8001066:	2301      	movs	r3, #1
 8001068:	2206      	movs	r2, #6
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffb0 	bl	8000fd0 <_ICM20948_WriteByte>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 8001074:	78f9      	ldrb	r1, [r7, #3]
 8001076:	2338      	movs	r3, #56	@ 0x38
 8001078:	2207      	movs	r2, #7
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa8 	bl	8000fd0 <_ICM20948_WriteByte>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2202      	movs	r2, #2
 8001088:	4619      	mov	r1, r3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ff74 	bl	8000f78 <_ICM20948_SelectUserBank>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001094:	78bb      	ldrb	r3, [r7, #2]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	b25b      	sxtb	r3, r3
 800109a:	f043 0319 	orr.w	r3, r3, #25
 800109e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	78f9      	ldrb	r1, [r7, #3]
 80010a4:	2201      	movs	r2, #1
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff92 	bl	8000fd0 <_ICM20948_WriteByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 80010b0:	78f9      	ldrb	r1, [r7, #3]
 80010b2:	2304      	movs	r3, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff8a 	bl	8000fd0 <_ICM20948_WriteByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff56 	bl	8000f78 <_ICM20948_SelectUserBank>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 80010d0:	78f9      	ldrb	r1, [r7, #3]
 80010d2:	2302      	movs	r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff7a 	bl	8000fd0 <_ICM20948_WriteByte>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ee:	f006 f8bf 	bl	8007270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f2:	f000 f973 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f6:	f000 fd51 	bl	8001b9c <MX_GPIO_Init>
  MX_TIM8_Init();
 80010fa:	f000 fc7b 	bl	80019f4 <MX_TIM8_Init>
  MX_TIM6_Init();
 80010fe:	f000 fc43 	bl	8001988 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001102:	f000 fb3b 	bl	800177c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001106:	f000 fd1f 	bl	8001b48 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800110a:	f000 fa97 	bl	800163c <MX_TIM1_Init>
  MX_TIM3_Init();
 800110e:	f000 fb89 	bl	8001824 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001112:	f000 fa65 	bl	80015e0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001116:	f000 f9bf 	bl	8001498 <MX_ADC1_Init>
  MX_TIM4_Init();
 800111a:	f000 fbd7 	bl	80018cc <MX_TIM4_Init>
  MX_ADC2_Init();
 800111e:	f000 fa0d 	bl	800153c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001122:	f005 fbab 	bl	800687c <OLED_Init>
  ICM20948_init(&hi2c1,0,GYRO_FULL_SCALE_2000DPS);
 8001126:	2203      	movs	r2, #3
 8001128:	2100      	movs	r1, #0
 800112a:	4870      	ldr	r0, [pc, #448]	@ (80012ec <main+0x204>)
 800112c:	f7ff ff7d 	bl	800102a <ICM20948_init>

  // initialise command queue
  curCmd.index = 100;
 8001130:	4b6f      	ldr	r3, [pc, #444]	@ (80012f0 <main+0x208>)
 8001132:	2264      	movs	r2, #100	@ 0x64
 8001134:	701a      	strb	r2, [r3, #0]
  curCmd.val = 0;
 8001136:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <main+0x208>)
 8001138:	2200      	movs	r2, #0
 800113a:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 800113c:	4b6d      	ldr	r3, [pc, #436]	@ (80012f4 <main+0x20c>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 8001142:	4b6c      	ldr	r3, [pc, #432]	@ (80012f4 <main+0x20c>)
 8001144:	2200      	movs	r2, #0
 8001146:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8001148:	4b6b      	ldr	r3, [pc, #428]	@ (80012f8 <main+0x210>)
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	4b69      	ldr	r3, [pc, #420]	@ (80012f4 <main+0x20c>)
 800114e:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	e00c      	b.n	8001170 <main+0x88>
	  Command cmd;
	  cmd.index = 100;
 8001156:	2364      	movs	r3, #100	@ 0x64
 8001158:	703b      	strb	r3, [r7, #0]
	  cmd.val = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	807b      	strh	r3, [r7, #2]
	  cQueue.buffer[i] = cmd;
 800115e:	4a65      	ldr	r2, [pc, #404]	@ (80012f4 <main+0x20c>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3301      	adds	r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b61      	ldr	r3, [pc, #388]	@ (80012f8 <main+0x210>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4293      	cmp	r3, r2
 800117a:	dbec      	blt.n	8001156 <main+0x6e>
  }

  PIDConfigInit(&pidTSlow, 2.5, 0.0,0.8);
 800117c:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 80012fc <main+0x214>
 8001180:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001300 <main+0x218>
 8001184:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8001188:	485e      	ldr	r0, [pc, #376]	@ (8001304 <main+0x21c>)
 800118a:	f001 faf5 	bl	8002778 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.5, 0.0,0);
 800118e:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 8001300 <main+0x218>
 8001192:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001300 <main+0x218>
 8001196:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 800119a:	485b      	ldr	r0, [pc, #364]	@ (8001308 <main+0x220>)
 800119c:	f001 faec 	bl	8002778 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.5, 0.0 ,0);
 80011a0:	ed9f 1a57 	vldr	s2, [pc, #348]	@ 8001300 <main+0x218>
 80011a4:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8001300 <main+0x218>
 80011a8:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80011ac:	4857      	ldr	r0, [pc, #348]	@ (800130c <main+0x224>)
 80011ae:	f001 fae3 	bl	8002778 <PIDConfigInit>
//  PIDConfigInit(&pidFast, 0.75, 0.0,0);

  	HAL_UART_Receive_IT(&huart3, aRxBuffer,RX_BUFFER_SIZE);
 80011b2:	4b57      	ldr	r3, [pc, #348]	@ (8001310 <main+0x228>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4956      	ldr	r1, [pc, #344]	@ (8001314 <main+0x22c>)
 80011ba:	4857      	ldr	r0, [pc, #348]	@ (8001318 <main+0x230>)
 80011bc:	f00a fc1f 	bl	800b9fe <HAL_UART_Receive_IT>

	// servo motor turn
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011c0:	210c      	movs	r1, #12
 80011c2:	4856      	ldr	r0, [pc, #344]	@ (800131c <main+0x234>)
 80011c4:	f008 fe64 	bl	8009e90 <HAL_TIM_PWM_Start>
	// motor backwheel move
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80011c8:	2100      	movs	r1, #0
 80011ca:	4855      	ldr	r0, [pc, #340]	@ (8001320 <main+0x238>)
 80011cc:	f008 fe60 	bl	8009e90 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011d0:	2104      	movs	r1, #4
 80011d2:	4853      	ldr	r0, [pc, #332]	@ (8001320 <main+0x238>)
 80011d4:	f008 fe5c 	bl	8009e90 <HAL_TIM_PWM_Start>
	// encoder monitor speed and distance
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80011d8:	213c      	movs	r1, #60	@ 0x3c
 80011da:	4852      	ldr	r0, [pc, #328]	@ (8001324 <main+0x23c>)
 80011dc:	f009 f9ec 	bl	800a5b8 <HAL_TIM_Encoder_Start>
//	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);

	//adjust steering
	__RESET_SERVO_TURN(&htim1);
 80011e0:	4b4e      	ldr	r3, [pc, #312]	@ (800131c <main+0x234>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	224c      	movs	r2, #76	@ 0x4c
 80011e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80011e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011ec:	f006 f8b2 	bl	8007354 <HAL_Delay>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011f0:	f00b fbd2 	bl	800c998 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of oledTask */
  oledTaskHandle = osThreadNew(runOledTask, NULL, &oledTask_attributes);
 80011f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <main+0x240>)
 80011f6:	2100      	movs	r1, #0
 80011f8:	484c      	ldr	r0, [pc, #304]	@ (800132c <main+0x244>)
 80011fa:	f00b fc17 	bl	800ca2c <osThreadNew>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a4b      	ldr	r2, [pc, #300]	@ (8001330 <main+0x248>)
 8001202:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(runCmdTask, NULL, &commandTask_attributes);
 8001204:	4a4b      	ldr	r2, [pc, #300]	@ (8001334 <main+0x24c>)
 8001206:	2100      	movs	r1, #0
 8001208:	484b      	ldr	r0, [pc, #300]	@ (8001338 <main+0x250>)
 800120a:	f00b fc0f 	bl	800ca2c <osThreadNew>
 800120e:	4603      	mov	r3, r0
 8001210:	4a4a      	ldr	r2, [pc, #296]	@ (800133c <main+0x254>)
 8001212:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 8001214:	4a4a      	ldr	r2, [pc, #296]	@ (8001340 <main+0x258>)
 8001216:	2100      	movs	r1, #0
 8001218:	484a      	ldr	r0, [pc, #296]	@ (8001344 <main+0x25c>)
 800121a:	f00b fc07 	bl	800ca2c <osThreadNew>
 800121e:	4603      	mov	r3, r0
 8001220:	4a49      	ldr	r2, [pc, #292]	@ (8001348 <main+0x260>)
 8001222:	6013      	str	r3, [r2, #0]

  /* creation of moveDistTask */
  moveDistTaskHandle = osThreadNew(runMoveDistTask, NULL, &moveDistTask_attributes);
 8001224:	4a49      	ldr	r2, [pc, #292]	@ (800134c <main+0x264>)
 8001226:	2100      	movs	r1, #0
 8001228:	4849      	ldr	r0, [pc, #292]	@ (8001350 <main+0x268>)
 800122a:	f00b fbff 	bl	800ca2c <osThreadNew>
 800122e:	4603      	mov	r3, r0
 8001230:	4a48      	ldr	r2, [pc, #288]	@ (8001354 <main+0x26c>)
 8001232:	6013      	str	r3, [r2, #0]

  /* creation of fastestPathTask */
  fastestPathTaskHandle = osThreadNew(runFastestPathTask, NULL, &fastestPathTask_attributes);
 8001234:	4a48      	ldr	r2, [pc, #288]	@ (8001358 <main+0x270>)
 8001236:	2100      	movs	r1, #0
 8001238:	4848      	ldr	r0, [pc, #288]	@ (800135c <main+0x274>)
 800123a:	f00b fbf7 	bl	800ca2c <osThreadNew>
 800123e:	4603      	mov	r3, r0
 8001240:	4a47      	ldr	r2, [pc, #284]	@ (8001360 <main+0x278>)
 8001242:	6013      	str	r3, [r2, #0]

  /* creation of buzzerTask */
  buzzerTaskHandle = osThreadNew(runBuzzerTask, NULL, &buzzerTask_attributes);
 8001244:	4a47      	ldr	r2, [pc, #284]	@ (8001364 <main+0x27c>)
 8001246:	2100      	movs	r1, #0
 8001248:	4847      	ldr	r0, [pc, #284]	@ (8001368 <main+0x280>)
 800124a:	f00b fbef 	bl	800ca2c <osThreadNew>
 800124e:	4603      	mov	r3, r0
 8001250:	4a46      	ldr	r2, [pc, #280]	@ (800136c <main+0x284>)
 8001252:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 8001254:	4a46      	ldr	r2, [pc, #280]	@ (8001370 <main+0x288>)
 8001256:	2100      	movs	r1, #0
 8001258:	4846      	ldr	r0, [pc, #280]	@ (8001374 <main+0x28c>)
 800125a:	f00b fbe7 	bl	800ca2c <osThreadNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a45      	ldr	r2, [pc, #276]	@ (8001378 <main+0x290>)
 8001262:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 8001264:	4a45      	ldr	r2, [pc, #276]	@ (800137c <main+0x294>)
 8001266:	2100      	movs	r1, #0
 8001268:	4845      	ldr	r0, [pc, #276]	@ (8001380 <main+0x298>)
 800126a:	f00b fbdf 	bl	800ca2c <osThreadNew>
 800126e:	4603      	mov	r3, r0
 8001270:	4a44      	ldr	r2, [pc, #272]	@ (8001384 <main+0x29c>)
 8001272:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 8001274:	4a44      	ldr	r2, [pc, #272]	@ (8001388 <main+0x2a0>)
 8001276:	2100      	movs	r1, #0
 8001278:	4844      	ldr	r0, [pc, #272]	@ (800138c <main+0x2a4>)
 800127a:	f00b fbd7 	bl	800ca2c <osThreadNew>
 800127e:	4603      	mov	r3, r0
 8001280:	4a43      	ldr	r2, [pc, #268]	@ (8001390 <main+0x2a8>)
 8001282:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 8001284:	4a43      	ldr	r2, [pc, #268]	@ (8001394 <main+0x2ac>)
 8001286:	2100      	movs	r1, #0
 8001288:	4843      	ldr	r0, [pc, #268]	@ (8001398 <main+0x2b0>)
 800128a:	f00b fbcf 	bl	800ca2c <osThreadNew>
 800128e:	4603      	mov	r3, r0
 8001290:	4a42      	ldr	r2, [pc, #264]	@ (800139c <main+0x2b4>)
 8001292:	6013      	str	r3, [r2, #0]

  /* creation of fastestPathV2 */
  fastestPathV2Handle = osThreadNew(runFastestPathTask_V2, NULL, &fastestPathV2_attributes);
 8001294:	4a42      	ldr	r2, [pc, #264]	@ (80013a0 <main+0x2b8>)
 8001296:	2100      	movs	r1, #0
 8001298:	4842      	ldr	r0, [pc, #264]	@ (80013a4 <main+0x2bc>)
 800129a:	f00b fbc7 	bl	800ca2c <osThreadNew>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a41      	ldr	r2, [pc, #260]	@ (80013a8 <main+0x2c0>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* creation of batteryTask */
  batteryTaskHandle = osThreadNew(runBatteryTask, NULL, &batteryTask_attributes);
 80012a4:	4a41      	ldr	r2, [pc, #260]	@ (80013ac <main+0x2c4>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	4841      	ldr	r0, [pc, #260]	@ (80013b0 <main+0x2c8>)
 80012aa:	f00b fbbf 	bl	800ca2c <osThreadNew>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a40      	ldr	r2, [pc, #256]	@ (80013b4 <main+0x2cc>)
 80012b2:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 80012b4:	4a40      	ldr	r2, [pc, #256]	@ (80013b8 <main+0x2d0>)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4840      	ldr	r0, [pc, #256]	@ (80013bc <main+0x2d4>)
 80012ba:	f00b fbb7 	bl	800ca2c <osThreadNew>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a3f      	ldr	r2, [pc, #252]	@ (80013c0 <main+0x2d8>)
 80012c2:	6013      	str	r3, [r2, #0]

  SensorTaskHandle = osThreadNew(sensorTask, NULL, &SensorTask_attributes);
 80012c4:	4a3f      	ldr	r2, [pc, #252]	@ (80013c4 <main+0x2dc>)
 80012c6:	2100      	movs	r1, #0
 80012c8:	483f      	ldr	r0, [pc, #252]	@ (80013c8 <main+0x2e0>)
 80012ca:	f00b fbaf 	bl	800ca2c <osThreadNew>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a3e      	ldr	r2, [pc, #248]	@ (80013cc <main+0x2e4>)
 80012d2:	6013      	str	r3, [r2, #0]

  IRTaskHandle = osThreadNew(StartIRTask, NULL, &IRTask_attributes);
 80012d4:	4a3e      	ldr	r2, [pc, #248]	@ (80013d0 <main+0x2e8>)
 80012d6:	2100      	movs	r1, #0
 80012d8:	483e      	ldr	r0, [pc, #248]	@ (80013d4 <main+0x2ec>)
 80012da:	f00b fba7 	bl	800ca2c <osThreadNew>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a3d      	ldr	r2, [pc, #244]	@ (80013d8 <main+0x2f0>)
 80012e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012e4:	f00b fb7c 	bl	800c9e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <main+0x200>
 80012ec:	200003cc 	.word	0x200003cc
 80012f0:	20000690 	.word	0x20000690
 80012f4:	2000065c 	.word	0x2000065c
 80012f8:	20000001 	.word	0x20000001
 80012fc:	3f4ccccd 	.word	0x3f4ccccd
 8001300:	00000000 	.word	0x00000000
 8001304:	200006dc 	.word	0x200006dc
 8001308:	200006c8 	.word	0x200006c8
 800130c:	200006f0 	.word	0x200006f0
 8001310:	20000000 	.word	0x20000000
 8001314:	20000650 	.word	0x20000650
 8001318:	200005d0 	.word	0x200005d0
 800131c:	20000420 	.word	0x20000420
 8001320:	20000588 	.word	0x20000588
 8001324:	20000468 	.word	0x20000468
 8001328:	08013178 	.word	0x08013178
 800132c:	08003fb9 	.word	0x08003fb9
 8001330:	20000614 	.word	0x20000614
 8001334:	0801319c 	.word	0x0801319c
 8001338:	08004089 	.word	0x08004089
 800133c:	20000618 	.word	0x20000618
 8001340:	080131c0 	.word	0x080131c0
 8001344:	080045cd 	.word	0x080045cd
 8001348:	2000061c 	.word	0x2000061c
 800134c:	080131e4 	.word	0x080131e4
 8001350:	080046ad 	.word	0x080046ad
 8001354:	20000620 	.word	0x20000620
 8001358:	08013208 	.word	0x08013208
 800135c:	08004921 	.word	0x08004921
 8001360:	20000624 	.word	0x20000624
 8001364:	0801322c 	.word	0x0801322c
 8001368:	08004e71 	.word	0x08004e71
 800136c:	20000628 	.word	0x20000628
 8001370:	08013250 	.word	0x08013250
 8001374:	08004f6d 	.word	0x08004f6d
 8001378:	2000062c 	.word	0x2000062c
 800137c:	08013274 	.word	0x08013274
 8001380:	0800536d 	.word	0x0800536d
 8001384:	20000630 	.word	0x20000630
 8001388:	08013298 	.word	0x08013298
 800138c:	0800576d 	.word	0x0800576d
 8001390:	20000634 	.word	0x20000634
 8001394:	080132bc 	.word	0x080132bc
 8001398:	08005b6d 	.word	0x08005b6d
 800139c:	20000638 	.word	0x20000638
 80013a0:	080132e0 	.word	0x080132e0
 80013a4:	08005f71 	.word	0x08005f71
 80013a8:	2000063c 	.word	0x2000063c
 80013ac:	08013304 	.word	0x08013304
 80013b0:	080063b9 	.word	0x080063b9
 80013b4:	20000640 	.word	0x20000640
 80013b8:	08013328 	.word	0x08013328
 80013bc:	08006435 	.word	0x08006435
 80013c0:	20000644 	.word	0x20000644
 80013c4:	0801334c 	.word	0x0801334c
 80013c8:	080062b1 	.word	0x080062b1
 80013cc:	20000648 	.word	0x20000648
 80013d0:	08013370 	.word	0x08013370
 80013d4:	08002531 	.word	0x08002531
 80013d8:	2000064c 	.word	0x2000064c

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b094      	sub	sp, #80	@ 0x50
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	2230      	movs	r2, #48	@ 0x30
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00e fec2 	bl	8010174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <SystemClock_Config+0xb4>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	4a21      	ldr	r2, [pc, #132]	@ (8001490 <SystemClock_Config+0xb4>)
 800140a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800140e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <SystemClock_Config+0xb4>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <SystemClock_Config+0xb8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1b      	ldr	r2, [pc, #108]	@ (8001494 <SystemClock_Config+0xb8>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <SystemClock_Config+0xb8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001438:	2302      	movs	r3, #2
 800143a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143c:	2301      	movs	r3, #1
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001440:	2310      	movs	r3, #16
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001444:	2300      	movs	r3, #0
 8001446:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	4618      	mov	r0, r3
 800144e:	f008 f81f 	bl	8009490 <HAL_RCC_OscConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001458:	f005 f864 	bl	8006524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145c:	230f      	movs	r3, #15
 800145e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f008 fa82 	bl	8009980 <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001482:	f005 f84f 	bl	8006524 <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3750      	adds	r7, #80	@ 0x50
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014aa:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014ac:	4a21      	ldr	r2, [pc, #132]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014c8:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d0:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014d8:	4a17      	ldr	r2, [pc, #92]	@ (8001538 <MX_ADC1_Init+0xa0>)
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f6:	480e      	ldr	r0, [pc, #56]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014f8:	f005 ff50 	bl	800739c <HAL_ADC_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001502:	f005 f80f 	bl	8006524 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001506:	230b      	movs	r3, #11
 8001508:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800150a:	2301      	movs	r3, #1
 800150c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001512:	463b      	mov	r3, r7
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	@ (8001530 <MX_ADC1_Init+0x98>)
 8001518:	f006 fa50 	bl	80079bc <HAL_ADC_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001522:	f004 ffff 	bl	8006524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000033c 	.word	0x2000033c
 8001534:	40012000 	.word	0x40012000
 8001538:	0f000001 	.word	0x0f000001

0800153c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001550:	4a21      	ldr	r2, [pc, #132]	@ (80015d8 <MX_ADC2_Init+0x9c>)
 8001552:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001554:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001566:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001568:	2200      	movs	r2, #0
 800156a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800156c:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001574:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800157c:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <MX_ADC2_Init+0xa0>)
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001586:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001588:	2201      	movs	r2, #1
 800158a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001596:	2201      	movs	r2, #1
 8001598:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800159a:	480e      	ldr	r0, [pc, #56]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800159c:	f005 fefe 	bl	800739c <HAL_ADC_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80015a6:	f004 ffbd 	bl	8006524 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80015aa:	230e      	movs	r3, #14
 80015ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <MX_ADC2_Init+0x98>)
 80015bc:	f006 f9fe 	bl	80079bc <HAL_ADC_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80015c6:	f004 ffad 	bl	8006524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000384 	.word	0x20000384
 80015d8:	40012100 	.word	0x40012100
 80015dc:	0f000001 	.word	0x0f000001

080015e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015e6:	4a13      	ldr	r2, [pc, #76]	@ (8001634 <MX_I2C1_Init+0x54>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015ec:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <MX_I2C1_Init+0x58>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <MX_I2C1_Init+0x50>)
 800161e:	f006 ff4f 	bl	80084c0 <HAL_I2C_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001628:	f004 ff7c 	bl	8006524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200003cc 	.word	0x200003cc
 8001634:	40005400 	.word	0x40005400
 8001638:	000186a0 	.word	0x000186a0

0800163c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b096      	sub	sp, #88	@ 0x58
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	615a      	str	r2, [r3, #20]
 800166c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2220      	movs	r2, #32
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f00e fd7d 	bl	8010174 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800167a:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <MX_TIM1_Init+0x138>)
 800167c:	4a3e      	ldr	r2, [pc, #248]	@ (8001778 <MX_TIM1_Init+0x13c>)
 800167e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 8001680:	4b3c      	ldr	r3, [pc, #240]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001682:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001686:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <MX_TIM1_Init+0x138>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800168e:	4b39      	ldr	r3, [pc, #228]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001690:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001694:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800169c:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <MX_TIM1_Init+0x138>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a2:	4b34      	ldr	r3, [pc, #208]	@ (8001774 <MX_TIM1_Init+0x138>)
 80016a4:	2280      	movs	r2, #128	@ 0x80
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016a8:	4832      	ldr	r0, [pc, #200]	@ (8001774 <MX_TIM1_Init+0x138>)
 80016aa:	f008 fb49 	bl	8009d40 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016b4:	f004 ff36 	bl	8006524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016be:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016c2:	4619      	mov	r1, r3
 80016c4:	482b      	ldr	r0, [pc, #172]	@ (8001774 <MX_TIM1_Init+0x138>)
 80016c6:	f009 fa6b 	bl	800aba0 <HAL_TIM_ConfigClockSource>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016d0:	f004 ff28 	bl	8006524 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016d4:	4827      	ldr	r0, [pc, #156]	@ (8001774 <MX_TIM1_Init+0x138>)
 80016d6:	f008 fb82 	bl	8009dde <HAL_TIM_PWM_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80016e0:	f004 ff20 	bl	8006524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016f0:	4619      	mov	r1, r3
 80016f2:	4820      	ldr	r0, [pc, #128]	@ (8001774 <MX_TIM1_Init+0x138>)
 80016f4:	f009 ffc2 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80016fe:	f004 ff11 	bl	8006524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001702:	2360      	movs	r3, #96	@ 0x60
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800171a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171e:	220c      	movs	r2, #12
 8001720:	4619      	mov	r1, r3
 8001722:	4814      	ldr	r0, [pc, #80]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001724:	f009 f97a 	bl	800aa1c <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800172e:	f004 fef9 	bl	8006524 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001746:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800174a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4619      	mov	r1, r3
 8001754:	4807      	ldr	r0, [pc, #28]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001756:	f00a f80d 	bl	800b774 <HAL_TIMEx_ConfigBreakDeadTime>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001760:	f004 fee0 	bl	8006524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001764:	4803      	ldr	r0, [pc, #12]	@ (8001774 <MX_TIM1_Init+0x138>)
 8001766:	f005 fb9b 	bl	8006ea0 <HAL_TIM_MspPostInit>

}
 800176a:	bf00      	nop
 800176c:	3758      	adds	r7, #88	@ 0x58
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000420 	.word	0x20000420
 8001778:	40010000 	.word	0x40010000

0800177c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	@ 0x30
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	2224      	movs	r2, #36	@ 0x24
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f00e fcf2 	bl	8010174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <MX_TIM2_Init+0xa4>)
 800179a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800179e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017c0:	2303      	movs	r3, #3
 80017c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017c8:	2301      	movs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80017d0:	230a      	movs	r3, #10
 80017d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017d8:	2301      	movs	r3, #1
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80017e0:	230a      	movs	r3, #10
 80017e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	480d      	ldr	r0, [pc, #52]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017ec:	f008 fe3e 	bl	800a46c <HAL_TIM_Encoder_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80017f6:	f004 fe95 	bl	8006524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	@ (8001820 <MX_TIM2_Init+0xa4>)
 8001808:	f009 ff38 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001812:	f004 fe87 	bl	8006524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3730      	adds	r7, #48	@ 0x30
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000468 	.word	0x20000468

08001824 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	@ 0x30
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	2224      	movs	r2, #36	@ 0x24
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f00e fc9e 	bl	8010174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001840:	4b20      	ldr	r3, [pc, #128]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 8001842:	4a21      	ldr	r2, [pc, #132]	@ (80018c8 <MX_TIM3_Init+0xa4>)
 8001844:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001846:	4b1f      	ldr	r3, [pc, #124]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001852:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 8001854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001858:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001866:	2303      	movs	r3, #3
 8001868:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001876:	230a      	movs	r3, #10
 8001878:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800187e:	2301      	movs	r3, #1
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001886:	230a      	movs	r3, #10
 8001888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4619      	mov	r1, r3
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 8001892:	f008 fdeb 	bl	800a46c <HAL_TIM_Encoder_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800189c:	f004 fe42 	bl	8006524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_TIM3_Init+0xa0>)
 80018ae:	f009 fee5 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018b8:	f004 fe34 	bl	8006524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	3730      	adds	r7, #48	@ 0x30
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200004b0 	.word	0x200004b0
 80018c8:	40000400 	.word	0x40000400

080018cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018e8:	4b25      	ldr	r3, [pc, #148]	@ (8001980 <MX_TIM4_Init+0xb4>)
 80018ea:	4a26      	ldr	r2, [pc, #152]	@ (8001984 <MX_TIM4_Init+0xb8>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80018ee:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <MX_TIM4_Init+0xb4>)
 80018f0:	220f      	movs	r2, #15
 80018f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <MX_TIM4_Init+0xb4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018fa:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <MX_TIM4_Init+0xb4>)
 80018fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001900:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001902:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <MX_TIM4_Init+0xb4>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <MX_TIM4_Init+0xb4>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800190e:	481c      	ldr	r0, [pc, #112]	@ (8001980 <MX_TIM4_Init+0xb4>)
 8001910:	f008 fb86 	bl	800a020 <HAL_TIM_IC_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800191a:	f004 fe03 	bl	8006524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4619      	mov	r1, r3
 800192c:	4814      	ldr	r0, [pc, #80]	@ (8001980 <MX_TIM4_Init+0xb4>)
 800192e:	f009 fea5 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001938:	f004 fdf4 	bl	8006524 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001940:	2301      	movs	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800194c:	463b      	mov	r3, r7
 800194e:	2204      	movs	r2, #4
 8001950:	4619      	mov	r1, r3
 8001952:	480b      	ldr	r0, [pc, #44]	@ (8001980 <MX_TIM4_Init+0xb4>)
 8001954:	f008 ffc6 	bl	800a8e4 <HAL_TIM_IC_ConfigChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800195e:	f004 fde1 	bl	8006524 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001962:	463b      	mov	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	@ (8001980 <MX_TIM4_Init+0xb4>)
 800196a:	f008 ffbb 	bl	800a8e4 <HAL_TIM_IC_ConfigChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM4_Init+0xac>
  		Error_Handler();
 8001974:	f004 fdd6 	bl	8006524 <Error_Handler>
  	}
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200004f8 	.word	0x200004f8
 8001984:	40000800 	.word	0x40000800

08001988 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198e:	463b      	mov	r3, r7
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <MX_TIM6_Init+0x64>)
 8001998:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <MX_TIM6_Init+0x68>)
 800199a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <MX_TIM6_Init+0x64>)
 800199e:	2200      	movs	r2, #0
 80019a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <MX_TIM6_Init+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80019a8:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <MX_TIM6_Init+0x64>)
 80019aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <MX_TIM6_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019b6:	480d      	ldr	r0, [pc, #52]	@ (80019ec <MX_TIM6_Init+0x64>)
 80019b8:	f008 f9c2 	bl	8009d40 <HAL_TIM_Base_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80019c2:	f004 fdaf 	bl	8006524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019ce:	463b      	mov	r3, r7
 80019d0:	4619      	mov	r1, r3
 80019d2:	4806      	ldr	r0, [pc, #24]	@ (80019ec <MX_TIM6_Init+0x64>)
 80019d4:	f009 fe52 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80019de:	f004 fda1 	bl	8006524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000540 	.word	0x20000540
 80019f0:	40001000 	.word	0x40001000

080019f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b096      	sub	sp, #88	@ 0x58
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2220      	movs	r2, #32
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00e fba1 	bl	8010174 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a32:	4b43      	ldr	r3, [pc, #268]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a34:	4a43      	ldr	r2, [pc, #268]	@ (8001b44 <MX_TIM8_Init+0x150>)
 8001a36:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a38:	4b41      	ldr	r3, [pc, #260]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b40      	ldr	r3, [pc, #256]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001a44:	4b3e      	ldr	r3, [pc, #248]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a46:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001a4a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a52:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b39      	ldr	r3, [pc, #228]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a5e:	4838      	ldr	r0, [pc, #224]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a60:	f008 f96e 	bl	8009d40 <HAL_TIM_Base_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001a6a:	f004 fd5b 	bl	8006524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4831      	ldr	r0, [pc, #196]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a7c:	f009 f890 	bl	800aba0 <HAL_TIM_ConfigClockSource>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001a86:	f004 fd4d 	bl	8006524 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a8a:	482d      	ldr	r0, [pc, #180]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001a8c:	f008 f9a7 	bl	8009dde <HAL_TIM_PWM_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001a96:	f004 fd45 	bl	8006524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001aa2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4825      	ldr	r0, [pc, #148]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001aaa:	f009 fde7 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001ab4:	f004 fd36 	bl	8006524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab8:	2360      	movs	r3, #96	@ 0x60
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4619      	mov	r1, r3
 8001adc:	4818      	ldr	r0, [pc, #96]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001ade:	f008 ff9d 	bl	800aa1c <HAL_TIM_PWM_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001ae8:	f004 fd1c 	bl	8006524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af0:	2204      	movs	r2, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4812      	ldr	r0, [pc, #72]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001af6:	f008 ff91 	bl	800aa1c <HAL_TIM_PWM_ConfigChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001b00:	f004 fd10 	bl	8006524 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	@ (8001b40 <MX_TIM8_Init+0x14c>)
 8001b28:	f009 fe24 	bl	800b774 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001b32:	f004 fcf7 	bl	8006524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	3758      	adds	r7, #88	@ 0x58
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000588 	.word	0x20000588
 8001b44:	40010400 	.word	0x40010400

08001b48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <MX_USART3_UART_Init+0x50>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b80:	f009 fe5e 	bl	800b840 <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b8a:	f004 fccb 	bl	8006524 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200005d0 	.word	0x200005d0
 8001b98:	40004800 	.word	0x40004800

08001b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	@ 0x30
 8001ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a5a      	ldr	r2, [pc, #360]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bbc:	f043 0310 	orr.w	r3, r3, #16
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b58      	ldr	r3, [pc, #352]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	4b54      	ldr	r3, [pc, #336]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a53      	ldr	r2, [pc, #332]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b51      	ldr	r3, [pc, #324]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b4d      	ldr	r3, [pc, #308]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b46      	ldr	r3, [pc, #280]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4a45      	ldr	r2, [pc, #276]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4b43      	ldr	r3, [pc, #268]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	4b3f      	ldr	r3, [pc, #252]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b3c      	ldr	r3, [pc, #240]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b38      	ldr	r3, [pc, #224]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a37      	ldr	r2, [pc, #220]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b35      	ldr	r3, [pc, #212]	@ (8001d24 <MX_GPIO_Init+0x188>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001c60:	4831      	ldr	r0, [pc, #196]	@ (8001d28 <MX_GPIO_Init+0x18c>)
 8001c62:	f006 fc13 	bl	800848c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	213c      	movs	r1, #60	@ 0x3c
 8001c6a:	4830      	ldr	r0, [pc, #192]	@ (8001d2c <MX_GPIO_Init+0x190>)
 8001c6c:	f006 fc0e 	bl	800848c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin|TRI_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001c76:	482e      	ldr	r0, [pc, #184]	@ (8001d30 <MX_GPIO_Init+0x194>)
 8001c78:	f006 fc08 	bl	800848c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c82:	482c      	ldr	r0, [pc, #176]	@ (8001d34 <MX_GPIO_Init+0x198>)
 8001c84:	f006 fc02 	bl	800848c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001c88:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8001c8c:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4821      	ldr	r0, [pc, #132]	@ (8001d28 <MX_GPIO_Init+0x18c>)
 8001ca2:	f006 fa57 	bl	8008154 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001ca6:	233c      	movs	r3, #60	@ 0x3c
 8001ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481b      	ldr	r0, [pc, #108]	@ (8001d2c <MX_GPIO_Init+0x190>)
 8001cbe:	f006 fa49 	bl	8008154 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin TRI_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|TRI_Pin;
 8001cc2:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4815      	ldr	r0, [pc, #84]	@ (8001d30 <MX_GPIO_Init+0x194>)
 8001cdc:	f006 fa3a 	bl	8008154 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8001ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ce6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480f      	ldr	r0, [pc, #60]	@ (8001d34 <MX_GPIO_Init+0x198>)
 8001cf8:	f006 fa2c 	bl	8008154 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  	GPIO_InitStruct.Pin = Trigger_Pin;
 8001cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d00:	61fb      	str	r3, [r7, #28]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	623b      	str	r3, [r7, #32]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  	HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	4807      	ldr	r0, [pc, #28]	@ (8001d34 <MX_GPIO_Init+0x198>)
 8001d16:	f006 fa1d 	bl	8008154 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8001d1a:	bf00      	nop
 8001d1c:	3730      	adds	r7, #48	@ 0x30
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020400 	.word	0x40020400
 8001d34:	40020c00 	.word	0x40020c00

08001d38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// HAL_UART_RxCpltCallback evoked when buffer is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	@ 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	// prevent unused argument(s) compilation warning
	HAL_UART_Transmit(&huart3, (uint8_t*) aRxBuffer, 4, 0xFFF);
 8001d40:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001d44:	2204      	movs	r2, #4
 8001d46:	4992      	ldr	r1, [pc, #584]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d48:	4892      	ldr	r0, [pc, #584]	@ (8001f94 <HAL_UART_RxCpltCallback+0x25c>)
 8001d4a:	f009 fdc6 	bl	800b8da <HAL_UART_Transmit>
	UNUSED(huart);
	int val;

	val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001d4e:	4b90      	ldr	r3, [pc, #576]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d50:	789b      	ldrb	r3, [r3, #2]
 8001d52:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b8b      	ldr	r3, [pc, #556]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d62:	78db      	ldrb	r3, [r3, #3]
 8001d64:	3b30      	subs	r3, #48	@ 0x30
 8001d66:	4413      	add	r3, r2
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
	if (aRxBuffer[1] >= '0' && aRxBuffer[1] <= '9') val += (aRxBuffer[1] - 48) * 100;
 8001d6a:	4b89      	ldr	r3, [pc, #548]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d6c:	785b      	ldrb	r3, [r3, #1]
 8001d6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d70:	d90c      	bls.n	8001d8c <HAL_UART_RxCpltCallback+0x54>
 8001d72:	4b87      	ldr	r3, [pc, #540]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d74:	785b      	ldrb	r3, [r3, #1]
 8001d76:	2b39      	cmp	r3, #57	@ 0x39
 8001d78:	d808      	bhi.n	8001d8c <HAL_UART_RxCpltCallback+0x54>
 8001d7a:	4b85      	ldr	r3, [pc, #532]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	3b30      	subs	r3, #48	@ 0x30
 8001d80:	2264      	movs	r2, #100	@ 0x64
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d88:	4413      	add	r3, r2
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24

	manualMode = 0;
 8001d8c:	4b82      	ldr	r3, [pc, #520]	@ (8001f98 <HAL_UART_RxCpltCallback+0x260>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]

	if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T') { // only STOP can preempt any greedy task
 8001d92:	4b7f      	ldr	r3, [pc, #508]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b53      	cmp	r3, #83	@ 0x53
 8001d98:	d159      	bne.n	8001e4e <HAL_UART_RxCpltCallback+0x116>
 8001d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	2b54      	cmp	r3, #84	@ 0x54
 8001da0:	d155      	bne.n	8001e4e <HAL_UART_RxCpltCallback+0x116>
//		__ADD_COMMAND(cQueue, 0, 0); // stop
		__ON_TASK_END(&htim8, prevTask, curTask);
 8001da2:	4b7e      	ldr	r3, [pc, #504]	@ (8001f9c <HAL_UART_RxCpltCallback+0x264>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001daa:	4b7c      	ldr	r3, [pc, #496]	@ (8001f9c <HAL_UART_RxCpltCallback+0x264>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001db2:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa0 <HAL_UART_RxCpltCallback+0x268>)
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa4 <HAL_UART_RxCpltCallback+0x26c>)
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	4b79      	ldr	r3, [pc, #484]	@ (8001fa0 <HAL_UART_RxCpltCallback+0x268>)
 8001dbc:	220b      	movs	r2, #11
 8001dbe:	701a      	strb	r2, [r3, #0]
		  angleNow = 0; gyroZ = 0; // reset angle for PID
 8001dc0:	4b79      	ldr	r3, [pc, #484]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x270>)
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	4b78      	ldr	r3, [pc, #480]	@ (8001fac <HAL_UART_RxCpltCallback+0x274>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	801a      	strh	r2, [r3, #0]
		PIDConfigReset(&pidTSlow);
 8001dce:	4878      	ldr	r0, [pc, #480]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x278>)
 8001dd0:	f000 fcf3 	bl	80027ba <PIDConfigReset>
		PIDConfigReset(&pidSlow);
 8001dd4:	4877      	ldr	r0, [pc, #476]	@ (8001fb4 <HAL_UART_RxCpltCallback+0x27c>)
 8001dd6:	f000 fcf0 	bl	80027ba <PIDConfigReset>
		PIDConfigReset(&pidFast);
 8001dda:	4877      	ldr	r0, [pc, #476]	@ (8001fb8 <HAL_UART_RxCpltCallback+0x280>)
 8001ddc:	f000 fced 	bl	80027ba <PIDConfigReset>
		curDistTick = 0;
 8001de0:	4b76      	ldr	r3, [pc, #472]	@ (8001fbc <HAL_UART_RxCpltCallback+0x284>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	801a      	strh	r2, [r3, #0]
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001de6:	4b76      	ldr	r3, [pc, #472]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	4b75      	ldr	r3, [pc, #468]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d112      	bne.n	8001e18 <HAL_UART_RxCpltCallback+0xe0>
			__CLEAR_CURCMD(curCmd);
 8001df2:	4b74      	ldr	r3, [pc, #464]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x28c>)
 8001df4:	2264      	movs	r2, #100	@ 0x64
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	4b72      	ldr	r3, [pc, #456]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x28c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8001dfe:	4a72      	ldr	r2, [pc, #456]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x290>)
 8001e00:	210f      	movs	r1, #15
 8001e02:	4872      	ldr	r0, [pc, #456]	@ (8001fcc <HAL_UART_RxCpltCallback+0x294>)
 8001e04:	f00e f81c 	bl	800fe40 <sniprintf>
 8001e08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e0c:	2206      	movs	r2, #6
 8001e0e:	4970      	ldr	r1, [pc, #448]	@ (8001fd0 <HAL_UART_RxCpltCallback+0x298>)
 8001e10:	4860      	ldr	r0, [pc, #384]	@ (8001f94 <HAL_UART_RxCpltCallback+0x25c>)
 8001e12:	f009 fd62 	bl	800b8da <HAL_UART_Transmit>
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001e16:	e308      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
		}
		else {
			__READ_COMMAND(cQueue, curCmd, rxMsg);
 8001e18:	4b69      	ldr	r3, [pc, #420]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e1a:	785b      	ldrb	r3, [r3, #1]
 8001e1c:	4a69      	ldr	r2, [pc, #420]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x28c>)
 8001e1e:	4968      	ldr	r1, [pc, #416]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b65      	ldr	r3, [pc, #404]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a64      	ldr	r2, [pc, #400]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e30:	7892      	ldrb	r2, [r2, #2]
 8001e32:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e36:	fb01 f202 	mul.w	r2, r1, r2
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b60      	ldr	r3, [pc, #384]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e40:	705a      	strb	r2, [r3, #1]
 8001e42:	4a64      	ldr	r2, [pc, #400]	@ (8001fd4 <HAL_UART_RxCpltCallback+0x29c>)
 8001e44:	210f      	movs	r1, #15
 8001e46:	4861      	ldr	r0, [pc, #388]	@ (8001fcc <HAL_UART_RxCpltCallback+0x294>)
 8001e48:	f00d fffa 	bl	800fe40 <sniprintf>
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001e4c:	e2ed      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
		}
	}
	else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //FW or FS
 8001e4e:	4b50      	ldr	r3, [pc, #320]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b46      	cmp	r3, #70	@ 0x46
 8001e54:	d13d      	bne.n	8001ed2 <HAL_UART_RxCpltCallback+0x19a>
 8001e56:	4b4e      	ldr	r3, [pc, #312]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	2b57      	cmp	r3, #87	@ 0x57
 8001e5c:	d003      	beq.n	8001e66 <HAL_UART_RxCpltCallback+0x12e>
 8001e5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e60:	785b      	ldrb	r3, [r3, #1]
 8001e62:	2b53      	cmp	r3, #83	@ 0x53
 8001e64:	d135      	bne.n	8001ed2 <HAL_UART_RxCpltCallback+0x19a>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e68:	789b      	ldrb	r3, [r3, #2]
 8001e6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8001e6c:	d105      	bne.n	8001e7a <HAL_UART_RxCpltCallback+0x142>
 8001e6e:	4b48      	ldr	r3, [pc, #288]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e70:	78db      	ldrb	r3, [r3, #3]
 8001e72:	2b2d      	cmp	r3, #45	@ 0x2d
 8001e74:	d101      	bne.n	8001e7a <HAL_UART_RxCpltCallback+0x142>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_UART_RxCpltCallback+0x144>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b46      	ldr	r3, [pc, #280]	@ (8001f98 <HAL_UART_RxCpltCallback+0x260>)
 8001e80:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001e82:	4b43      	ldr	r3, [pc, #268]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	2b53      	cmp	r3, #83	@ 0x53
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b51      	ldr	r3, [pc, #324]	@ (8001fd8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001e94:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 1, val);
 8001e96:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4a49      	ldr	r2, [pc, #292]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	711a      	strb	r2, [r3, #4]
 8001ea4:	4b46      	ldr	r3, [pc, #280]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eaa:	b291      	uxth	r1, r2
 8001eac:	4a44      	ldr	r2, [pc, #272]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	460a      	mov	r2, r1
 8001eb4:	80da      	strh	r2, [r3, #6]
 8001eb6:	4b42      	ldr	r3, [pc, #264]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a40      	ldr	r2, [pc, #256]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001ebe:	7892      	ldrb	r2, [r2, #2]
 8001ec0:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ec4:	fb01 f202 	mul.w	r2, r1, r2
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	e2ab      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //BW or BS
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b42      	cmp	r3, #66	@ 0x42
 8001ed8:	d13d      	bne.n	8001f56 <HAL_UART_RxCpltCallback+0x21e>
 8001eda:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001edc:	785b      	ldrb	r3, [r3, #1]
 8001ede:	2b57      	cmp	r3, #87	@ 0x57
 8001ee0:	d003      	beq.n	8001eea <HAL_UART_RxCpltCallback+0x1b2>
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001ee4:	785b      	ldrb	r3, [r3, #1]
 8001ee6:	2b53      	cmp	r3, #83	@ 0x53
 8001ee8:	d135      	bne.n	8001f56 <HAL_UART_RxCpltCallback+0x21e>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001eea:	4b29      	ldr	r3, [pc, #164]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001eec:	789b      	ldrb	r3, [r3, #2]
 8001eee:	2b2d      	cmp	r3, #45	@ 0x2d
 8001ef0:	d105      	bne.n	8001efe <HAL_UART_RxCpltCallback+0x1c6>
 8001ef2:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001ef4:	78db      	ldrb	r3, [r3, #3]
 8001ef6:	2b2d      	cmp	r3, #45	@ 0x2d
 8001ef8:	d101      	bne.n	8001efe <HAL_UART_RxCpltCallback+0x1c6>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_UART_RxCpltCallback+0x1c8>
 8001efe:	2300      	movs	r3, #0
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <HAL_UART_RxCpltCallback+0x260>)
 8001f04:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001f06:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001f08:	785b      	ldrb	r3, [r3, #1]
 8001f0a:	2b53      	cmp	r3, #83	@ 0x53
 8001f0c:	bf14      	ite	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	2300      	moveq	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001f18:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 2, val);
 8001f1a:	4b29      	ldr	r3, [pc, #164]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4a28      	ldr	r2, [pc, #160]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	2202      	movs	r2, #2
 8001f26:	711a      	strb	r2, [r3, #4]
 8001f28:	4b25      	ldr	r3, [pc, #148]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2e:	b291      	uxth	r1, r2
 8001f30:	4a23      	ldr	r2, [pc, #140]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	460a      	mov	r2, r1
 8001f38:	80da      	strh	r2, [r3, #6]
 8001f3a:	4b21      	ldr	r3, [pc, #132]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f42:	7892      	ldrb	r2, [r2, #2]
 8001f44:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f48:	fb01 f202 	mul.w	r2, r1, r2
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x288>)
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e269      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L') { // FL
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b46      	cmp	r3, #70	@ 0x46
 8001f5c:	d15d      	bne.n	800201a <HAL_UART_RxCpltCallback+0x2e2>
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	2b4c      	cmp	r3, #76	@ 0x4c
 8001f64:	d159      	bne.n	800201a <HAL_UART_RxCpltCallback+0x2e2>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001f68:	789b      	ldrb	r3, [r3, #2]
 8001f6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f6c:	d105      	bne.n	8001f7a <HAL_UART_RxCpltCallback+0x242>
 8001f6e:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_UART_RxCpltCallback+0x258>)
 8001f70:	78db      	ldrb	r3, [r3, #3]
 8001f72:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f74:	d101      	bne.n	8001f7a <HAL_UART_RxCpltCallback+0x242>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_UART_RxCpltCallback+0x244>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_UART_RxCpltCallback+0x260>)
 8001f80:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_UART_RxCpltCallback+0x260>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d028      	beq.n	8001fdc <HAL_UART_RxCpltCallback+0x2a4>
 8001f8a:	2103      	movs	r1, #3
 8001f8c:	e027      	b.n	8001fde <HAL_UART_RxCpltCallback+0x2a6>
 8001f8e:	bf00      	nop
 8001f90:	20000650 	.word	0x20000650
 8001f94:	200005d0 	.word	0x200005d0
 8001f98:	200006a4 	.word	0x200006a4
 8001f9c:	20000588 	.word	0x20000588
 8001fa0:	20000134 	.word	0x20000134
 8001fa4:	20000135 	.word	0x20000135
 8001fa8:	200006ac 	.word	0x200006ac
 8001fac:	200006b2 	.word	0x200006b2
 8001fb0:	200006dc 	.word	0x200006dc
 8001fb4:	200006c8 	.word	0x200006c8
 8001fb8:	200006f0 	.word	0x200006f0
 8001fbc:	200006c0 	.word	0x200006c0
 8001fc0:	2000065c 	.word	0x2000065c
 8001fc4:	20000690 	.word	0x20000690
 8001fc8:	08013104 	.word	0x08013104
 8001fcc:	20000694 	.word	0x20000694
 8001fd0:	0801310c 	.word	0x0801310c
 8001fd4:	08013114 	.word	0x08013114
 8001fd8:	20000136 	.word	0x20000136
 8001fdc:	2107      	movs	r1, #7
 8001fde:	4b8d      	ldr	r3, [pc, #564]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4a8c      	ldr	r2, [pc, #560]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	460a      	mov	r2, r1
 8001fea:	711a      	strb	r2, [r3, #4]
 8001fec:	4b89      	ldr	r3, [pc, #548]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff2:	b291      	uxth	r1, r2
 8001ff4:	4a87      	ldr	r2, [pc, #540]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	460a      	mov	r2, r1
 8001ffc:	80da      	strh	r2, [r3, #6]
 8001ffe:	4b85      	ldr	r3, [pc, #532]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a83      	ldr	r2, [pc, #524]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002006:	7892      	ldrb	r2, [r2, #2]
 8002008:	fb93 f1f2 	sdiv	r1, r3, r2
 800200c:	fb01 f202 	mul.w	r2, r1, r2
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b7f      	ldr	r3, [pc, #508]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e207      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R') { // FR
 800201a:	4b7f      	ldr	r3, [pc, #508]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b46      	cmp	r3, #70	@ 0x46
 8002020:	d136      	bne.n	8002090 <HAL_UART_RxCpltCallback+0x358>
 8002022:	4b7d      	ldr	r3, [pc, #500]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	2b52      	cmp	r3, #82	@ 0x52
 8002028:	d132      	bne.n	8002090 <HAL_UART_RxCpltCallback+0x358>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 800202a:	4b7b      	ldr	r3, [pc, #492]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 800202c:	789b      	ldrb	r3, [r3, #2]
 800202e:	2b2d      	cmp	r3, #45	@ 0x2d
 8002030:	d105      	bne.n	800203e <HAL_UART_RxCpltCallback+0x306>
 8002032:	4b79      	ldr	r3, [pc, #484]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002034:	78db      	ldrb	r3, [r3, #3]
 8002036:	2b2d      	cmp	r3, #45	@ 0x2d
 8002038:	d101      	bne.n	800203e <HAL_UART_RxCpltCallback+0x306>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_UART_RxCpltCallback+0x308>
 800203e:	2300      	movs	r3, #0
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b76      	ldr	r3, [pc, #472]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 8002044:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8002046:	4b75      	ldr	r3, [pc, #468]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_UART_RxCpltCallback+0x31a>
 800204e:	2104      	movs	r1, #4
 8002050:	e000      	b.n	8002054 <HAL_UART_RxCpltCallback+0x31c>
 8002052:	2108      	movs	r1, #8
 8002054:	4b6f      	ldr	r3, [pc, #444]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4a6e      	ldr	r2, [pc, #440]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	460a      	mov	r2, r1
 8002060:	711a      	strb	r2, [r3, #4]
 8002062:	4b6c      	ldr	r3, [pc, #432]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002068:	b291      	uxth	r1, r2
 800206a:	4a6a      	ldr	r2, [pc, #424]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	460a      	mov	r2, r1
 8002072:	80da      	strh	r2, [r3, #6]
 8002074:	4b67      	ldr	r3, [pc, #412]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	4a66      	ldr	r2, [pc, #408]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800207c:	7892      	ldrb	r2, [r2, #2]
 800207e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002082:	fb01 f202 	mul.w	r2, r1, r2
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b62      	ldr	r3, [pc, #392]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e1cc      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L') { // BL
 8002090:	4b61      	ldr	r3, [pc, #388]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b42      	cmp	r3, #66	@ 0x42
 8002096:	d136      	bne.n	8002106 <HAL_UART_RxCpltCallback+0x3ce>
 8002098:	4b5f      	ldr	r3, [pc, #380]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	2b4c      	cmp	r3, #76	@ 0x4c
 800209e:	d132      	bne.n	8002106 <HAL_UART_RxCpltCallback+0x3ce>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 80020a0:	4b5d      	ldr	r3, [pc, #372]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 80020a2:	789b      	ldrb	r3, [r3, #2]
 80020a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80020a6:	d105      	bne.n	80020b4 <HAL_UART_RxCpltCallback+0x37c>
 80020a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 80020aa:	78db      	ldrb	r3, [r3, #3]
 80020ac:	2b2d      	cmp	r3, #45	@ 0x2d
 80020ae:	d101      	bne.n	80020b4 <HAL_UART_RxCpltCallback+0x37c>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_UART_RxCpltCallback+0x37e>
 80020b4:	2300      	movs	r3, #0
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b58      	ldr	r3, [pc, #352]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 80020ba:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 80020bc:	4b57      	ldr	r3, [pc, #348]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_RxCpltCallback+0x390>
 80020c4:	2105      	movs	r1, #5
 80020c6:	e000      	b.n	80020ca <HAL_UART_RxCpltCallback+0x392>
 80020c8:	2109      	movs	r1, #9
 80020ca:	4b52      	ldr	r3, [pc, #328]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	4a51      	ldr	r2, [pc, #324]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	460a      	mov	r2, r1
 80020d6:	711a      	strb	r2, [r3, #4]
 80020d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020de:	b291      	uxth	r1, r2
 80020e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	460a      	mov	r2, r1
 80020e8:	80da      	strh	r2, [r3, #6]
 80020ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	4a48      	ldr	r2, [pc, #288]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80020f2:	7892      	ldrb	r2, [r2, #2]
 80020f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80020f8:	fb01 f202 	mul.w	r2, r1, r2
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b44      	ldr	r3, [pc, #272]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	e191      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R') { // BR
 8002106:	4b44      	ldr	r3, [pc, #272]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b42      	cmp	r3, #66	@ 0x42
 800210c:	d136      	bne.n	800217c <HAL_UART_RxCpltCallback+0x444>
 800210e:	4b42      	ldr	r3, [pc, #264]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	2b52      	cmp	r3, #82	@ 0x52
 8002114:	d132      	bne.n	800217c <HAL_UART_RxCpltCallback+0x444>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8002116:	4b40      	ldr	r3, [pc, #256]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002118:	789b      	ldrb	r3, [r3, #2]
 800211a:	2b2d      	cmp	r3, #45	@ 0x2d
 800211c:	d105      	bne.n	800212a <HAL_UART_RxCpltCallback+0x3f2>
 800211e:	4b3e      	ldr	r3, [pc, #248]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002120:	78db      	ldrb	r3, [r3, #3]
 8002122:	2b2d      	cmp	r3, #45	@ 0x2d
 8002124:	d101      	bne.n	800212a <HAL_UART_RxCpltCallback+0x3f2>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_UART_RxCpltCallback+0x3f4>
 800212a:	2300      	movs	r3, #0
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 8002130:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 8002132:	4b3a      	ldr	r3, [pc, #232]	@ (800221c <HAL_UART_RxCpltCallback+0x4e4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_UART_RxCpltCallback+0x406>
 800213a:	2106      	movs	r1, #6
 800213c:	e000      	b.n	8002140 <HAL_UART_RxCpltCallback+0x408>
 800213e:	210a      	movs	r1, #10
 8002140:	4b34      	ldr	r3, [pc, #208]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4a33      	ldr	r2, [pc, #204]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	460a      	mov	r2, r1
 800214c:	711a      	strb	r2, [r3, #4]
 800214e:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002154:	b291      	uxth	r1, r2
 8002156:	4a2f      	ldr	r2, [pc, #188]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	460a      	mov	r2, r1
 800215e:	80da      	strh	r2, [r3, #6]
 8002160:	4b2c      	ldr	r3, [pc, #176]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	4a2b      	ldr	r2, [pc, #172]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002168:	7892      	ldrb	r2, [r2, #2]
 800216a:	fb93 f1f2 	sdiv	r1, r3, r2
 800216e:	fb01 f202 	mul.w	r2, r1, r2
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b27      	ldr	r3, [pc, #156]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e156      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	}
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L') __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 800217c:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b54      	cmp	r3, #84	@ 0x54
 8002182:	d121      	bne.n	80021c8 <HAL_UART_RxCpltCallback+0x490>
 8002184:	4b24      	ldr	r3, [pc, #144]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 8002186:	785b      	ldrb	r3, [r3, #1]
 8002188:	2b4c      	cmp	r3, #76	@ 0x4c
 800218a:	d11d      	bne.n	80021c8 <HAL_UART_RxCpltCallback+0x490>
 800218c:	4b21      	ldr	r3, [pc, #132]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4a20      	ldr	r2, [pc, #128]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	220b      	movs	r2, #11
 8002198:	711a      	strb	r2, [r3, #4]
 800219a:	4b1e      	ldr	r3, [pc, #120]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a0:	b291      	uxth	r1, r2
 80021a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	460a      	mov	r2, r1
 80021aa:	80da      	strh	r2, [r3, #6]
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	4a18      	ldr	r2, [pc, #96]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021b4:	7892      	ldrb	r2, [r2, #2]
 80021b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80021ba:	fb01 f202 	mul.w	r2, r1, r2
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e130      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b54      	cmp	r3, #84	@ 0x54
 80021ce:	d127      	bne.n	8002220 <HAL_UART_RxCpltCallback+0x4e8>
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_UART_RxCpltCallback+0x4e0>)
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	2b52      	cmp	r3, #82	@ 0x52
 80021d6:	d123      	bne.n	8002220 <HAL_UART_RxCpltCallback+0x4e8>
 80021d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	220c      	movs	r2, #12
 80021e4:	711a      	strb	r2, [r3, #4]
 80021e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ec:	b291      	uxth	r1, r2
 80021ee:	4a09      	ldr	r2, [pc, #36]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	460a      	mov	r2, r1
 80021f6:	80da      	strh	r2, [r3, #6]
 80021f8:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002200:	7892      	ldrb	r2, [r2, #2]
 8002202:	fb93 f1f2 	sdiv	r1, r3, r2
 8002206:	fb01 f202 	mul.w	r2, r1, r2
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b01      	ldr	r3, [pc, #4]	@ (8002214 <HAL_UART_RxCpltCallback+0x4dc>)
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e10a      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
 8002214:	2000065c 	.word	0x2000065c
 8002218:	20000650 	.word	0x20000650
 800221c:	200006a4 	.word	0x200006a4
	else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 13, val); // test IR sensor
 8002220:	4b6f      	ldr	r3, [pc, #444]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b49      	cmp	r3, #73	@ 0x49
 8002226:	d121      	bne.n	800226c <HAL_UART_RxCpltCallback+0x534>
 8002228:	4b6d      	ldr	r3, [pc, #436]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	2b52      	cmp	r3, #82	@ 0x52
 800222e:	d11d      	bne.n	800226c <HAL_UART_RxCpltCallback+0x534>
 8002230:	4b6c      	ldr	r3, [pc, #432]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4a6b      	ldr	r2, [pc, #428]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	220d      	movs	r2, #13
 800223c:	711a      	strb	r2, [r3, #4]
 800223e:	4b69      	ldr	r3, [pc, #420]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002244:	b291      	uxth	r1, r2
 8002246:	4a67      	ldr	r2, [pc, #412]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	460a      	mov	r2, r1
 800224e:	80da      	strh	r2, [r3, #6]
 8002250:	4b64      	ldr	r3, [pc, #400]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a63      	ldr	r2, [pc, #396]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002258:	7892      	ldrb	r2, [r2, #2]
 800225a:	fb93 f1f2 	sdiv	r1, r3, r2
 800225e:	fb01 f202 	mul.w	r2, r1, r2
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b5f      	ldr	r3, [pc, #380]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e0de      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T') __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 800226c:	4b5c      	ldr	r3, [pc, #368]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b44      	cmp	r3, #68	@ 0x44
 8002272:	d121      	bne.n	80022b8 <HAL_UART_RxCpltCallback+0x580>
 8002274:	4b5a      	ldr	r3, [pc, #360]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 8002276:	785b      	ldrb	r3, [r3, #1]
 8002278:	2b54      	cmp	r3, #84	@ 0x54
 800227a:	d11d      	bne.n	80022b8 <HAL_UART_RxCpltCallback+0x580>
 800227c:	4b59      	ldr	r3, [pc, #356]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4a58      	ldr	r2, [pc, #352]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	220e      	movs	r2, #14
 8002288:	711a      	strb	r2, [r3, #4]
 800228a:	4b56      	ldr	r3, [pc, #344]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002290:	b291      	uxth	r1, r2
 8002292:	4a54      	ldr	r2, [pc, #336]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	460a      	mov	r2, r1
 800229a:	80da      	strh	r2, [r3, #6]
 800229c:	4b51      	ldr	r3, [pc, #324]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	4a50      	ldr	r2, [pc, #320]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022a4:	7892      	ldrb	r2, [r2, #2]
 80022a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80022aa:	fb01 f202 	mul.w	r2, r1, r2
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b4c      	ldr	r3, [pc, #304]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e0b8      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'Z' && aRxBuffer[1] == 'Z') __ADD_COMMAND(cQueue, 15, val); // ZZ buzzer
 80022b8:	4b49      	ldr	r3, [pc, #292]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b5a      	cmp	r3, #90	@ 0x5a
 80022be:	d121      	bne.n	8002304 <HAL_UART_RxCpltCallback+0x5cc>
 80022c0:	4b47      	ldr	r3, [pc, #284]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 80022c2:	785b      	ldrb	r3, [r3, #1]
 80022c4:	2b5a      	cmp	r3, #90	@ 0x5a
 80022c6:	d11d      	bne.n	8002304 <HAL_UART_RxCpltCallback+0x5cc>
 80022c8:	4b46      	ldr	r3, [pc, #280]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4a45      	ldr	r2, [pc, #276]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	220f      	movs	r2, #15
 80022d4:	711a      	strb	r2, [r3, #4]
 80022d6:	4b43      	ldr	r3, [pc, #268]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022dc:	b291      	uxth	r1, r2
 80022de:	4a41      	ldr	r2, [pc, #260]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	460a      	mov	r2, r1
 80022e6:	80da      	strh	r2, [r3, #6]
 80022e8:	4b3e      	ldr	r3, [pc, #248]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a3d      	ldr	r2, [pc, #244]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80022f0:	7892      	ldrb	r2, [r2, #2]
 80022f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80022f6:	fb01 f202 	mul.w	r2, r1, r2
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	e092      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'X') __ADD_COMMAND(cQueue, 16, val); // WN fastest path
 8002304:	4b36      	ldr	r3, [pc, #216]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b57      	cmp	r3, #87	@ 0x57
 800230a:	d121      	bne.n	8002350 <HAL_UART_RxCpltCallback+0x618>
 800230c:	4b34      	ldr	r3, [pc, #208]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 800230e:	785b      	ldrb	r3, [r3, #1]
 8002310:	2b58      	cmp	r3, #88	@ 0x58
 8002312:	d11d      	bne.n	8002350 <HAL_UART_RxCpltCallback+0x618>
 8002314:	4b33      	ldr	r3, [pc, #204]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4a32      	ldr	r2, [pc, #200]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	2210      	movs	r2, #16
 8002320:	711a      	strb	r2, [r3, #4]
 8002322:	4b30      	ldr	r3, [pc, #192]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002328:	b291      	uxth	r1, r2
 800232a:	4a2e      	ldr	r2, [pc, #184]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	460a      	mov	r2, r1
 8002332:	80da      	strh	r2, [r3, #6]
 8002334:	4b2b      	ldr	r3, [pc, #172]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	4a2a      	ldr	r2, [pc, #168]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800233c:	7892      	ldrb	r2, [r2, #2]
 800233e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002342:	fb01 f202 	mul.w	r2, r1, r2
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b26      	ldr	r3, [pc, #152]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e06c      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'N') __ADD_COMMAND(cQueue, 17, val); // WN fastest path v2
 8002350:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b57      	cmp	r3, #87	@ 0x57
 8002356:	d121      	bne.n	800239c <HAL_UART_RxCpltCallback+0x664>
 8002358:	4b21      	ldr	r3, [pc, #132]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 800235a:	785b      	ldrb	r3, [r3, #1]
 800235c:	2b4e      	cmp	r3, #78	@ 0x4e
 800235e:	d11d      	bne.n	800239c <HAL_UART_RxCpltCallback+0x664>
 8002360:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4a1f      	ldr	r2, [pc, #124]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	2211      	movs	r2, #17
 800236c:	711a      	strb	r2, [r3, #4]
 800236e:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002374:	b291      	uxth	r1, r2
 8002376:	4a1b      	ldr	r2, [pc, #108]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	460a      	mov	r2, r1
 800237e:	80da      	strh	r2, [r3, #6]
 8002380:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002388:	7892      	ldrb	r2, [r2, #2]
 800238a:	fb93 f1f2 	sdiv	r1, r3, r2
 800238e:	fb01 f202 	mul.w	r2, r1, r2
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e046      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
	else if (aRxBuffer[0] == 'A') __ADD_COMMAND(cQueue, 88, val); // anti-clockwise rotation with variable
 800239c:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <HAL_UART_RxCpltCallback+0x6a8>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b41      	cmp	r3, #65	@ 0x41
 80023a2:	d121      	bne.n	80023e8 <HAL_UART_RxCpltCallback+0x6b0>
 80023a4:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4a0e      	ldr	r2, [pc, #56]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	2258      	movs	r2, #88	@ 0x58
 80023b0:	711a      	strb	r2, [r3, #4]
 80023b2:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b8:	b291      	uxth	r1, r2
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	460a      	mov	r2, r1
 80023c2:	80da      	strh	r2, [r3, #6]
 80023c4:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	3301      	adds	r3, #1
 80023ca:	4a06      	ldr	r2, [pc, #24]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023cc:	7892      	ldrb	r2, [r2, #2]
 80023ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80023d2:	fb01 f202 	mul.w	r2, r1, r2
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b02      	ldr	r3, [pc, #8]	@ (80023e4 <HAL_UART_RxCpltCallback+0x6ac>)
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e024      	b.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
 80023e0:	20000650 	.word	0x20000650
 80023e4:	2000065c 	.word	0x2000065c
	else if (aRxBuffer[0] == 'C') __ADD_COMMAND(cQueue, 89, val); // clockwise rotation with variable
 80023e8:	4b45      	ldr	r3, [pc, #276]	@ (8002500 <HAL_UART_RxCpltCallback+0x7c8>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b43      	cmp	r3, #67	@ 0x43
 80023ee:	d11c      	bne.n	800242a <HAL_UART_RxCpltCallback+0x6f2>
 80023f0:	4b44      	ldr	r3, [pc, #272]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4a43      	ldr	r2, [pc, #268]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	2259      	movs	r2, #89	@ 0x59
 80023fc:	711a      	strb	r2, [r3, #4]
 80023fe:	4b41      	ldr	r3, [pc, #260]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002404:	b291      	uxth	r1, r2
 8002406:	4a3f      	ldr	r2, [pc, #252]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	460a      	mov	r2, r1
 800240e:	80da      	strh	r2, [r3, #6]
 8002410:	4b3c      	ldr	r3, [pc, #240]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	4a3b      	ldr	r2, [pc, #236]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 8002418:	7892      	ldrb	r2, [r2, #2]
 800241a:	fb93 f1f2 	sdiv	r1, r3, r2
 800241e:	fb01 f202 	mul.w	r2, r1, r2
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b37      	ldr	r3, [pc, #220]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 8002428:	701a      	strb	r2, [r3, #0]

	if (!__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800242a:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	4b35      	ldr	r3, [pc, #212]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 8002430:	785b      	ldrb	r3, [r3, #1]
 8002432:	429a      	cmp	r2, r3
 8002434:	d019      	beq.n	800246a <HAL_UART_RxCpltCallback+0x732>
		__READ_COMMAND(cQueue, curCmd, rxMsg);
 8002436:	4b33      	ldr	r3, [pc, #204]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	4a33      	ldr	r2, [pc, #204]	@ (8002508 <HAL_UART_RxCpltCallback+0x7d0>)
 800243c:	4931      	ldr	r1, [pc, #196]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b2f      	ldr	r3, [pc, #188]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 8002448:	785b      	ldrb	r3, [r3, #1]
 800244a:	3301      	adds	r3, #1
 800244c:	4a2d      	ldr	r2, [pc, #180]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 800244e:	7892      	ldrb	r2, [r2, #2]
 8002450:	fb93 f1f2 	sdiv	r1, r3, r2
 8002454:	fb01 f202 	mul.w	r2, r1, r2
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_UART_RxCpltCallback+0x7cc>)
 800245e:	705a      	strb	r2, [r3, #1]
 8002460:	4a2a      	ldr	r2, [pc, #168]	@ (800250c <HAL_UART_RxCpltCallback+0x7d4>)
 8002462:	210f      	movs	r1, #15
 8002464:	482a      	ldr	r0, [pc, #168]	@ (8002510 <HAL_UART_RxCpltCallback+0x7d8>)
 8002466:	f00d fceb 	bl	800fe40 <sniprintf>
	}

	// clear aRx buffer
	  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 800246a:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <HAL_UART_RxCpltCallback+0x7dc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
	  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8002470:	4b29      	ldr	r3, [pc, #164]	@ (8002518 <HAL_UART_RxCpltCallback+0x7e0>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4922      	ldr	r1, [pc, #136]	@ (8002500 <HAL_UART_RxCpltCallback+0x7c8>)
 8002478:	4826      	ldr	r0, [pc, #152]	@ (8002514 <HAL_UART_RxCpltCallback+0x7dc>)
 800247a:	f009 fac0 	bl	800b9fe <HAL_UART_Receive_IT>
	    char c1 = aRxBuffer[0];
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_UART_RxCpltCallback+0x7c8>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		char c2 = aRxBuffer[1];
 8002486:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <HAL_UART_RxCpltCallback+0x7c8>)
 8002488:	785b      	ldrb	r3, [r3, #1]
 800248a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		char d[4];

		//d[0] = '0';
		//d[1] = '0';
		//d[2] = '3';
		if(aRxBuffer[2] == '-' && aRxBuffer[3] == '1')
 800248e:	4b1c      	ldr	r3, [pc, #112]	@ (8002500 <HAL_UART_RxCpltCallback+0x7c8>)
 8002490:	789b      	ldrb	r3, [r3, #2]
 8002492:	2b2d      	cmp	r3, #45	@ 0x2d
 8002494:	d108      	bne.n	80024a8 <HAL_UART_RxCpltCallback+0x770>
 8002496:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <HAL_UART_RxCpltCallback+0x7c8>)
 8002498:	78db      	ldrb	r3, [r3, #3]
 800249a:	2b31      	cmp	r3, #49	@ 0x31
 800249c:	d104      	bne.n	80024a8 <HAL_UART_RxCpltCallback+0x770>
			data = -1;
 800249e:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <HAL_UART_RxCpltCallback+0x7e4>)
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e00d      	b.n	80024c4 <HAL_UART_RxCpltCallback+0x78c>
		else {
			memcpy(d, (void*) &aRxBuffer[2], 2);
 80024a8:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <HAL_UART_RxCpltCallback+0x7c8>)
 80024aa:	885b      	ldrh	r3, [r3, #2]
 80024ac:	83bb      	strh	r3, [r7, #28]
			d[2] = '\0';
 80024ae:	2300      	movs	r3, #0
 80024b0:	77bb      	strb	r3, [r7, #30]

			data = (uint32_t) atoi(d);
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	4618      	mov	r0, r3
 80024b8:	f00d f866 	bl	800f588 <atoi>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	4b16      	ldr	r3, [pc, #88]	@ (800251c <HAL_UART_RxCpltCallback+0x7e4>)
 80024c2:	601a      	str	r2, [r3, #0]

		//if (c1 == 'n') {
		//	newCmdReceived = 1;

		//}
		moveCmd = c1;
 80024c4:	4a16      	ldr	r2, [pc, #88]	@ (8002520 <HAL_UART_RxCpltCallback+0x7e8>)
 80024c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024ca:	7013      	strb	r3, [r2, #0]
		directionCmd = c2;
 80024cc:	4a15      	ldr	r2, [pc, #84]	@ (8002524 <HAL_UART_RxCpltCallback+0x7ec>)
 80024ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80024d2:	7013      	strb	r3, [r2, #0]
		// steeringCmd = c3;
		uint8_t message1[20];

		sprintf(message1, "cmd:%c,%d", directionCmd, data);
 80024d4:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <HAL_UART_RxCpltCallback+0x7ec>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <HAL_UART_RxCpltCallback+0x7e4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f107 0008 	add.w	r0, r7, #8
 80024e2:	4911      	ldr	r1, [pc, #68]	@ (8002528 <HAL_UART_RxCpltCallback+0x7f0>)
 80024e4:	f00d fce0 	bl	800fea8 <siprintf>
		OLED_ShowString(0, 10, message1);
 80024e8:	f107 0308 	add.w	r3, r7, #8
 80024ec:	461a      	mov	r2, r3
 80024ee:	210a      	movs	r1, #10
 80024f0:	2000      	movs	r0, #0
 80024f2:	f004 f991 	bl	8006818 <OLED_ShowString>
//		if (aRxBuffer == "LEFT"){
//
//		} else if (aRxBuffer == "RIGHT"){
//
//		}
}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	@ 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000650 	.word	0x20000650
 8002504:	2000065c 	.word	0x2000065c
 8002508:	20000690 	.word	0x20000690
 800250c:	08013114 	.word	0x08013114
 8002510:	20000694 	.word	0x20000694
 8002514:	200005d0 	.word	0x200005d0
 8002518:	20000000 	.word	0x20000000
 800251c:	2000074c 	.word	0x2000074c
 8002520:	20000751 	.word	0x20000751
 8002524:	20000750 	.word	0x20000750
 8002528:	0801311c 	.word	0x0801311c
 800252c:	00000000 	.word	0x00000000

08002530 <StartIRTask>:
	HAL_ADC_PollForConversion(&hadc2, 10);
	iDistanceR = HAL_ADC_GetValue(&hadc2);
	HAL_ADC_Stop(&hadc2);
}
/* USER CODE END Header_StartIRTask */
void StartIRTask(void *argument) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b094      	sub	sp, #80	@ 0x50
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartIRTask */
	/* Infinite loop */
	uint8_t irVal[40] = { 0 };
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	2224      	movs	r2, #36	@ 0x24
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f00d fe15 	bl	8010174 <memset>
	uint16_t dataPoint_R = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint32_t IR_data_raw_acc_R = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	64bb      	str	r3, [r7, #72]	@ 0x48
	float obsDist_IR_R = 1000;
 8002554:	4b7c      	ldr	r3, [pc, #496]	@ (8002748 <StartIRTask+0x218>)
 8002556:	647b      	str	r3, [r7, #68]	@ 0x44
	float obsDist_IR_L = 1000;
 8002558:	4b7b      	ldr	r3, [pc, #492]	@ (8002748 <StartIRTask+0x218>)
 800255a:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t IR_data_raw_acc_L = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint16_t dataPoint_L = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint16_t obsTick_IR_R = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	873b      	strh	r3, [r7, #56]	@ 0x38
	uint16_t obsTick_IR_L = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	86fb      	strh	r3, [r7, #54]	@ 0x36
//		sprintf(irVal, "L: %d R: %d \0", (int) iDistanceL, iDistanceR);
//		OLED_ShowString(0, 30, irVal);
//		if (irResumeFlag == 1) {
//			vTaskSuspend(IRTaskHandle);
//		}
		__ADC_Read_Dist(&hadc2, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 800256c:	4877      	ldr	r0, [pc, #476]	@ (800274c <StartIRTask+0x21c>)
 800256e:	f004 ff59 	bl	8007424 <HAL_ADC_Start>
 8002572:	f245 51f0 	movw	r1, #22000	@ 0x55f0
 8002576:	4875      	ldr	r0, [pc, #468]	@ (800274c <StartIRTask+0x21c>)
 8002578:	f005 f859 	bl	800762e <HAL_ADC_PollForConversion>
 800257c:	4873      	ldr	r0, [pc, #460]	@ (800274c <StartIRTask+0x21c>)
 800257e:	f005 f9f1 	bl	8007964 <HAL_ADC_GetValue>
 8002582:	4602      	mov	r2, r0
 8002584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002586:	4413      	add	r3, r2
 8002588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800258a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800258e:	3301      	adds	r3, #1
 8002590:	4a6f      	ldr	r2, [pc, #444]	@ (8002750 <StartIRTask+0x220>)
 8002592:	fb82 1203 	smull	r1, r2, r2, r3
 8002596:	1151      	asrs	r1, r2, #5
 8002598:	17da      	asrs	r2, r3, #31
 800259a:	1a8a      	subs	r2, r1, r2
 800259c:	2164      	movs	r1, #100	@ 0x64
 800259e:	fb01 f202 	mul.w	r2, r1, r2
 80025a2:	1a9a      	subs	r2, r3, r2
 80025a4:	4613      	mov	r3, r2
 80025a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80025aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025ae:	2b63      	cmp	r3, #99	@ 0x63
 80025b0:	d12b      	bne.n	800260a <StartIRTask+0xda>
 80025b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffa1 	bl	8000504 <__aeabi_ui2d>
 80025c2:	a35d      	add	r3, pc, #372	@ (adr r3, 8002738 <StartIRTask+0x208>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fd fe5e 	bl	8000288 <__aeabi_dsub>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	a15b      	add	r1, pc, #364	@ (adr r1, 8002740 <StartIRTask+0x210>)
 80025d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025d6:	f7fe f939 	bl	800084c <__aeabi_ddiv>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fab9 	bl	8000b58 <__aeabi_d2iz>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bfb8      	it	lt
 80025ec:	425b      	neglt	r3, r3
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 80025fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	873b      	strh	r3, [r7, #56]	@ 0x38
 8002606:	2300      	movs	r3, #0
 8002608:	64bb      	str	r3, [r7, #72]	@ 0x48
		__ADC_Read_Dist(&hadc1, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 800260a:	4852      	ldr	r0, [pc, #328]	@ (8002754 <StartIRTask+0x224>)
 800260c:	f004 ff0a 	bl	8007424 <HAL_ADC_Start>
 8002610:	f245 51f0 	movw	r1, #22000	@ 0x55f0
 8002614:	484f      	ldr	r0, [pc, #316]	@ (8002754 <StartIRTask+0x224>)
 8002616:	f005 f80a 	bl	800762e <HAL_ADC_PollForConversion>
 800261a:	484e      	ldr	r0, [pc, #312]	@ (8002754 <StartIRTask+0x224>)
 800261c:	f005 f9a2 	bl	8007964 <HAL_ADC_GetValue>
 8002620:	4602      	mov	r2, r0
 8002622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002624:	4413      	add	r3, r2
 8002626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002628:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800262a:	3301      	adds	r3, #1
 800262c:	4a48      	ldr	r2, [pc, #288]	@ (8002750 <StartIRTask+0x220>)
 800262e:	fb82 1203 	smull	r1, r2, r2, r3
 8002632:	1151      	asrs	r1, r2, #5
 8002634:	17da      	asrs	r2, r3, #31
 8002636:	1a8a      	subs	r2, r1, r2
 8002638:	2164      	movs	r1, #100	@ 0x64
 800263a:	fb01 f202 	mul.w	r2, r1, r2
 800263e:	1a9a      	subs	r2, r3, r2
 8002640:	4613      	mov	r3, r2
 8002642:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002644:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002646:	2b63      	cmp	r3, #99	@ 0x63
 8002648:	d129      	bne.n	800269e <StartIRTask+0x16e>
 800264a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800264c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800264e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd ff56 	bl	8000504 <__aeabi_ui2d>
 8002658:	a337      	add	r3, pc, #220	@ (adr r3, 8002738 <StartIRTask+0x208>)
 800265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265e:	f7fd fe13 	bl	8000288 <__aeabi_dsub>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	a136      	add	r1, pc, #216	@ (adr r1, 8002740 <StartIRTask+0x210>)
 8002668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800266c:	f7fe f8ee 	bl	800084c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fa6e 	bl	8000b58 <__aeabi_d2iz>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	bfb8      	it	lt
 8002682:	425b      	neglt	r3, r3
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800268c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8002690:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002692:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002694:	fbb2 f3f3 	udiv	r3, r2, r3
 8002698:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800269a:	2300      	movs	r3, #0
 800269c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(irVal, "L:%d R:%d \0", (int) obsDist_IR_L, (int) obsDist_IR_R);
 800269e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80026a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80026a6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80026aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ae:	f107 000c 	add.w	r0, r7, #12
 80026b2:	ee17 3a90 	vmov	r3, s15
 80026b6:	ee17 2a10 	vmov	r2, s14
 80026ba:	4927      	ldr	r1, [pc, #156]	@ (8002758 <StartIRTask+0x228>)
 80026bc:	f00d fbf4 	bl	800fea8 <siprintf>
		OLED_ShowString(0, 40, irVal);
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	461a      	mov	r2, r3
 80026c6:	2128      	movs	r1, #40	@ 0x28
 80026c8:	2000      	movs	r0, #0
 80026ca:	f004 f8a5 	bl	8006818 <OLED_ShowString>

		if (irResumeFlag == 1) {
 80026ce:	4b23      	ldr	r3, [pc, #140]	@ (800275c <StartIRTask+0x22c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d104      	bne.n	80026e0 <StartIRTask+0x1b0>
			vTaskSuspend(IRTaskHandle);
 80026d6:	4b22      	ldr	r3, [pc, #136]	@ (8002760 <StartIRTask+0x230>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f00b fa12 	bl	800db04 <vTaskSuspend>
		}

		if ((aRxBuffer[1] == 'L' && (iDistanceL <= irThreshold - 500)
 80026e0:	4b20      	ldr	r3, [pc, #128]	@ (8002764 <StartIRTask+0x234>)
 80026e2:	785b      	ldrb	r3, [r3, #1]
 80026e4:	2b4c      	cmp	r3, #76	@ 0x4c
 80026e6:	d10b      	bne.n	8002700 <StartIRTask+0x1d0>
 80026e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002768 <StartIRTask+0x238>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	f2a3 13f3 	subw	r3, r3, #499	@ 0x1f3
 80026f0:	4a1e      	ldr	r2, [pc, #120]	@ (800276c <StartIRTask+0x23c>)
 80026f2:	8812      	ldrh	r2, [r2, #0]
 80026f4:	4293      	cmp	r3, r2
 80026f6:	dd03      	ble.n	8002700 <StartIRTask+0x1d0>
				&& irFlag == 1)
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <StartIRTask+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d00f      	beq.n	8002720 <StartIRTask+0x1f0>
				|| (aRxBuffer[1] == 'R' && (iDistanceR <= irThreshold - 500)
 8002700:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <StartIRTask+0x234>)
 8002702:	785b      	ldrb	r3, [r3, #1]
 8002704:	2b52      	cmp	r3, #82	@ 0x52
 8002706:	d110      	bne.n	800272a <StartIRTask+0x1fa>
 8002708:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <StartIRTask+0x238>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	f2a3 13f3 	subw	r3, r3, #499	@ 0x1f3
 8002710:	4a18      	ldr	r2, [pc, #96]	@ (8002774 <StartIRTask+0x244>)
 8002712:	8812      	ldrh	r2, [r2, #0]
 8002714:	4293      	cmp	r3, r2
 8002716:	dd08      	ble.n	800272a <StartIRTask+0x1fa>
						&& irFlag == 1)) {
 8002718:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <StartIRTask+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d104      	bne.n	800272a <StartIRTask+0x1fa>
			irFlag = 0;
 8002720:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <StartIRTask+0x240>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
			motorStop();
 8002726:	f003 fe27 	bl	8006378 <motorStop>
		}

		osDelay(5);
 800272a:	2005      	movs	r0, #5
 800272c:	f00a fa10 	bl	800cb50 <osDelay>
		__ADC_Read_Dist(&hadc2, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 8002730:	e71c      	b.n	800256c <StartIRTask+0x3c>
 8002732:	bf00      	nop
 8002734:	f3af 8000 	nop.w
 8002738:	fb5723d3 	.word	0xfb5723d3
 800273c:	407046c5 	.word	0x407046c5
 8002740:	324c8366 	.word	0x324c8366
 8002744:	40d90b34 	.word	0x40d90b34
 8002748:	447a0000 	.word	0x447a0000
 800274c:	20000384 	.word	0x20000384
 8002750:	51eb851f 	.word	0x51eb851f
 8002754:	2000033c 	.word	0x2000033c
 8002758:	08013128 	.word	0x08013128
 800275c:	20000140 	.word	0x20000140
 8002760:	2000064c 	.word	0x2000064c
 8002764:	20000650 	.word	0x20000650
 8002768:	2000013e 	.word	0x2000013e
 800276c:	20000744 	.word	0x20000744
 8002770:	20000748 	.word	0x20000748
 8002774:	20000746 	.word	0x20000746

08002778 <PIDConfigInit>:
//		osDelay(50);
//	}
//	/* USER CODE END StartIRTask */
//}

void PIDConfigInit(PIDConfig * cfg, const float Kp, const float Ki, const float Kd) {
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	ed87 0a02 	vstr	s0, [r7, #8]
 8002784:	edc7 0a01 	vstr	s1, [r7, #4]
 8002788:	ed87 1a00 	vstr	s2, [r7]
	cfg->Kp = Kp;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	601a      	str	r2, [r3, #0]
	cfg->Ki = Ki;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	605a      	str	r2, [r3, #4]
	cfg->Kd = Kd;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	609a      	str	r2, [r3, #8]
	cfg->ek1 = 0;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <PIDConfigReset>:

void PIDConfigReset(PIDConfig * cfg) {
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
	cfg->ek1 = 0;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;
//PIDConfig curPIDConfig;

void StraightLineMove(const uint8_t speedMode) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af04      	add	r7, sp, #16
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 80027ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027ee:	9302      	str	r3, [sp, #8]
 80027f0:	2302      	movs	r3, #2
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	4ba9      	ldr	r3, [pc, #676]	@ (8002a9c <StraightLineMove+0x2bc>)
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2301      	movs	r3, #1
 80027fa:	2237      	movs	r2, #55	@ 0x37
 80027fc:	21d0      	movs	r1, #208	@ 0xd0
 80027fe:	48a8      	ldr	r0, [pc, #672]	@ (8002aa0 <StraightLineMove+0x2c0>)
 8002800:	f006 f89c 	bl	800893c <HAL_I2C_Mem_Read>
 8002804:	4ba5      	ldr	r3, [pc, #660]	@ (8002a9c <StraightLineMove+0x2bc>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	b21a      	sxth	r2, r3
 800280c:	4ba3      	ldr	r3, [pc, #652]	@ (8002a9c <StraightLineMove+0x2bc>)
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	b21b      	sxth	r3, r3
 8002812:	4313      	orrs	r3, r2
 8002814:	b21a      	sxth	r2, r3
 8002816:	4ba3      	ldr	r3, [pc, #652]	@ (8002aa4 <StraightLineMove+0x2c4>)
 8002818:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 800281a:	4ba3      	ldr	r3, [pc, #652]	@ (8002aa8 <StraightLineMove+0x2c8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b10      	cmp	r3, #16
 8002826:	d101      	bne.n	800282c <StraightLineMove+0x4c>
 8002828:	2201      	movs	r2, #1
 800282a:	e001      	b.n	8002830 <StraightLineMove+0x50>
 800282c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002830:	4b9e      	ldr	r3, [pc, #632]	@ (8002aac <StraightLineMove+0x2cc>)
 8002832:	701a      	strb	r2, [r3, #0]
	angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002834:	4b9b      	ldr	r3, [pc, #620]	@ (8002aa4 <StraightLineMove+0x2c4>)
 8002836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283a:	f113 0f04 	cmn.w	r3, #4
 800283e:	db04      	blt.n	800284a <StraightLineMove+0x6a>
 8002840:	4b98      	ldr	r3, [pc, #608]	@ (8002aa4 <StraightLineMove+0x2c4>)
 8002842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002846:	2b0b      	cmp	r3, #11
 8002848:	dd07      	ble.n	800285a <StraightLineMove+0x7a>
 800284a:	4b96      	ldr	r3, [pc, #600]	@ (8002aa4 <StraightLineMove+0x2c4>)
 800284c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002858:	e001      	b.n	800285e <StraightLineMove+0x7e>
 800285a:	eddf 7a95 	vldr	s15, [pc, #596]	@ 8002ab0 <StraightLineMove+0x2d0>
 800285e:	4b95      	ldr	r3, [pc, #596]	@ (8002ab4 <StraightLineMove+0x2d4>)
 8002860:	ed93 7a00 	vldr	s14, [r3]
 8002864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002868:	4b92      	ldr	r3, [pc, #584]	@ (8002ab4 <StraightLineMove+0x2d4>)
 800286a:	edc3 7a00 	vstr	s15, [r3]

	if (speedMode == SPEED_MODE_T) __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d164      	bne.n	800293e <StraightLineMove+0x15e>
 8002874:	4b90      	ldr	r3, [pc, #576]	@ (8002ab8 <StraightLineMove+0x2d8>)
 8002876:	ed93 7a00 	vldr	s14, [r3]
 800287a:	4b8e      	ldr	r3, [pc, #568]	@ (8002ab4 <StraightLineMove+0x2d4>)
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002884:	4b8c      	ldr	r3, [pc, #560]	@ (8002ab8 <StraightLineMove+0x2d8>)
 8002886:	edd3 6a01 	vldr	s13, [r3, #4]
 800288a:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab8 <StraightLineMove+0x2d8>)
 800288c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002898:	4b87      	ldr	r3, [pc, #540]	@ (8002ab8 <StraightLineMove+0x2d8>)
 800289a:	edd3 6a02 	vldr	s13, [r3, #8]
 800289e:	4b86      	ldr	r3, [pc, #536]	@ (8002ab8 <StraightLineMove+0x2d8>)
 80028a0:	ed93 6a03 	vldr	s12, [r3, #12]
 80028a4:	4b83      	ldr	r3, [pc, #524]	@ (8002ab4 <StraightLineMove+0x2d4>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80028ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ba:	ee17 2a90 	vmov	r2, s15
 80028be:	4b7f      	ldr	r3, [pc, #508]	@ (8002abc <StraightLineMove+0x2dc>)
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab4 <StraightLineMove+0x2d4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ab8 <StraightLineMove+0x2d8>)
 80028c8:	60d3      	str	r3, [r2, #12]
 80028ca:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab8 <StraightLineMove+0x2d8>)
 80028cc:	ed93 7a04 	vldr	s14, [r3, #16]
 80028d0:	4b78      	ldr	r3, [pc, #480]	@ (8002ab4 <StraightLineMove+0x2d4>)
 80028d2:	edd3 7a00 	vldr	s15, [r3]
 80028d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028da:	4b77      	ldr	r3, [pc, #476]	@ (8002ab8 <StraightLineMove+0x2d8>)
 80028dc:	edc3 7a04 	vstr	s15, [r3, #16]
 80028e0:	4b76      	ldr	r3, [pc, #472]	@ (8002abc <StraightLineMove+0x2dc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80028e8:	dc06      	bgt.n	80028f8 <StraightLineMove+0x118>
 80028ea:	4b74      	ldr	r3, [pc, #464]	@ (8002abc <StraightLineMove+0x2dc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a74      	ldr	r2, [pc, #464]	@ (8002ac0 <StraightLineMove+0x2e0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	bfb8      	it	lt
 80028f4:	4613      	movlt	r3, r2
 80028f6:	e001      	b.n	80028fc <StraightLineMove+0x11c>
 80028f8:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80028fc:	4a6f      	ldr	r2, [pc, #444]	@ (8002abc <StraightLineMove+0x2dc>)
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b6a      	ldr	r3, [pc, #424]	@ (8002aac <StraightLineMove+0x2cc>)
 8002902:	f993 3000 	ldrsb.w	r3, [r3]
 8002906:	b29a      	uxth	r2, r3
 8002908:	4b6c      	ldr	r3, [pc, #432]	@ (8002abc <StraightLineMove+0x2dc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	fb12 f303 	smulbb	r3, r2, r3
 8002912:	b29b      	uxth	r3, r3
 8002914:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8002918:	b29a      	uxth	r2, r3
 800291a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac4 <StraightLineMove+0x2e4>)
 800291c:	801a      	strh	r2, [r3, #0]
 800291e:	4b63      	ldr	r3, [pc, #396]	@ (8002aac <StraightLineMove+0x2cc>)
 8002920:	f993 3000 	ldrsb.w	r3, [r3]
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b65      	ldr	r3, [pc, #404]	@ (8002abc <StraightLineMove+0x2dc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	fb12 f303 	smulbb	r3, r2, r3
 8002930:	b29b      	uxth	r3, r3
 8002932:	f5c3 6396 	rsb	r3, r3, #1200	@ 0x4b0
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b63      	ldr	r3, [pc, #396]	@ (8002ac8 <StraightLineMove+0x2e8>)
 800293a:	801a      	strh	r2, [r3, #0]
 800293c:	e0ef      	b.n	8002b1e <StraightLineMove+0x33e>
	else if (speedMode == SPEED_MODE_2) __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d165      	bne.n	8002a10 <StraightLineMove+0x230>
 8002944:	4b61      	ldr	r3, [pc, #388]	@ (8002acc <StraightLineMove+0x2ec>)
 8002946:	ed93 7a00 	vldr	s14, [r3]
 800294a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab4 <StraightLineMove+0x2d4>)
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002954:	4b5d      	ldr	r3, [pc, #372]	@ (8002acc <StraightLineMove+0x2ec>)
 8002956:	edd3 6a01 	vldr	s13, [r3, #4]
 800295a:	4b5c      	ldr	r3, [pc, #368]	@ (8002acc <StraightLineMove+0x2ec>)
 800295c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002968:	4b58      	ldr	r3, [pc, #352]	@ (8002acc <StraightLineMove+0x2ec>)
 800296a:	edd3 6a02 	vldr	s13, [r3, #8]
 800296e:	4b57      	ldr	r3, [pc, #348]	@ (8002acc <StraightLineMove+0x2ec>)
 8002970:	ed93 6a03 	vldr	s12, [r3, #12]
 8002974:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab4 <StraightLineMove+0x2d4>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800297e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800298a:	ee17 2a90 	vmov	r2, s15
 800298e:	4b4b      	ldr	r3, [pc, #300]	@ (8002abc <StraightLineMove+0x2dc>)
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	4b48      	ldr	r3, [pc, #288]	@ (8002ab4 <StraightLineMove+0x2d4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a4d      	ldr	r2, [pc, #308]	@ (8002acc <StraightLineMove+0x2ec>)
 8002998:	60d3      	str	r3, [r2, #12]
 800299a:	4b4c      	ldr	r3, [pc, #304]	@ (8002acc <StraightLineMove+0x2ec>)
 800299c:	ed93 7a04 	vldr	s14, [r3, #16]
 80029a0:	4b44      	ldr	r3, [pc, #272]	@ (8002ab4 <StraightLineMove+0x2d4>)
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029aa:	4b48      	ldr	r3, [pc, #288]	@ (8002acc <StraightLineMove+0x2ec>)
 80029ac:	edc3 7a04 	vstr	s15, [r3, #16]
 80029b0:	4b42      	ldr	r3, [pc, #264]	@ (8002abc <StraightLineMove+0x2dc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 80029b8:	dc06      	bgt.n	80029c8 <StraightLineMove+0x1e8>
 80029ba:	4b40      	ldr	r3, [pc, #256]	@ (8002abc <StraightLineMove+0x2dc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a44      	ldr	r2, [pc, #272]	@ (8002ad0 <StraightLineMove+0x2f0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	bfb8      	it	lt
 80029c4:	4613      	movlt	r3, r2
 80029c6:	e001      	b.n	80029cc <StraightLineMove+0x1ec>
 80029c8:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80029cc:	4a3b      	ldr	r2, [pc, #236]	@ (8002abc <StraightLineMove+0x2dc>)
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b36      	ldr	r3, [pc, #216]	@ (8002aac <StraightLineMove+0x2cc>)
 80029d2:	f993 3000 	ldrsb.w	r3, [r3]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	4b38      	ldr	r3, [pc, #224]	@ (8002abc <StraightLineMove+0x2dc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	fb12 f303 	smulbb	r3, r2, r3
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	4b36      	ldr	r3, [pc, #216]	@ (8002ac4 <StraightLineMove+0x2e4>)
 80029ec:	801a      	strh	r2, [r3, #0]
 80029ee:	4b2f      	ldr	r3, [pc, #188]	@ (8002aac <StraightLineMove+0x2cc>)
 80029f0:	f993 3000 	ldrsb.w	r3, [r3]
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	4b31      	ldr	r3, [pc, #196]	@ (8002abc <StraightLineMove+0x2dc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	fb12 f303 	smulbb	r3, r2, r3
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 8002a06:	3308      	adds	r3, #8
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac8 <StraightLineMove+0x2e8>)
 8002a0c:	801a      	strh	r2, [r3, #0]
 8002a0e:	e086      	b.n	8002b1e <StraightLineMove+0x33e>
	else if (speedMode == SPEED_MODE_1) __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	f040 8083 	bne.w	8002b1e <StraightLineMove+0x33e>
 8002a18:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad4 <StraightLineMove+0x2f4>)
 8002a1a:	ed93 7a00 	vldr	s14, [r3]
 8002a1e:	4b25      	ldr	r3, [pc, #148]	@ (8002ab4 <StraightLineMove+0x2d4>)
 8002a20:	edd3 7a00 	vldr	s15, [r3]
 8002a24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a28:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad4 <StraightLineMove+0x2f4>)
 8002a2a:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a2e:	4b29      	ldr	r3, [pc, #164]	@ (8002ad4 <StraightLineMove+0x2f4>)
 8002a30:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ad4 <StraightLineMove+0x2f4>)
 8002a3e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a42:	4b24      	ldr	r3, [pc, #144]	@ (8002ad4 <StraightLineMove+0x2f4>)
 8002a44:	ed93 6a03 	vldr	s12, [r3, #12]
 8002a48:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <StraightLineMove+0x2d4>)
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a5e:	ee17 2a90 	vmov	r2, s15
 8002a62:	4b16      	ldr	r3, [pc, #88]	@ (8002abc <StraightLineMove+0x2dc>)
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <StraightLineMove+0x2d4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad4 <StraightLineMove+0x2f4>)
 8002a6c:	60d3      	str	r3, [r2, #12]
 8002a6e:	4b19      	ldr	r3, [pc, #100]	@ (8002ad4 <StraightLineMove+0x2f4>)
 8002a70:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a74:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <StraightLineMove+0x2d4>)
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <StraightLineMove+0x2f4>)
 8002a80:	edc3 7a04 	vstr	s15, [r3, #16]
 8002a84:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <StraightLineMove+0x2dc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002a8c:	dc24      	bgt.n	8002ad8 <StraightLineMove+0x2f8>
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <StraightLineMove+0x2dc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad0 <StraightLineMove+0x2f0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	bfb8      	it	lt
 8002a98:	4613      	movlt	r3, r2
 8002a9a:	e01f      	b.n	8002adc <StraightLineMove+0x2fc>
 8002a9c:	200006b0 	.word	0x200006b0
 8002aa0:	200003cc 	.word	0x200003cc
 8002aa4:	200006b2 	.word	0x200006b2
 8002aa8:	20000468 	.word	0x20000468
 8002aac:	20000144 	.word	0x20000144
 8002ab0:	00000000 	.word	0x00000000
 8002ab4:	200006ac 	.word	0x200006ac
 8002ab8:	200006dc 	.word	0x200006dc
 8002abc:	2000075c 	.word	0x2000075c
 8002ac0:	fffffda8 	.word	0xfffffda8
 8002ac4:	200006b4 	.word	0x200006b4
 8002ac8:	200006b6 	.word	0x200006b6
 8002acc:	200006f0 	.word	0x200006f0
 8002ad0:	fffffd44 	.word	0xfffffd44
 8002ad4:	200006c8 	.word	0x200006c8
 8002ad8:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002adc:	4a17      	ldr	r2, [pc, #92]	@ (8002b3c <StraightLineMove+0x35c>)
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b17      	ldr	r3, [pc, #92]	@ (8002b40 <StraightLineMove+0x360>)
 8002ae2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	4b14      	ldr	r3, [pc, #80]	@ (8002b3c <StraightLineMove+0x35c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	fb12 f303 	smulbb	r3, r2, r3
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f603 03fc 	addw	r3, r3, #2300	@ 0x8fc
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <StraightLineMove+0x364>)
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <StraightLineMove+0x360>)
 8002b00:	f993 3000 	ldrsb.w	r3, [r3]
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	4b0d      	ldr	r3, [pc, #52]	@ (8002b3c <StraightLineMove+0x35c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	fb12 f303 	smulbb	r3, r2, r3
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f5c3 630f 	rsb	r3, r3, #2288	@ 0x8f0
 8002b16:	330c      	adds	r3, #12
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <StraightLineMove+0x368>)
 8002b1c:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <StraightLineMove+0x364>)
 8002b20:	881a      	ldrh	r2, [r3, #0]
 8002b22:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <StraightLineMove+0x36c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b28:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <StraightLineMove+0x368>)
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	4b07      	ldr	r3, [pc, #28]	@ (8002b4c <StraightLineMove+0x36c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	2000075c 	.word	0x2000075c
 8002b40:	20000144 	.word	0x20000144
 8002b44:	200006b4 	.word	0x200006b4
 8002b48:	200006b6 	.word	0x200006b6
 8002b4c:	20000588 	.word	0x20000588

08002b50 <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float * speedScale) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af04      	add	r7, sp, #16
 8002b56:	4603      	mov	r3, r0
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 8002b5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b60:	9302      	str	r3, [sp, #8]
 8002b62:	2302      	movs	r3, #2
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	4b9b      	ldr	r3, [pc, #620]	@ (8002dd4 <StraightLineMoveSpeedScale+0x284>)
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	2237      	movs	r2, #55	@ 0x37
 8002b6e:	21d0      	movs	r1, #208	@ 0xd0
 8002b70:	4899      	ldr	r0, [pc, #612]	@ (8002dd8 <StraightLineMoveSpeedScale+0x288>)
 8002b72:	f005 fee3 	bl	800893c <HAL_I2C_Mem_Read>
 8002b76:	4b97      	ldr	r3, [pc, #604]	@ (8002dd4 <StraightLineMoveSpeedScale+0x284>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	4b95      	ldr	r3, [pc, #596]	@ (8002dd4 <StraightLineMoveSpeedScale+0x284>)
 8002b80:	785b      	ldrb	r3, [r3, #1]
 8002b82:	b21b      	sxth	r3, r3
 8002b84:	4313      	orrs	r3, r2
 8002b86:	b21a      	sxth	r2, r3
 8002b88:	4b94      	ldr	r3, [pc, #592]	@ (8002ddc <StraightLineMoveSpeedScale+0x28c>)
 8002b8a:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 8002b8c:	4b94      	ldr	r3, [pc, #592]	@ (8002de0 <StraightLineMoveSpeedScale+0x290>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d101      	bne.n	8002b9e <StraightLineMoveSpeedScale+0x4e>
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	e001      	b.n	8002ba2 <StraightLineMoveSpeedScale+0x52>
 8002b9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ba2:	4b90      	ldr	r3, [pc, #576]	@ (8002de4 <StraightLineMoveSpeedScale+0x294>)
 8002ba4:	701a      	strb	r2, [r3, #0]
	angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8002ddc <StraightLineMoveSpeedScale+0x28c>)
 8002ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bac:	f113 0f04 	cmn.w	r3, #4
 8002bb0:	db04      	blt.n	8002bbc <StraightLineMoveSpeedScale+0x6c>
 8002bb2:	4b8a      	ldr	r3, [pc, #552]	@ (8002ddc <StraightLineMoveSpeedScale+0x28c>)
 8002bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb8:	2b0b      	cmp	r3, #11
 8002bba:	dd07      	ble.n	8002bcc <StraightLineMoveSpeedScale+0x7c>
 8002bbc:	4b87      	ldr	r3, [pc, #540]	@ (8002ddc <StraightLineMoveSpeedScale+0x28c>)
 8002bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bca:	e001      	b.n	8002bd0 <StraightLineMoveSpeedScale+0x80>
 8002bcc:	eddf 7a86 	vldr	s15, [pc, #536]	@ 8002de8 <StraightLineMoveSpeedScale+0x298>
 8002bd0:	4b86      	ldr	r3, [pc, #536]	@ (8002dec <StraightLineMoveSpeedScale+0x29c>)
 8002bd2:	ed93 7a00 	vldr	s14, [r3]
 8002bd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bda:	4b84      	ldr	r3, [pc, #528]	@ (8002dec <StraightLineMoveSpeedScale+0x29c>)
 8002bdc:	edc3 7a00 	vstr	s15, [r3]
	if (speedMode == SPEED_MODE_1) __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d165      	bne.n	8002cb2 <StraightLineMoveSpeedScale+0x162>
 8002be6:	4b82      	ldr	r3, [pc, #520]	@ (8002df0 <StraightLineMoveSpeedScale+0x2a0>)
 8002be8:	ed93 7a00 	vldr	s14, [r3]
 8002bec:	4b7f      	ldr	r3, [pc, #508]	@ (8002dec <StraightLineMoveSpeedScale+0x29c>)
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf6:	4b7e      	ldr	r3, [pc, #504]	@ (8002df0 <StraightLineMoveSpeedScale+0x2a0>)
 8002bf8:	edd3 6a01 	vldr	s13, [r3, #4]
 8002bfc:	4b7c      	ldr	r3, [pc, #496]	@ (8002df0 <StraightLineMoveSpeedScale+0x2a0>)
 8002bfe:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c0a:	4b79      	ldr	r3, [pc, #484]	@ (8002df0 <StraightLineMoveSpeedScale+0x2a0>)
 8002c0c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c10:	4b77      	ldr	r3, [pc, #476]	@ (8002df0 <StraightLineMoveSpeedScale+0x2a0>)
 8002c12:	ed93 6a03 	vldr	s12, [r3, #12]
 8002c16:	4b75      	ldr	r3, [pc, #468]	@ (8002dec <StraightLineMoveSpeedScale+0x29c>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c2c:	ee17 2a90 	vmov	r2, s15
 8002c30:	4b70      	ldr	r3, [pc, #448]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	4b6d      	ldr	r3, [pc, #436]	@ (8002dec <StraightLineMoveSpeedScale+0x29c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6d      	ldr	r2, [pc, #436]	@ (8002df0 <StraightLineMoveSpeedScale+0x2a0>)
 8002c3a:	60d3      	str	r3, [r2, #12]
 8002c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002df0 <StraightLineMoveSpeedScale+0x2a0>)
 8002c3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c42:	4b6a      	ldr	r3, [pc, #424]	@ (8002dec <StraightLineMoveSpeedScale+0x29c>)
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4c:	4b68      	ldr	r3, [pc, #416]	@ (8002df0 <StraightLineMoveSpeedScale+0x2a0>)
 8002c4e:	edc3 7a04 	vstr	s15, [r3, #16]
 8002c52:	4b68      	ldr	r3, [pc, #416]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002c5a:	dc06      	bgt.n	8002c6a <StraightLineMoveSpeedScale+0x11a>
 8002c5c:	4b65      	ldr	r3, [pc, #404]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a65      	ldr	r2, [pc, #404]	@ (8002df8 <StraightLineMoveSpeedScale+0x2a8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	bfb8      	it	lt
 8002c66:	4613      	movlt	r3, r2
 8002c68:	e001      	b.n	8002c6e <StraightLineMoveSpeedScale+0x11e>
 8002c6a:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002c6e:	4a61      	ldr	r2, [pc, #388]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b5c      	ldr	r3, [pc, #368]	@ (8002de4 <StraightLineMoveSpeedScale+0x294>)
 8002c74:	f993 3000 	ldrsb.w	r3, [r3]
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	4b5e      	ldr	r3, [pc, #376]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	fb12 f303 	smulbb	r3, r2, r3
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	f603 03fc 	addw	r3, r3, #2300	@ 0x8fc
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8002dfc <StraightLineMoveSpeedScale+0x2ac>)
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	4b54      	ldr	r3, [pc, #336]	@ (8002de4 <StraightLineMoveSpeedScale+0x294>)
 8002c92:	f993 3000 	ldrsb.w	r3, [r3]
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	4b56      	ldr	r3, [pc, #344]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	fb12 f303 	smulbb	r3, r2, r3
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f5c3 630f 	rsb	r3, r3, #2288	@ 0x8f0
 8002ca8:	330c      	adds	r3, #12
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	4b54      	ldr	r3, [pc, #336]	@ (8002e00 <StraightLineMoveSpeedScale+0x2b0>)
 8002cae:	801a      	strh	r2, [r3, #0]
 8002cb0:	e067      	b.n	8002d82 <StraightLineMoveSpeedScale+0x232>
	else if (speedMode == SPEED_MODE_2) __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d164      	bne.n	8002d82 <StraightLineMoveSpeedScale+0x232>
 8002cb8:	4b52      	ldr	r3, [pc, #328]	@ (8002e04 <StraightLineMoveSpeedScale+0x2b4>)
 8002cba:	ed93 7a00 	vldr	s14, [r3]
 8002cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8002dec <StraightLineMoveSpeedScale+0x29c>)
 8002cc0:	edd3 7a00 	vldr	s15, [r3]
 8002cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc8:	4b4e      	ldr	r3, [pc, #312]	@ (8002e04 <StraightLineMoveSpeedScale+0x2b4>)
 8002cca:	edd3 6a01 	vldr	s13, [r3, #4]
 8002cce:	4b4d      	ldr	r3, [pc, #308]	@ (8002e04 <StraightLineMoveSpeedScale+0x2b4>)
 8002cd0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cdc:	4b49      	ldr	r3, [pc, #292]	@ (8002e04 <StraightLineMoveSpeedScale+0x2b4>)
 8002cde:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ce2:	4b48      	ldr	r3, [pc, #288]	@ (8002e04 <StraightLineMoveSpeedScale+0x2b4>)
 8002ce4:	ed93 6a03 	vldr	s12, [r3, #12]
 8002ce8:	4b40      	ldr	r3, [pc, #256]	@ (8002dec <StraightLineMoveSpeedScale+0x29c>)
 8002cea:	edd3 7a00 	vldr	s15, [r3]
 8002cee:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cfe:	ee17 2a90 	vmov	r2, s15
 8002d02:	4b3c      	ldr	r3, [pc, #240]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	4b39      	ldr	r3, [pc, #228]	@ (8002dec <StraightLineMoveSpeedScale+0x29c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e04 <StraightLineMoveSpeedScale+0x2b4>)
 8002d0c:	60d3      	str	r3, [r2, #12]
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e04 <StraightLineMoveSpeedScale+0x2b4>)
 8002d10:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d14:	4b35      	ldr	r3, [pc, #212]	@ (8002dec <StraightLineMoveSpeedScale+0x29c>)
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1e:	4b39      	ldr	r3, [pc, #228]	@ (8002e04 <StraightLineMoveSpeedScale+0x2b4>)
 8002d20:	edc3 7a04 	vstr	s15, [r3, #16]
 8002d24:	4b33      	ldr	r3, [pc, #204]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002d2c:	dc06      	bgt.n	8002d3c <StraightLineMoveSpeedScale+0x1ec>
 8002d2e:	4b31      	ldr	r3, [pc, #196]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a31      	ldr	r2, [pc, #196]	@ (8002df8 <StraightLineMoveSpeedScale+0x2a8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	bfb8      	it	lt
 8002d38:	4613      	movlt	r3, r2
 8002d3a:	e001      	b.n	8002d40 <StraightLineMoveSpeedScale+0x1f0>
 8002d3c:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002d40:	4a2c      	ldr	r2, [pc, #176]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b27      	ldr	r3, [pc, #156]	@ (8002de4 <StraightLineMoveSpeedScale+0x294>)
 8002d46:	f993 3000 	ldrsb.w	r3, [r3]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	fb12 f303 	smulbb	r3, r2, r3
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	4b27      	ldr	r3, [pc, #156]	@ (8002dfc <StraightLineMoveSpeedScale+0x2ac>)
 8002d60:	801a      	strh	r2, [r3, #0]
 8002d62:	4b20      	ldr	r3, [pc, #128]	@ (8002de4 <StraightLineMoveSpeedScale+0x294>)
 8002d64:	f993 3000 	ldrsb.w	r3, [r3]
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b22      	ldr	r3, [pc, #136]	@ (8002df4 <StraightLineMoveSpeedScale+0x2a4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	fb12 f303 	smulbb	r3, r2, r3
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	4b20      	ldr	r3, [pc, #128]	@ (8002e00 <StraightLineMoveSpeedScale+0x2b0>)
 8002d80:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8002d82:	4b1e      	ldr	r3, [pc, #120]	@ (8002dfc <StraightLineMoveSpeedScale+0x2ac>)
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	ee07 3a90 	vmov	s15, r3
 8002d8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <StraightLineMoveSpeedScale+0x2b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002da0:	ee17 2a90 	vmov	r2, s15
 8002da4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002da6:	4b16      	ldr	r3, [pc, #88]	@ (8002e00 <StraightLineMoveSpeedScale+0x2b0>)
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbc:	4b12      	ldr	r3, [pc, #72]	@ (8002e08 <StraightLineMoveSpeedScale+0x2b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc4:	ee17 2a90 	vmov	r2, s15
 8002dc8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200006b0 	.word	0x200006b0
 8002dd8:	200003cc 	.word	0x200003cc
 8002ddc:	200006b2 	.word	0x200006b2
 8002de0:	20000468 	.word	0x20000468
 8002de4:	20000144 	.word	0x20000144
 8002de8:	00000000 	.word	0x00000000
 8002dec:	200006ac 	.word	0x200006ac
 8002df0:	200006c8 	.word	0x200006c8
 8002df4:	2000075c 	.word	0x2000075c
 8002df8:	fffffd44 	.word	0xfffffd44
 8002dfc:	200006b4 	.word	0x200006b4
 8002e00:	200006b6 	.word	0x200006b6
 8002e04:	200006f0 	.word	0x200006f0
 8002e08:	20000588 	.word	0x20000588
 8002e0c:	00000000 	.word	0x00000000

08002e10 <RobotMoveDist>:

void RobotMoveDist(float * targetDist, const uint8_t dir, const uint8_t speedMode) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	70bb      	strb	r3, [r7, #2]
	angleNow = 0; gyroZ = 0; // reset angle for PID
 8002e20:	4ba1      	ldr	r3, [pc, #644]	@ (80030a8 <RobotMoveDist+0x298>)
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	4ba0      	ldr	r3, [pc, #640]	@ (80030ac <RobotMoveDist+0x29c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8002e2e:	48a0      	ldr	r0, [pc, #640]	@ (80030b0 <RobotMoveDist+0x2a0>)
 8002e30:	f7ff fcc3 	bl	80027ba <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8002e34:	489f      	ldr	r0, [pc, #636]	@ (80030b4 <RobotMoveDist+0x2a4>)
 8002e36:	f7ff fcc0 	bl	80027ba <PIDConfigReset>
	PIDConfigReset(&pidFast);
 8002e3a:	489f      	ldr	r0, [pc, #636]	@ (80030b8 <RobotMoveDist+0x2a8>)
 8002e3c:	f7ff fcbd 	bl	80027ba <PIDConfigReset>
	curDistTick = 0;
 8002e40:	4b9e      	ldr	r3, [pc, #632]	@ (80030bc <RobotMoveDist+0x2ac>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	801a      	strh	r2, [r3, #0]

	__GET_TARGETTICK(*targetDist, targetDistTick);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fb7c 	bl	8000548 <__aeabi_f2d>
 8002e50:	a38f      	add	r3, pc, #572	@ (adr r3, 8003090 <RobotMoveDist+0x280>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd fbcf 	bl	80005f8 <__aeabi_dmul>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	a38d      	add	r3, pc, #564	@ (adr r3, 8003098 <RobotMoveDist+0x288>)
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f7fd fa0e 	bl	8000288 <__aeabi_dsub>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	4b91      	ldr	r3, [pc, #580]	@ (80030c0 <RobotMoveDist+0x2b0>)
 8002e7a:	f7fd fce7 	bl	800084c <__aeabi_ddiv>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	4b8e      	ldr	r3, [pc, #568]	@ (80030c4 <RobotMoveDist+0x2b4>)
 8002e8c:	f7fd fbb4 	bl	80005f8 <__aeabi_dmul>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	4b8a      	ldr	r3, [pc, #552]	@ (80030c8 <RobotMoveDist+0x2b8>)
 8002e9e:	f7fd f9f3 	bl	8000288 <__aeabi_dsub>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f7fd fe7d 	bl	8000ba8 <__aeabi_d2uiz>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	4b86      	ldr	r3, [pc, #536]	@ (80030cc <RobotMoveDist+0x2bc>)
 8002eb4:	801a      	strh	r2, [r3, #0]

	last_curTask_tick = HAL_GetTick();
 8002eb6:	f004 fa41 	bl	800733c <HAL_GetTick>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4a84      	ldr	r2, [pc, #528]	@ (80030d0 <RobotMoveDist+0x2c0>)
 8002ebe:	6013      	str	r3, [r2, #0]
	__SET_MOTOR_DIRECTION(dir);
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2104      	movs	r1, #4
 8002ed0:	4880      	ldr	r0, [pc, #512]	@ (80030d4 <RobotMoveDist+0x2c4>)
 8002ed2:	f005 fadb 	bl	800848c <HAL_GPIO_WritePin>
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2108      	movs	r1, #8
 8002ee6:	487b      	ldr	r0, [pc, #492]	@ (80030d4 <RobotMoveDist+0x2c4>)
 8002ee8:	f005 fad0 	bl	800848c <HAL_GPIO_WritePin>
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	2300      	movne	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2120      	movs	r1, #32
 8002efc:	4875      	ldr	r0, [pc, #468]	@ (80030d4 <RobotMoveDist+0x2c4>)
 8002efe:	f005 fac5 	bl	800848c <HAL_GPIO_WritePin>
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf14      	ite	ne
 8002f08:	2301      	movne	r3, #1
 8002f0a:	2300      	moveq	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2110      	movs	r1, #16
 8002f12:	4870      	ldr	r0, [pc, #448]	@ (80030d4 <RobotMoveDist+0x2c4>)
 8002f14:	f005 faba 	bl	800848c <HAL_GPIO_WritePin>
	__SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8002f18:	4b6f      	ldr	r3, [pc, #444]	@ (80030d8 <RobotMoveDist+0x2c8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b6e      	ldr	r3, [pc, #440]	@ (80030dc <RobotMoveDist+0x2cc>)
 8002f22:	801a      	strh	r2, [r3, #0]
	do {
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002f24:	4b6c      	ldr	r3, [pc, #432]	@ (80030d8 <RobotMoveDist+0x2c8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80030d8 <RobotMoveDist+0x2c8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d117      	bne.n	8002f6a <RobotMoveDist+0x15a>
 8002f3a:	4b68      	ldr	r3, [pc, #416]	@ (80030dc <RobotMoveDist+0x2cc>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d806      	bhi.n	8002f54 <RobotMoveDist+0x144>
 8002f46:	4b65      	ldr	r3, [pc, #404]	@ (80030dc <RobotMoveDist+0x2cc>)
 8002f48:	881a      	ldrh	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	e007      	b.n	8002f64 <RobotMoveDist+0x154>
 8002f54:	4b61      	ldr	r3, [pc, #388]	@ (80030dc <RobotMoveDist+0x2cc>)
 8002f56:	881a      	ldrh	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4a5e      	ldr	r2, [pc, #376]	@ (80030e0 <RobotMoveDist+0x2d0>)
 8002f66:	8013      	strh	r3, [r2, #0]
 8002f68:	e016      	b.n	8002f98 <RobotMoveDist+0x188>
 8002f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80030dc <RobotMoveDist+0x2cc>)
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d306      	bcc.n	8002f84 <RobotMoveDist+0x174>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	4b58      	ldr	r3, [pc, #352]	@ (80030dc <RobotMoveDist+0x2cc>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	e007      	b.n	8002f94 <RobotMoveDist+0x184>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	4b54      	ldr	r3, [pc, #336]	@ (80030dc <RobotMoveDist+0x2cc>)
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4a52      	ldr	r2, [pc, #328]	@ (80030e0 <RobotMoveDist+0x2d0>)
 8002f96:	8013      	strh	r3, [r2, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80030dc <RobotMoveDist+0x2cc>)
 8002f9e:	801a      	strh	r2, [r3, #0]
		curDistTick += dist_dL;
 8002fa0:	4b46      	ldr	r3, [pc, #280]	@ (80030bc <RobotMoveDist+0x2ac>)
 8002fa2:	881a      	ldrh	r2, [r3, #0]
 8002fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80030e0 <RobotMoveDist+0x2d0>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	4413      	add	r3, r2
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	4b43      	ldr	r3, [pc, #268]	@ (80030bc <RobotMoveDist+0x2ac>)
 8002fae:	801a      	strh	r2, [r3, #0]

		if (curDistTick >= targetDistTick) break;
 8002fb0:	4b42      	ldr	r3, [pc, #264]	@ (80030bc <RobotMoveDist+0x2ac>)
 8002fb2:	881a      	ldrh	r2, [r3, #0]
 8002fb4:	4b45      	ldr	r3, [pc, #276]	@ (80030cc <RobotMoveDist+0x2bc>)
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	f080 80a8 	bcs.w	800310e <RobotMoveDist+0x2fe>

		if (HAL_GetTick() - last_curTask_tick >= 10) {
 8002fbe:	f004 f9bd 	bl	800733c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b42      	ldr	r3, [pc, #264]	@ (80030d0 <RobotMoveDist+0x2c0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	d9aa      	bls.n	8002f24 <RobotMoveDist+0x114>
			if (speedMode == SPEED_MODE_T) {
 8002fce:	78bb      	ldrb	r3, [r7, #2]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <RobotMoveDist+0x1cc>
				StraightLineMove(SPEED_MODE_T);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7ff fc03 	bl	80027e0 <StraightLineMove>
 8002fda:	e092      	b.n	8003102 <RobotMoveDist+0x2f2>
			} else {
				speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002fdc:	4b37      	ldr	r3, [pc, #220]	@ (80030bc <RobotMoveDist+0x2ac>)
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b3a      	ldr	r3, [pc, #232]	@ (80030cc <RobotMoveDist+0x2bc>)
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bfb8      	it	lt
 8002fec:	425b      	neglt	r3, r3
 8002fee:	4a3d      	ldr	r2, [pc, #244]	@ (80030e4 <RobotMoveDist+0x2d4>)
 8002ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ff4:	11d2      	asrs	r2, r2, #7
 8002ff6:	17db      	asrs	r3, r3, #31
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003002:	4b39      	ldr	r3, [pc, #228]	@ (80030e8 <RobotMoveDist+0x2d8>)
 8003004:	edc3 7a00 	vstr	s15, [r3]
				if (speedMode == SPEED_MODE_1) speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8003008:	78bb      	ldrb	r3, [r7, #2]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d11e      	bne.n	800304c <RobotMoveDist+0x23c>
 800300e:	4b36      	ldr	r3, [pc, #216]	@ (80030e8 <RobotMoveDist+0x2d8>)
 8003010:	edd3 7a00 	vldr	s15, [r3]
 8003014:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003020:	dd02      	ble.n	8003028 <RobotMoveDist+0x218>
 8003022:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003026:	e00e      	b.n	8003046 <RobotMoveDist+0x236>
 8003028:	4b2f      	ldr	r3, [pc, #188]	@ (80030e8 <RobotMoveDist+0x2d8>)
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8003032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303a:	d502      	bpl.n	8003042 <RobotMoveDist+0x232>
 800303c:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8003040:	e001      	b.n	8003046 <RobotMoveDist+0x236>
 8003042:	4b29      	ldr	r3, [pc, #164]	@ (80030e8 <RobotMoveDist+0x2d8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a28      	ldr	r2, [pc, #160]	@ (80030e8 <RobotMoveDist+0x2d8>)
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e055      	b.n	80030f8 <RobotMoveDist+0x2e8>
				else if (speedMode == SPEED_MODE_2)speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 800304c:	78bb      	ldrb	r3, [r7, #2]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d152      	bne.n	80030f8 <RobotMoveDist+0x2e8>
 8003052:	4b25      	ldr	r3, [pc, #148]	@ (80030e8 <RobotMoveDist+0x2d8>)
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800305c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003064:	dd02      	ble.n	800306c <RobotMoveDist+0x25c>
 8003066:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800306a:	e043      	b.n	80030f4 <RobotMoveDist+0x2e4>
 800306c:	4b1e      	ldr	r3, [pc, #120]	@ (80030e8 <RobotMoveDist+0x2d8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd fa69 	bl	8000548 <__aeabi_f2d>
 8003076:	a30a      	add	r3, pc, #40	@ (adr r3, 80030a0 <RobotMoveDist+0x290>)
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f7fd fd2e 	bl	8000adc <__aeabi_dcmplt>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d034      	beq.n	80030f0 <RobotMoveDist+0x2e0>
 8003086:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <RobotMoveDist+0x2dc>)
 8003088:	e034      	b.n	80030f4 <RobotMoveDist+0x2e4>
 800308a:	bf00      	nop
 800308c:	f3af 8000 	nop.w
 8003090:	fc66b22a 	.word	0xfc66b22a
 8003094:	3ff266ac 	.word	0x3ff266ac
 8003098:	bb2526f8 	.word	0xbb2526f8
 800309c:	3feee3d4 	.word	0x3feee3d4
 80030a0:	9999999a 	.word	0x9999999a
 80030a4:	3fd99999 	.word	0x3fd99999
 80030a8:	200006ac 	.word	0x200006ac
 80030ac:	200006b2 	.word	0x200006b2
 80030b0:	200006dc 	.word	0x200006dc
 80030b4:	200006c8 	.word	0x200006c8
 80030b8:	200006f0 	.word	0x200006f0
 80030bc:	200006c0 	.word	0x200006c0
 80030c0:	40340000 	.word	0x40340000
 80030c4:	4094a000 	.word	0x4094a000
 80030c8:	40240000 	.word	0x40240000
 80030cc:	200006c2 	.word	0x200006c2
 80030d0:	200006b8 	.word	0x200006b8
 80030d4:	40020000 	.word	0x40020000
 80030d8:	20000468 	.word	0x20000468
 80030dc:	200006c6 	.word	0x200006c6
 80030e0:	200006c4 	.word	0x200006c4
 80030e4:	21195767 	.word	0x21195767
 80030e8:	20000138 	.word	0x20000138
 80030ec:	3ecccccd 	.word	0x3ecccccd
 80030f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <RobotMoveDist+0x318>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003128 <RobotMoveDist+0x318>)
 80030f6:	6013      	str	r3, [r2, #0]
				StraightLineMoveSpeedScale(speedMode, &speedScale);
 80030f8:	78bb      	ldrb	r3, [r7, #2]
 80030fa:	490b      	ldr	r1, [pc, #44]	@ (8003128 <RobotMoveDist+0x318>)
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fd27 	bl	8002b50 <StraightLineMoveSpeedScale>
			}

			last_curTask_tick = HAL_GetTick();
 8003102:	f004 f91b 	bl	800733c <HAL_GetTick>
 8003106:	4603      	mov	r3, r0
 8003108:	4a08      	ldr	r2, [pc, #32]	@ (800312c <RobotMoveDist+0x31c>)
 800310a:	6013      	str	r3, [r2, #0]
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 800310c:	e70a      	b.n	8002f24 <RobotMoveDist+0x114>
		if (curDistTick >= targetDistTick) break;
 800310e:	bf00      	nop
		}
	} while (1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8003110:	4b07      	ldr	r3, [pc, #28]	@ (8003130 <RobotMoveDist+0x320>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2200      	movs	r2, #0
 8003116:	635a      	str	r2, [r3, #52]	@ 0x34
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <RobotMoveDist+0x320>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2200      	movs	r2, #0
 800311e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000138 	.word	0x20000138
 800312c:	200006b8 	.word	0x200006b8
 8003130:	20000588 	.word	0x20000588
 8003134:	00000000 	.word	0x00000000

08003138 <RobotMoveDistObstacle>:

// RobotMoveDistObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistObstacle(float * targetDist, const uint8_t speedMode) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
	angleNow = 0; gyroZ = 0;
 8003144:	4baa      	ldr	r3, [pc, #680]	@ (80033f0 <RobotMoveDistObstacle+0x2b8>)
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	4ba9      	ldr	r3, [pc, #676]	@ (80033f4 <RobotMoveDistObstacle+0x2bc>)
 800314e:	2200      	movs	r2, #0
 8003150:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8003152:	48a9      	ldr	r0, [pc, #676]	@ (80033f8 <RobotMoveDistObstacle+0x2c0>)
 8003154:	f7ff fb31 	bl	80027ba <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8003158:	48a8      	ldr	r0, [pc, #672]	@ (80033fc <RobotMoveDistObstacle+0x2c4>)
 800315a:	f7ff fb2e 	bl	80027ba <PIDConfigReset>
	PIDConfigReset(&pidFast);
 800315e:	48a8      	ldr	r0, [pc, #672]	@ (8003400 <RobotMoveDistObstacle+0x2c8>)
 8003160:	f7ff fb2b 	bl	80027ba <PIDConfigReset>
	obsDist_US = 1000;
 8003164:	4ba7      	ldr	r3, [pc, #668]	@ (8003404 <RobotMoveDistObstacle+0x2cc>)
 8003166:	4aa8      	ldr	r2, [pc, #672]	@ (8003408 <RobotMoveDistObstacle+0x2d0>)
 8003168:	601a      	str	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 800316a:	2104      	movs	r1, #4
 800316c:	48a7      	ldr	r0, [pc, #668]	@ (800340c <RobotMoveDistObstacle+0x2d4>)
 800316e:	f006 ffa7 	bl	800a0c0 <HAL_TIM_IC_Start_IT>
	last_curTask_tick = HAL_GetTick();
 8003172:	f004 f8e3 	bl	800733c <HAL_GetTick>
 8003176:	4603      	mov	r3, r0
 8003178:	4aa5      	ldr	r2, [pc, #660]	@ (8003410 <RobotMoveDistObstacle+0x2d8>)
 800317a:	6013      	str	r3, [r2, #0]

	do {
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800317c:	2201      	movs	r2, #1
 800317e:	2110      	movs	r1, #16
 8003180:	48a4      	ldr	r0, [pc, #656]	@ (8003414 <RobotMoveDistObstacle+0x2dc>)
 8003182:	f005 f983 	bl	800848c <HAL_GPIO_WritePin>
	  __delay_us(&htim4, 10); // wait for 10us
 8003186:	4ba1      	ldr	r3, [pc, #644]	@ (800340c <RobotMoveDistObstacle+0x2d4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2200      	movs	r2, #0
 800318c:	625a      	str	r2, [r3, #36]	@ 0x24
 800318e:	4b9f      	ldr	r3, [pc, #636]	@ (800340c <RobotMoveDistObstacle+0x2d4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	2b09      	cmp	r3, #9
 8003196:	d9fa      	bls.n	800318e <RobotMoveDistObstacle+0x56>
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8003198:	2200      	movs	r2, #0
 800319a:	2110      	movs	r1, #16
 800319c:	489d      	ldr	r0, [pc, #628]	@ (8003414 <RobotMoveDistObstacle+0x2dc>)
 800319e:	f005 f975 	bl	800848c <HAL_GPIO_WritePin>
	  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 80031a2:	4b9a      	ldr	r3, [pc, #616]	@ (800340c <RobotMoveDistObstacle+0x2d4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	4b98      	ldr	r3, [pc, #608]	@ (800340c <RobotMoveDistObstacle+0x2d4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0204 	orr.w	r2, r2, #4
 80031b0:	60da      	str	r2, [r3, #12]
	  osDelay(10); // give timer interrupt chance to update obsDist_US value
 80031b2:	200a      	movs	r0, #10
 80031b4:	f009 fccc 	bl	800cb50 <osDelay>
	  if (abs(*targetDist - obsDist_US) < 0.1) break;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	ed93 7a00 	vldr	s14, [r3]
 80031be:	4b91      	ldr	r3, [pc, #580]	@ (8003404 <RobotMoveDistObstacle+0x2cc>)
 80031c0:	edd3 7a00 	vldr	s15, [r3]
 80031c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031cc:	ee17 3a90 	vmov	r3, s15
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	db0e      	blt.n	80031f2 <RobotMoveDistObstacle+0xba>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	ed93 7a00 	vldr	s14, [r3]
 80031da:	4b8a      	ldr	r3, [pc, #552]	@ (8003404 <RobotMoveDistObstacle+0x2cc>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e8:	ee17 3a90 	vmov	r3, s15
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f340 80e7 	ble.w	80033c0 <RobotMoveDistObstacle+0x288>
	  __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	ed93 7a00 	vldr	s14, [r3]
 80031f8:	4b82      	ldr	r3, [pc, #520]	@ (8003404 <RobotMoveDistObstacle+0x2cc>)
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	bf94      	ite	ls
 8003208:	2301      	movls	r3, #1
 800320a:	2300      	movhi	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	f083 0301 	eor.w	r3, r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	2104      	movs	r1, #4
 800321a:	487f      	ldr	r0, [pc, #508]	@ (8003418 <RobotMoveDistObstacle+0x2e0>)
 800321c:	f005 f936 	bl	800848c <HAL_GPIO_WritePin>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	ed93 7a00 	vldr	s14, [r3]
 8003226:	4b77      	ldr	r3, [pc, #476]	@ (8003404 <RobotMoveDistObstacle+0x2cc>)
 8003228:	edd3 7a00 	vldr	s15, [r3]
 800322c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	bf94      	ite	ls
 8003236:	2301      	movls	r3, #1
 8003238:	2300      	movhi	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	2108      	movs	r1, #8
 8003240:	4875      	ldr	r0, [pc, #468]	@ (8003418 <RobotMoveDistObstacle+0x2e0>)
 8003242:	f005 f923 	bl	800848c <HAL_GPIO_WritePin>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	ed93 7a00 	vldr	s14, [r3]
 800324c:	4b6d      	ldr	r3, [pc, #436]	@ (8003404 <RobotMoveDistObstacle+0x2cc>)
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325a:	bf94      	ite	ls
 800325c:	2301      	movls	r3, #1
 800325e:	2300      	movhi	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f083 0301 	eor.w	r3, r3, #1
 8003266:	b2db      	uxtb	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	2120      	movs	r1, #32
 800326e:	486a      	ldr	r0, [pc, #424]	@ (8003418 <RobotMoveDistObstacle+0x2e0>)
 8003270:	f005 f90c 	bl	800848c <HAL_GPIO_WritePin>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	ed93 7a00 	vldr	s14, [r3]
 800327a:	4b62      	ldr	r3, [pc, #392]	@ (8003404 <RobotMoveDistObstacle+0x2cc>)
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003288:	bf94      	ite	ls
 800328a:	2301      	movls	r3, #1
 800328c:	2300      	movhi	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	2110      	movs	r1, #16
 8003294:	4860      	ldr	r0, [pc, #384]	@ (8003418 <RobotMoveDistObstacle+0x2e0>)
 8003296:	f005 f8f9 	bl	800848c <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=20) {
 800329a:	f004 f84f 	bl	800733c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003410 <RobotMoveDistObstacle+0x2d8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b13      	cmp	r3, #19
 80032a8:	f67f af68 	bls.w	800317c <RobotMoveDistObstacle+0x44>
//		  speedScale = 1;
		  if (speedMode == SPEED_MODE_1) {
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d13f      	bne.n	8003332 <RobotMoveDistObstacle+0x1fa>
			  speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 80032b2:	4b54      	ldr	r3, [pc, #336]	@ (8003404 <RobotMoveDistObstacle+0x2cc>)
 80032b4:	ed93 7a00 	vldr	s14, [r3]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032c6:	ee17 3a90 	vmov	r3, s15
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	bfb8      	it	lt
 80032ce:	425b      	neglt	r3, r3
 80032d0:	4a52      	ldr	r2, [pc, #328]	@ (800341c <RobotMoveDistObstacle+0x2e4>)
 80032d2:	fb82 1203 	smull	r1, r2, r2, r3
 80032d6:	441a      	add	r2, r3
 80032d8:	10d2      	asrs	r2, r2, #3
 80032da:	17db      	asrs	r3, r3, #31
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 80032e8:	edc3 7a00 	vstr	s15, [r3]
			  speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 80032ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	dd02      	ble.n	8003306 <RobotMoveDistObstacle+0x1ce>
 8003300:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003304:	e00e      	b.n	8003324 <RobotMoveDistObstacle+0x1ec>
 8003306:	4b46      	ldr	r3, [pc, #280]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 8003308:	edd3 7a00 	vldr	s15, [r3]
 800330c:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8003310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	d502      	bpl.n	8003320 <RobotMoveDistObstacle+0x1e8>
 800331a:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 800331e:	e001      	b.n	8003324 <RobotMoveDistObstacle+0x1ec>
 8003320:	4b3f      	ldr	r3, [pc, #252]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a3e      	ldr	r2, [pc, #248]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 8003326:	6013      	str	r3, [r2, #0]
			  StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 8003328:	493d      	ldr	r1, [pc, #244]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 800332a:	2001      	movs	r0, #1
 800332c:	f7ff fc10 	bl	8002b50 <StraightLineMoveSpeedScale>
 8003330:	e040      	b.n	80033b4 <RobotMoveDistObstacle+0x27c>
		  } else {
			  speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8003332:	4b34      	ldr	r3, [pc, #208]	@ (8003404 <RobotMoveDistObstacle+0x2cc>)
 8003334:	ed93 7a00 	vldr	s14, [r3]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003346:	ee17 3a90 	vmov	r3, s15
 800334a:	2b00      	cmp	r3, #0
 800334c:	bfb8      	it	lt
 800334e:	425b      	neglt	r3, r3
 8003350:	4a32      	ldr	r2, [pc, #200]	@ (800341c <RobotMoveDistObstacle+0x2e4>)
 8003352:	fb82 1203 	smull	r1, r2, r2, r3
 8003356:	441a      	add	r2, r3
 8003358:	10d2      	asrs	r2, r2, #3
 800335a:	17db      	asrs	r3, r3, #31
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003366:	4b2e      	ldr	r3, [pc, #184]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 8003368:	edc3 7a00 	vstr	s15, [r3]
			  speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 800336c:	4b2c      	ldr	r3, [pc, #176]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 800336e:	edd3 7a00 	vldr	s15, [r3]
 8003372:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337e:	dd02      	ble.n	8003386 <RobotMoveDistObstacle+0x24e>
 8003380:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003384:	e010      	b.n	80033a8 <RobotMoveDistObstacle+0x270>
 8003386:	4b26      	ldr	r3, [pc, #152]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd f8dc 	bl	8000548 <__aeabi_f2d>
 8003390:	a315      	add	r3, pc, #84	@ (adr r3, 80033e8 <RobotMoveDistObstacle+0x2b0>)
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f7fd fba1 	bl	8000adc <__aeabi_dcmplt>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <RobotMoveDistObstacle+0x26c>
 80033a0:	4b20      	ldr	r3, [pc, #128]	@ (8003424 <RobotMoveDistObstacle+0x2ec>)
 80033a2:	e001      	b.n	80033a8 <RobotMoveDistObstacle+0x270>
 80033a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 80033aa:	6013      	str	r3, [r2, #0]
			  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 80033ac:	491c      	ldr	r1, [pc, #112]	@ (8003420 <RobotMoveDistObstacle+0x2e8>)
 80033ae:	2002      	movs	r0, #2
 80033b0:	f7ff fbce 	bl	8002b50 <StraightLineMoveSpeedScale>
		  }


		  last_curTask_tick = HAL_GetTick();
 80033b4:	f003 ffc2 	bl	800733c <HAL_GetTick>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4a15      	ldr	r2, [pc, #84]	@ (8003410 <RobotMoveDistObstacle+0x2d8>)
 80033bc:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80033be:	e6dd      	b.n	800317c <RobotMoveDistObstacle+0x44>
	  if (abs(*targetDist - obsDist_US) < 0.1) break;
 80033c0:	bf00      	nop
	  }

	} while (1);

	__SET_MOTOR_DUTY(&htim8, 0, 0);
 80033c2:	4b19      	ldr	r3, [pc, #100]	@ (8003428 <RobotMoveDistObstacle+0x2f0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033ca:	4b17      	ldr	r3, [pc, #92]	@ (8003428 <RobotMoveDistObstacle+0x2f0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_2);
 80033d2:	2104      	movs	r1, #4
 80033d4:	480d      	ldr	r0, [pc, #52]	@ (800340c <RobotMoveDistObstacle+0x2d4>)
 80033d6:	f006 ff9b 	bl	800a310 <HAL_TIM_IC_Stop_IT>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	f3af 8000 	nop.w
 80033e8:	9999999a 	.word	0x9999999a
 80033ec:	3fd99999 	.word	0x3fd99999
 80033f0:	200006ac 	.word	0x200006ac
 80033f4:	200006b2 	.word	0x200006b2
 80033f8:	200006dc 	.word	0x200006dc
 80033fc:	200006c8 	.word	0x200006c8
 8003400:	200006f0 	.word	0x200006f0
 8003404:	2000070c 	.word	0x2000070c
 8003408:	447a0000 	.word	0x447a0000
 800340c:	200004f8 	.word	0x200004f8
 8003410:	200006b8 	.word	0x200006b8
 8003414:	40020400 	.word	0x40020400
 8003418:	40020000 	.word	0x40020000
 800341c:	88888889 	.word	0x88888889
 8003420:	20000138 	.word	0x20000138
 8003424:	3ecccccd 	.word	0x3ecccccd
 8003428:	20000588 	.word	0x20000588
 800342c:	00000000 	.word	0x00000000

08003430 <RobotMoveDistObstacle_IR>:

void RobotMoveDistObstacle_IR(float * targetDist) {
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
 8003438:	4ba5      	ldr	r3, [pc, #660]	@ (80036d0 <RobotMoveDistObstacle_IR+0x2a0>)
 800343a:	2200      	movs	r2, #0
 800343c:	801a      	strh	r2, [r3, #0]
 800343e:	4ba5      	ldr	r3, [pc, #660]	@ (80036d4 <RobotMoveDistObstacle_IR+0x2a4>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	4ba4      	ldr	r3, [pc, #656]	@ (80036d8 <RobotMoveDistObstacle_IR+0x2a8>)
 8003446:	4aa5      	ldr	r2, [pc, #660]	@ (80036dc <RobotMoveDistObstacle_IR+0x2ac>)
 8003448:	601a      	str	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 800344a:	f003 ff77 	bl	800733c <HAL_GetTick>
 800344e:	4603      	mov	r3, r0
 8003450:	4aa3      	ldr	r2, [pc, #652]	@ (80036e0 <RobotMoveDistObstacle_IR+0x2b0>)
 8003452:	6013      	str	r3, [r2, #0]
//	__PEND_CURCMD(curCmd);

	do {
		__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003454:	48a3      	ldr	r0, [pc, #652]	@ (80036e4 <RobotMoveDistObstacle_IR+0x2b4>)
 8003456:	f003 ffe5 	bl	8007424 <HAL_ADC_Start>
 800345a:	f245 51f0 	movw	r1, #22000	@ 0x55f0
 800345e:	48a1      	ldr	r0, [pc, #644]	@ (80036e4 <RobotMoveDistObstacle_IR+0x2b4>)
 8003460:	f004 f8e5 	bl	800762e <HAL_ADC_PollForConversion>
 8003464:	489f      	ldr	r0, [pc, #636]	@ (80036e4 <RobotMoveDistObstacle_IR+0x2b4>)
 8003466:	f004 fa7d 	bl	8007964 <HAL_ADC_GetValue>
 800346a:	4602      	mov	r2, r0
 800346c:	4b99      	ldr	r3, [pc, #612]	@ (80036d4 <RobotMoveDistObstacle_IR+0x2a4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4413      	add	r3, r2
 8003472:	4a98      	ldr	r2, [pc, #608]	@ (80036d4 <RobotMoveDistObstacle_IR+0x2a4>)
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b96      	ldr	r3, [pc, #600]	@ (80036d0 <RobotMoveDistObstacle_IR+0x2a0>)
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	4a9a      	ldr	r2, [pc, #616]	@ (80036e8 <RobotMoveDistObstacle_IR+0x2b8>)
 800347e:	fb82 1203 	smull	r1, r2, r2, r3
 8003482:	1151      	asrs	r1, r2, #5
 8003484:	17da      	asrs	r2, r3, #31
 8003486:	1a8a      	subs	r2, r1, r2
 8003488:	2164      	movs	r1, #100	@ 0x64
 800348a:	fb01 f202 	mul.w	r2, r1, r2
 800348e:	1a9a      	subs	r2, r3, r2
 8003490:	b292      	uxth	r2, r2
 8003492:	4b8f      	ldr	r3, [pc, #572]	@ (80036d0 <RobotMoveDistObstacle_IR+0x2a0>)
 8003494:	801a      	strh	r2, [r3, #0]
 8003496:	4b8e      	ldr	r3, [pc, #568]	@ (80036d0 <RobotMoveDistObstacle_IR+0x2a0>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	2b63      	cmp	r3, #99	@ 0x63
 800349c:	d131      	bne.n	8003502 <RobotMoveDistObstacle_IR+0xd2>
 800349e:	4b8d      	ldr	r3, [pc, #564]	@ (80036d4 <RobotMoveDistObstacle_IR+0x2a4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a8b      	ldr	r2, [pc, #556]	@ (80036d0 <RobotMoveDistObstacle_IR+0x2a0>)
 80034a4:	8812      	ldrh	r2, [r2, #0]
 80034a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd f82a 	bl	8000504 <__aeabi_ui2d>
 80034b0:	a381      	add	r3, pc, #516	@ (adr r3, 80036b8 <RobotMoveDistObstacle_IR+0x288>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f7fc fee7 	bl	8000288 <__aeabi_dsub>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	a180      	add	r1, pc, #512	@ (adr r1, 80036c0 <RobotMoveDistObstacle_IR+0x290>)
 80034c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034c4:	f7fd f9c2 	bl	800084c <__aeabi_ddiv>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7fd fb42 	bl	8000b58 <__aeabi_d2iz>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bfb8      	it	lt
 80034da:	425b      	neglt	r3, r3
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034e4:	4b7c      	ldr	r3, [pc, #496]	@ (80036d8 <RobotMoveDistObstacle_IR+0x2a8>)
 80034e6:	edc3 7a00 	vstr	s15, [r3]
 80034ea:	4b7a      	ldr	r3, [pc, #488]	@ (80036d4 <RobotMoveDistObstacle_IR+0x2a4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a78      	ldr	r2, [pc, #480]	@ (80036d0 <RobotMoveDistObstacle_IR+0x2a0>)
 80034f0:	8812      	ldrh	r2, [r2, #0]
 80034f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	4b7c      	ldr	r3, [pc, #496]	@ (80036ec <RobotMoveDistObstacle_IR+0x2bc>)
 80034fa:	801a      	strh	r2, [r3, #0]
 80034fc:	4b75      	ldr	r3, [pc, #468]	@ (80036d4 <RobotMoveDistObstacle_IR+0x2a4>)
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
		if (*targetDist > 0 && abs(*targetDist - obsDist_IR) < 0.1) break;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	edd3 7a00 	vldr	s15, [r3]
 8003508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003510:	dd1c      	ble.n	800354c <RobotMoveDistObstacle_IR+0x11c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	ed93 7a00 	vldr	s14, [r3]
 8003518:	4b6f      	ldr	r3, [pc, #444]	@ (80036d8 <RobotMoveDistObstacle_IR+0x2a8>)
 800351a:	edd3 7a00 	vldr	s15, [r3]
 800351e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003526:	ee17 3a90 	vmov	r3, s15
 800352a:	2b00      	cmp	r3, #0
 800352c:	db0e      	blt.n	800354c <RobotMoveDistObstacle_IR+0x11c>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	ed93 7a00 	vldr	s14, [r3]
 8003534:	4b68      	ldr	r3, [pc, #416]	@ (80036d8 <RobotMoveDistObstacle_IR+0x2a8>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800353e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003542:	ee17 3a90 	vmov	r3, s15
 8003546:	2b00      	cmp	r3, #0
 8003548:	f340 80a4 	ble.w	8003694 <RobotMoveDistObstacle_IR+0x264>

		__SET_MOTOR_DIRECTION(obsDist_IR >= *targetDist);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	ed93 7a00 	vldr	s14, [r3]
 8003552:	4b61      	ldr	r3, [pc, #388]	@ (80036d8 <RobotMoveDistObstacle_IR+0x2a8>)
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003560:	bf94      	ite	ls
 8003562:	2301      	movls	r3, #1
 8003564:	2300      	movhi	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f083 0301 	eor.w	r3, r3, #1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	2104      	movs	r1, #4
 8003574:	485e      	ldr	r0, [pc, #376]	@ (80036f0 <RobotMoveDistObstacle_IR+0x2c0>)
 8003576:	f004 ff89 	bl	800848c <HAL_GPIO_WritePin>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	ed93 7a00 	vldr	s14, [r3]
 8003580:	4b55      	ldr	r3, [pc, #340]	@ (80036d8 <RobotMoveDistObstacle_IR+0x2a8>)
 8003582:	edd3 7a00 	vldr	s15, [r3]
 8003586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358e:	bf94      	ite	ls
 8003590:	2301      	movls	r3, #1
 8003592:	2300      	movhi	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	2108      	movs	r1, #8
 800359a:	4855      	ldr	r0, [pc, #340]	@ (80036f0 <RobotMoveDistObstacle_IR+0x2c0>)
 800359c:	f004 ff76 	bl	800848c <HAL_GPIO_WritePin>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	ed93 7a00 	vldr	s14, [r3]
 80035a6:	4b4c      	ldr	r3, [pc, #304]	@ (80036d8 <RobotMoveDistObstacle_IR+0x2a8>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b4:	bf94      	ite	ls
 80035b6:	2301      	movls	r3, #1
 80035b8:	2300      	movhi	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f083 0301 	eor.w	r3, r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	2120      	movs	r1, #32
 80035c8:	4849      	ldr	r0, [pc, #292]	@ (80036f0 <RobotMoveDistObstacle_IR+0x2c0>)
 80035ca:	f004 ff5f 	bl	800848c <HAL_GPIO_WritePin>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	ed93 7a00 	vldr	s14, [r3]
 80035d4:	4b40      	ldr	r3, [pc, #256]	@ (80036d8 <RobotMoveDistObstacle_IR+0x2a8>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e2:	bf94      	ite	ls
 80035e4:	2301      	movls	r3, #1
 80035e6:	2300      	movhi	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	2110      	movs	r1, #16
 80035ee:	4840      	ldr	r0, [pc, #256]	@ (80036f0 <RobotMoveDistObstacle_IR+0x2c0>)
 80035f0:	f004 ff4c 	bl	800848c <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=10) {
 80035f4:	f003 fea2 	bl	800733c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b39      	ldr	r3, [pc, #228]	@ (80036e0 <RobotMoveDistObstacle_IR+0x2b0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b09      	cmp	r3, #9
 8003602:	f67f af27 	bls.w	8003454 <RobotMoveDistObstacle_IR+0x24>
//		  speedScale = 1;
		  speedScale = abs(obsDist_IR - *targetDist) / 15; // slow down at 15cm
 8003606:	4b34      	ldr	r3, [pc, #208]	@ (80036d8 <RobotMoveDistObstacle_IR+0x2a8>)
 8003608:	ed93 7a00 	vldr	s14, [r3]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	edd3 7a00 	vldr	s15, [r3]
 8003612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800361a:	ee17 3a90 	vmov	r3, s15
 800361e:	2b00      	cmp	r3, #0
 8003620:	bfb8      	it	lt
 8003622:	425b      	neglt	r3, r3
 8003624:	4a33      	ldr	r2, [pc, #204]	@ (80036f4 <RobotMoveDistObstacle_IR+0x2c4>)
 8003626:	fb82 1203 	smull	r1, r2, r2, r3
 800362a:	441a      	add	r2, r3
 800362c:	10d2      	asrs	r2, r2, #3
 800362e:	17db      	asrs	r3, r3, #31
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800363a:	4b2f      	ldr	r3, [pc, #188]	@ (80036f8 <RobotMoveDistObstacle_IR+0x2c8>)
 800363c:	edc3 7a00 	vstr	s15, [r3]
		  speedScale = speedScale > 1 ? 1 : (speedScale < 0.3 ? 0.3 : speedScale);
 8003640:	4b2d      	ldr	r3, [pc, #180]	@ (80036f8 <RobotMoveDistObstacle_IR+0x2c8>)
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800364a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003652:	dd02      	ble.n	800365a <RobotMoveDistObstacle_IR+0x22a>
 8003654:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003658:	e010      	b.n	800367c <RobotMoveDistObstacle_IR+0x24c>
 800365a:	4b27      	ldr	r3, [pc, #156]	@ (80036f8 <RobotMoveDistObstacle_IR+0x2c8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fc ff72 	bl	8000548 <__aeabi_f2d>
 8003664:	a318      	add	r3, pc, #96	@ (adr r3, 80036c8 <RobotMoveDistObstacle_IR+0x298>)
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f7fd fa37 	bl	8000adc <__aeabi_dcmplt>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <RobotMoveDistObstacle_IR+0x248>
 8003674:	4b21      	ldr	r3, [pc, #132]	@ (80036fc <RobotMoveDistObstacle_IR+0x2cc>)
 8003676:	e001      	b.n	800367c <RobotMoveDistObstacle_IR+0x24c>
 8003678:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <RobotMoveDistObstacle_IR+0x2c8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1e      	ldr	r2, [pc, #120]	@ (80036f8 <RobotMoveDistObstacle_IR+0x2c8>)
 800367e:	6013      	str	r3, [r2, #0]
		  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 8003680:	491d      	ldr	r1, [pc, #116]	@ (80036f8 <RobotMoveDistObstacle_IR+0x2c8>)
 8003682:	2002      	movs	r0, #2
 8003684:	f7ff fa64 	bl	8002b50 <StraightLineMoveSpeedScale>

		  last_curTask_tick = HAL_GetTick();
 8003688:	f003 fe58 	bl	800733c <HAL_GetTick>
 800368c:	4603      	mov	r3, r0
 800368e:	4a14      	ldr	r2, [pc, #80]	@ (80036e0 <RobotMoveDistObstacle_IR+0x2b0>)
 8003690:	6013      	str	r3, [r2, #0]
		__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003692:	e6df      	b.n	8003454 <RobotMoveDistObstacle_IR+0x24>
		if (*targetDist > 0 && abs(*targetDist - obsDist_IR) < 0.1) break;
 8003694:	bf00      	nop
	  }
//	  osDelay(5);
	} while (1);

//  __ON_TASK_END(&htim8, prevTask, curTask);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8003696:	4b1a      	ldr	r3, [pc, #104]	@ (8003700 <RobotMoveDistObstacle_IR+0x2d0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2200      	movs	r2, #0
 800369c:	635a      	str	r2, [r3, #52]	@ 0x34
 800369e:	4b18      	ldr	r3, [pc, #96]	@ (8003700 <RobotMoveDistObstacle_IR+0x2d0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_ADC_Stop(&hadc1);
 80036a6:	480f      	ldr	r0, [pc, #60]	@ (80036e4 <RobotMoveDistObstacle_IR+0x2b4>)
 80036a8:	f003 ff8e 	bl	80075c8 <HAL_ADC_Stop>
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	f3af 8000 	nop.w
 80036b8:	fb5723d3 	.word	0xfb5723d3
 80036bc:	407046c5 	.word	0x407046c5
 80036c0:	324c8366 	.word	0x324c8366
 80036c4:	40d90b34 	.word	0x40d90b34
 80036c8:	33333333 	.word	0x33333333
 80036cc:	3fd33333 	.word	0x3fd33333
 80036d0:	20000710 	.word	0x20000710
 80036d4:	20000714 	.word	0x20000714
 80036d8:	20000708 	.word	0x20000708
 80036dc:	447a0000 	.word	0x447a0000
 80036e0:	200006b8 	.word	0x200006b8
 80036e4:	2000033c 	.word	0x2000033c
 80036e8:	51eb851f 	.word	0x51eb851f
 80036ec:	20000704 	.word	0x20000704
 80036f0:	40020000 	.word	0x40020000
 80036f4:	88888889 	.word	0x88888889
 80036f8:	20000138 	.word	0x20000138
 80036fc:	3e99999a 	.word	0x3e99999a
 8003700:	20000588 	.word	0x20000588
 8003704:	00000000 	.word	0x00000000

08003708 <RobotTurn>:

void RobotTurn(float * targetAngle) {
 8003708:	b5b0      	push	{r4, r5, r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af04      	add	r7, sp, #16
 800370e:	6078      	str	r0, [r7, #4]
	angleNow = 0; gyroZ = 0;
 8003710:	4b4b      	ldr	r3, [pc, #300]	@ (8003840 <RobotTurn+0x138>)
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	4b4a      	ldr	r3, [pc, #296]	@ (8003844 <RobotTurn+0x13c>)
 800371a:	2200      	movs	r2, #0
 800371c:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 800371e:	f003 fe0d 	bl	800733c <HAL_GetTick>
 8003722:	4603      	mov	r3, r0
 8003724:	4a48      	ldr	r2, [pc, #288]	@ (8003848 <RobotTurn+0x140>)
 8003726:	6013      	str	r3, [r2, #0]
	do {
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8003728:	f003 fe08 	bl	800733c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	4b46      	ldr	r3, [pc, #280]	@ (8003848 <RobotTurn+0x140>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b09      	cmp	r3, #9
 8003736:	d9f7      	bls.n	8003728 <RobotTurn+0x20>
		  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8003738:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800373c:	9302      	str	r3, [sp, #8]
 800373e:	2302      	movs	r3, #2
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	4b42      	ldr	r3, [pc, #264]	@ (800384c <RobotTurn+0x144>)
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2301      	movs	r3, #1
 8003748:	2237      	movs	r2, #55	@ 0x37
 800374a:	21d0      	movs	r1, #208	@ 0xd0
 800374c:	4840      	ldr	r0, [pc, #256]	@ (8003850 <RobotTurn+0x148>)
 800374e:	f005 f8f5 	bl	800893c <HAL_I2C_Mem_Read>
 8003752:	4b3e      	ldr	r3, [pc, #248]	@ (800384c <RobotTurn+0x144>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	b21a      	sxth	r2, r3
 800375a:	4b3c      	ldr	r3, [pc, #240]	@ (800384c <RobotTurn+0x144>)
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	b21b      	sxth	r3, r3
 8003760:	4313      	orrs	r3, r2
 8003762:	b21a      	sxth	r2, r3
 8003764:	4b37      	ldr	r3, [pc, #220]	@ (8003844 <RobotTurn+0x13c>)
 8003766:	801a      	strh	r2, [r3, #0]
		  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8003768:	4b35      	ldr	r3, [pc, #212]	@ (8003840 <RobotTurn+0x138>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc feeb 	bl	8000548 <__aeabi_f2d>
 8003772:	4604      	mov	r4, r0
 8003774:	460d      	mov	r5, r1
 8003776:	4b33      	ldr	r3, [pc, #204]	@ (8003844 <RobotTurn+0x13c>)
 8003778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fc fed1 	bl	8000524 <__aeabi_i2d>
 8003782:	a32b      	add	r3, pc, #172	@ (adr r3, 8003830 <RobotTurn+0x128>)
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f7fd f860 	bl	800084c <__aeabi_ddiv>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	a328      	add	r3, pc, #160	@ (adr r3, 8003838 <RobotTurn+0x130>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	f7fc ff2d 	bl	80005f8 <__aeabi_dmul>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4620      	mov	r0, r4
 80037a4:	4629      	mov	r1, r5
 80037a6:	f7fc fd71 	bl	800028c <__adddf3>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	f7fd fa19 	bl	8000be8 <__aeabi_d2f>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4a21      	ldr	r2, [pc, #132]	@ (8003840 <RobotTurn+0x138>)
 80037ba:	6013      	str	r3, [r2, #0]
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 80037bc:	4b20      	ldr	r3, [pc, #128]	@ (8003840 <RobotTurn+0x138>)
 80037be:	ed93 7a00 	vldr	s14, [r3]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037d0:	ee17 3a90 	vmov	r3, s15
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	db0d      	blt.n	80037f4 <RobotTurn+0xec>
 80037d8:	4b19      	ldr	r3, [pc, #100]	@ (8003840 <RobotTurn+0x138>)
 80037da:	ed93 7a00 	vldr	s14, [r3]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ec:	ee17 3a90 	vmov	r3, s15
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	dd05      	ble.n	8003800 <RobotTurn+0xf8>
		  last_curTask_tick = HAL_GetTick();
 80037f4:	f003 fda2 	bl	800733c <HAL_GetTick>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4a13      	ldr	r2, [pc, #76]	@ (8003848 <RobotTurn+0x140>)
 80037fc:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 80037fe:	e793      	b.n	8003728 <RobotTurn+0x20>
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 8003800:	bf00      	nop
	  }
	} while(1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8003802:	4b14      	ldr	r3, [pc, #80]	@ (8003854 <RobotTurn+0x14c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	635a      	str	r2, [r3, #52]	@ 0x34
 800380a:	4b12      	ldr	r3, [pc, #72]	@ (8003854 <RobotTurn+0x14c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	639a      	str	r2, [r3, #56]	@ 0x38
	__RESET_SERVO_TURN(&htim1);
 8003812:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <RobotTurn+0x150>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	224c      	movs	r2, #76	@ 0x4c
 8003818:	641a      	str	r2, [r3, #64]	@ 0x40
 800381a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800381e:	f003 fd99 	bl	8007354 <HAL_Delay>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bdb0      	pop	{r4, r5, r7, pc}
 800382a:	bf00      	nop
 800382c:	f3af 8000 	nop.w
 8003830:	66666666 	.word	0x66666666
 8003834:	40306666 	.word	0x40306666
 8003838:	47ae147b 	.word	0x47ae147b
 800383c:	3f847ae1 	.word	0x3f847ae1
 8003840:	200006ac 	.word	0x200006ac
 8003844:	200006b2 	.word	0x200006b2
 8003848:	200006b8 	.word	0x200006b8
 800384c:	200006b0 	.word	0x200006b0
 8003850:	200003cc 	.word	0x200003cc
 8003854:	20000588 	.word	0x20000588
 8003858:	20000420 	.word	0x20000420
 800385c:	00000000 	.word	0x00000000

08003860 <RobotTurnFastest>:
	__SET_MOTOR_DUTY(&htim8, 0, 0);
	__RESET_SERVO_TURN(&htim1);
}


void RobotTurnFastest(float * targetAngle) {
 8003860:	b5b0      	push	{r4, r5, r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af04      	add	r7, sp, #16
 8003866:	6078      	str	r0, [r7, #4]
	angleNow = 0; gyroZ = 0;
 8003868:	4b49      	ldr	r3, [pc, #292]	@ (8003990 <RobotTurnFastest+0x130>)
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	4b48      	ldr	r3, [pc, #288]	@ (8003994 <RobotTurnFastest+0x134>)
 8003872:	2200      	movs	r2, #0
 8003874:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 8003876:	f003 fd61 	bl	800733c <HAL_GetTick>
 800387a:	4603      	mov	r3, r0
 800387c:	4a46      	ldr	r2, [pc, #280]	@ (8003998 <RobotTurnFastest+0x138>)
 800387e:	6013      	str	r3, [r2, #0]
	do {
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8003880:	f003 fd5c 	bl	800733c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	4b44      	ldr	r3, [pc, #272]	@ (8003998 <RobotTurnFastest+0x138>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b09      	cmp	r3, #9
 800388e:	d9f7      	bls.n	8003880 <RobotTurnFastest+0x20>
		  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8003890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003894:	9302      	str	r3, [sp, #8]
 8003896:	2302      	movs	r3, #2
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	4b40      	ldr	r3, [pc, #256]	@ (800399c <RobotTurnFastest+0x13c>)
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	2301      	movs	r3, #1
 80038a0:	2237      	movs	r2, #55	@ 0x37
 80038a2:	21d0      	movs	r1, #208	@ 0xd0
 80038a4:	483e      	ldr	r0, [pc, #248]	@ (80039a0 <RobotTurnFastest+0x140>)
 80038a6:	f005 f849 	bl	800893c <HAL_I2C_Mem_Read>
 80038aa:	4b3c      	ldr	r3, [pc, #240]	@ (800399c <RobotTurnFastest+0x13c>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	b21a      	sxth	r2, r3
 80038b2:	4b3a      	ldr	r3, [pc, #232]	@ (800399c <RobotTurnFastest+0x13c>)
 80038b4:	785b      	ldrb	r3, [r3, #1]
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	4313      	orrs	r3, r2
 80038ba:	b21a      	sxth	r2, r3
 80038bc:	4b35      	ldr	r3, [pc, #212]	@ (8003994 <RobotTurnFastest+0x134>)
 80038be:	801a      	strh	r2, [r3, #0]
		  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80038c0:	4b33      	ldr	r3, [pc, #204]	@ (8003990 <RobotTurnFastest+0x130>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fe3f 	bl	8000548 <__aeabi_f2d>
 80038ca:	4604      	mov	r4, r0
 80038cc:	460d      	mov	r5, r1
 80038ce:	4b31      	ldr	r3, [pc, #196]	@ (8003994 <RobotTurnFastest+0x134>)
 80038d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fe25 	bl	8000524 <__aeabi_i2d>
 80038da:	a329      	add	r3, pc, #164	@ (adr r3, 8003980 <RobotTurnFastest+0x120>)
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f7fc ffb4 	bl	800084c <__aeabi_ddiv>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	a326      	add	r3, pc, #152	@ (adr r3, 8003988 <RobotTurnFastest+0x128>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc fe81 	bl	80005f8 <__aeabi_dmul>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4620      	mov	r0, r4
 80038fc:	4629      	mov	r1, r5
 80038fe:	f7fc fcc5 	bl	800028c <__adddf3>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	f7fd f96d 	bl	8000be8 <__aeabi_d2f>
 800390e:	4603      	mov	r3, r0
 8003910:	4a1f      	ldr	r2, [pc, #124]	@ (8003990 <RobotTurnFastest+0x130>)
 8003912:	6013      	str	r3, [r2, #0]
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 8003914:	4b1e      	ldr	r3, [pc, #120]	@ (8003990 <RobotTurnFastest+0x130>)
 8003916:	ed93 7a00 	vldr	s14, [r3]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003928:	ee17 3a90 	vmov	r3, s15
 800392c:	2b00      	cmp	r3, #0
 800392e:	db0d      	blt.n	800394c <RobotTurnFastest+0xec>
 8003930:	4b17      	ldr	r3, [pc, #92]	@ (8003990 <RobotTurnFastest+0x130>)
 8003932:	ed93 7a00 	vldr	s14, [r3]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	edd3 7a00 	vldr	s15, [r3]
 800393c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003944:	ee17 3a90 	vmov	r3, s15
 8003948:	2b00      	cmp	r3, #0
 800394a:	dd05      	ble.n	8003958 <RobotTurnFastest+0xf8>
		  last_curTask_tick = HAL_GetTick();
 800394c:	f003 fcf6 	bl	800733c <HAL_GetTick>
 8003950:	4603      	mov	r3, r0
 8003952:	4a11      	ldr	r2, [pc, #68]	@ (8003998 <RobotTurnFastest+0x138>)
 8003954:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8003956:	e793      	b.n	8003880 <RobotTurnFastest+0x20>
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 8003958:	bf00      	nop
	  }
	} while(1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 800395a:	4b12      	ldr	r3, [pc, #72]	@ (80039a4 <RobotTurnFastest+0x144>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2200      	movs	r2, #0
 8003960:	635a      	str	r2, [r3, #52]	@ 0x34
 8003962:	4b10      	ldr	r3, [pc, #64]	@ (80039a4 <RobotTurnFastest+0x144>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2200      	movs	r2, #0
 8003968:	639a      	str	r2, [r3, #56]	@ 0x38
	__RESET_SERVO_TURN_FAST(&htim1);
 800396a:	4b0f      	ldr	r3, [pc, #60]	@ (80039a8 <RobotTurnFastest+0x148>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	224c      	movs	r2, #76	@ 0x4c
 8003970:	641a      	str	r2, [r3, #64]	@ 0x40
 8003972:	20c8      	movs	r0, #200	@ 0xc8
 8003974:	f003 fcee 	bl	8007354 <HAL_Delay>
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bdb0      	pop	{r4, r5, r7, pc}
 8003980:	66666666 	.word	0x66666666
 8003984:	40306666 	.word	0x40306666
 8003988:	47ae147b 	.word	0x47ae147b
 800398c:	3f847ae1 	.word	0x3f847ae1
 8003990:	200006ac 	.word	0x200006ac
 8003994:	200006b2 	.word	0x200006b2
 8003998:	200006b8 	.word	0x200006b8
 800399c:	200006b0 	.word	0x200006b0
 80039a0:	200003cc 	.word	0x200003cc
 80039a4:	20000588 	.word	0x20000588
 80039a8:	20000420 	.word	0x20000420

080039ac <FASTESTPATH_TURN_RIGHT_90>:
	__SET_MOTOR_DIRECTION(1);
	__SET_MOTOR_DUTY(&htim8, 1000, 2000);
	RobotTurn(&targetAngle);
}

void FASTESTPATH_TURN_RIGHT_90() {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
	targetAngle = -86;
 80039b0:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <FASTESTPATH_TURN_RIGHT_90+0x60>)
 80039b2:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <FASTESTPATH_TURN_RIGHT_90+0x64>)
 80039b4:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 115);
 80039b6:	4b17      	ldr	r3, [pc, #92]	@ (8003a14 <FASTESTPATH_TURN_RIGHT_90+0x68>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2273      	movs	r2, #115	@ 0x73
 80039bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80039be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80039c2:	f003 fcc7 	bl	8007354 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2104      	movs	r1, #4
 80039ca:	4813      	ldr	r0, [pc, #76]	@ (8003a18 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 80039cc:	f004 fd5e 	bl	800848c <HAL_GPIO_WritePin>
 80039d0:	2201      	movs	r2, #1
 80039d2:	2108      	movs	r1, #8
 80039d4:	4810      	ldr	r0, [pc, #64]	@ (8003a18 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 80039d6:	f004 fd59 	bl	800848c <HAL_GPIO_WritePin>
 80039da:	2200      	movs	r2, #0
 80039dc:	2120      	movs	r1, #32
 80039de:	480e      	ldr	r0, [pc, #56]	@ (8003a18 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 80039e0:	f004 fd54 	bl	800848c <HAL_GPIO_WritePin>
 80039e4:	2201      	movs	r2, #1
 80039e6:	2110      	movs	r1, #16
 80039e8:	480b      	ldr	r0, [pc, #44]	@ (8003a18 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 80039ea:	f004 fd4f 	bl	800848c <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 3000, 800);
 80039ee:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <FASTESTPATH_TURN_RIGHT_90+0x70>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80039f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80039f8:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <FASTESTPATH_TURN_RIGHT_90+0x70>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003a00:	639a      	str	r2, [r3, #56]	@ 0x38

	RobotTurn(&targetAngle);
 8003a02:	4802      	ldr	r0, [pc, #8]	@ (8003a0c <FASTESTPATH_TURN_RIGHT_90+0x60>)
 8003a04:	f7ff fe80 	bl	8003708 <RobotTurn>
}
 8003a08:	bf00      	nop
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	200006a8 	.word	0x200006a8
 8003a10:	c2ac0000 	.word	0xc2ac0000
 8003a14:	20000420 	.word	0x20000420
 8003a18:	40020000 	.word	0x40020000
 8003a1c:	20000588 	.word	0x20000588

08003a20 <FASTESTPATH_TURN_RIGHT_180>:

void FASTESTPATH_TURN_RIGHT_180() {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	targetAngle = -176;
 8003a24:	4b16      	ldr	r3, [pc, #88]	@ (8003a80 <FASTESTPATH_TURN_RIGHT_180+0x60>)
 8003a26:	4a17      	ldr	r2, [pc, #92]	@ (8003a84 <FASTESTPATH_TURN_RIGHT_180+0x64>)
 8003a28:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 115);
 8003a2a:	4b17      	ldr	r3, [pc, #92]	@ (8003a88 <FASTESTPATH_TURN_RIGHT_180+0x68>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2273      	movs	r2, #115	@ 0x73
 8003a30:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a32:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003a36:	f003 fc8d 	bl	8007354 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	4813      	ldr	r0, [pc, #76]	@ (8003a8c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 8003a40:	f004 fd24 	bl	800848c <HAL_GPIO_WritePin>
 8003a44:	2201      	movs	r2, #1
 8003a46:	2108      	movs	r1, #8
 8003a48:	4810      	ldr	r0, [pc, #64]	@ (8003a8c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 8003a4a:	f004 fd1f 	bl	800848c <HAL_GPIO_WritePin>
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2120      	movs	r1, #32
 8003a52:	480e      	ldr	r0, [pc, #56]	@ (8003a8c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 8003a54:	f004 fd1a 	bl	800848c <HAL_GPIO_WritePin>
 8003a58:	2201      	movs	r2, #1
 8003a5a:	2110      	movs	r1, #16
 8003a5c:	480b      	ldr	r0, [pc, #44]	@ (8003a8c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 8003a5e:	f004 fd15 	bl	800848c <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 3000, 800);
 8003a62:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <FASTESTPATH_TURN_RIGHT_180+0x70>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003a6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a6c:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <FASTESTPATH_TURN_RIGHT_180+0x70>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003a74:	639a      	str	r2, [r3, #56]	@ 0x38
	RobotTurn(&targetAngle);
 8003a76:	4802      	ldr	r0, [pc, #8]	@ (8003a80 <FASTESTPATH_TURN_RIGHT_180+0x60>)
 8003a78:	f7ff fe46 	bl	8003708 <RobotTurn>
}
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	200006a8 	.word	0x200006a8
 8003a84:	c3300000 	.word	0xc3300000
 8003a88:	20000420 	.word	0x20000420
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	20000588 	.word	0x20000588

08003a94 <FASTESTPATH_TURN_LEFT_90X>:

void FASTESTPATH_TURN_LEFT_90X(uint8_t * turnSize) { // x3
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2104      	movs	r1, #4
 8003aa0:	4825      	ldr	r0, [pc, #148]	@ (8003b38 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 8003aa2:	f004 fcf3 	bl	800848c <HAL_GPIO_WritePin>
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	2108      	movs	r1, #8
 8003aaa:	4823      	ldr	r0, [pc, #140]	@ (8003b38 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 8003aac:	f004 fcee 	bl	800848c <HAL_GPIO_WritePin>
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2120      	movs	r1, #32
 8003ab4:	4820      	ldr	r0, [pc, #128]	@ (8003b38 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 8003ab6:	f004 fce9 	bl	800848c <HAL_GPIO_WritePin>
 8003aba:	2201      	movs	r2, #1
 8003abc:	2110      	movs	r1, #16
 8003abe:	481e      	ldr	r0, [pc, #120]	@ (8003b38 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 8003ac0:	f004 fce4 	bl	800848c <HAL_GPIO_WritePin>
	switch (*turnSize) {
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d001      	beq.n	8003ad0 <FASTESTPATH_TURN_LEFT_90X+0x3c>
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d115      	bne.n	8003afc <FASTESTPATH_TURN_LEFT_90X+0x68>
	case 1:
	case 3:
		targetAngle = 83;
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b3c <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b40 <FASTESTPATH_TURN_LEFT_90X+0xac>)
 8003ad4:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 50);
 8003ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b44 <FASTESTPATH_TURN_LEFT_90X+0xb0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2232      	movs	r2, #50	@ 0x32
 8003adc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ade:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003ae2:	f003 fc37 	bl	8007354 <HAL_Delay>
		__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 8003ae6:	4b18      	ldr	r3, [pc, #96]	@ (8003b48 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003aee:	635a      	str	r2, [r3, #52]	@ 0x34
 8003af0:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003af8:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8003afa:	e015      	b.n	8003b28 <FASTESTPATH_TURN_LEFT_90X+0x94>
	case 2:
	case 4:
	default:
//		targetAngle = 85;
		targetAngle = 83;
 8003afc:	4b0f      	ldr	r3, [pc, #60]	@ (8003b3c <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 8003afe:	4a10      	ldr	r2, [pc, #64]	@ (8003b40 <FASTESTPATH_TURN_LEFT_90X+0xac>)
 8003b00:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 52);
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <FASTESTPATH_TURN_LEFT_90X+0xb0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2234      	movs	r2, #52	@ 0x34
 8003b08:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b0a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003b0e:	f003 fc21 	bl	8007354 <HAL_Delay>
//		__SET_MOTOR_DUTY(&htim8, 2500, 2916);
		__SET_MOTOR_DUTY(&htim8, 3000, 3500);
 8003b12:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003b1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003b24:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8003b26:	bf00      	nop
	}
	RobotTurnFastest(&targetAngle);
 8003b28:	4804      	ldr	r0, [pc, #16]	@ (8003b3c <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 8003b2a:	f7ff fe99 	bl	8003860 <RobotTurnFastest>

}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	200006a8 	.word	0x200006a8
 8003b40:	42a60000 	.word	0x42a60000
 8003b44:	20000420 	.word	0x20000420
 8003b48:	20000588 	.word	0x20000588

08003b4c <FASTESTPATH_TURN_LEFT_90X_RETURN>:

void FASTESTPATH_TURN_LEFT_90X_RETURN(uint8_t * turnSize) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 8003b54:	2200      	movs	r2, #0
 8003b56:	2104      	movs	r1, #4
 8003b58:	4830      	ldr	r0, [pc, #192]	@ (8003c1c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 8003b5a:	f004 fc97 	bl	800848c <HAL_GPIO_WritePin>
 8003b5e:	2201      	movs	r2, #1
 8003b60:	2108      	movs	r1, #8
 8003b62:	482e      	ldr	r0, [pc, #184]	@ (8003c1c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 8003b64:	f004 fc92 	bl	800848c <HAL_GPIO_WritePin>
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2120      	movs	r1, #32
 8003b6c:	482b      	ldr	r0, [pc, #172]	@ (8003c1c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 8003b6e:	f004 fc8d 	bl	800848c <HAL_GPIO_WritePin>
 8003b72:	2201      	movs	r2, #1
 8003b74:	2110      	movs	r1, #16
 8003b76:	4829      	ldr	r0, [pc, #164]	@ (8003c1c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 8003b78:	f004 fc88 	bl	800848c <HAL_GPIO_WritePin>
		switch (*turnSize) {
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d002      	beq.n	8003b8a <FASTESTPATH_TURN_LEFT_90X_RETURN+0x3e>
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d016      	beq.n	8003bb6 <FASTESTPATH_TURN_LEFT_90X_RETURN+0x6a>
 8003b88:	e02b      	b.n	8003be2 <FASTESTPATH_TURN_LEFT_90X_RETURN+0x96>
		case 1:
			targetAngle = 83;
 8003b8a:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 8003b8c:	4a25      	ldr	r2, [pc, #148]	@ (8003c24 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd8>)
 8003b8e:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 50);
 8003b90:	4b25      	ldr	r3, [pc, #148]	@ (8003c28 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2232      	movs	r2, #50	@ 0x32
 8003b96:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b98:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003b9c:	f003 fbda 	bl	8007354 <HAL_Delay>
			__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 8003ba0:	4b22      	ldr	r3, [pc, #136]	@ (8003c2c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003baa:	4b20      	ldr	r3, [pc, #128]	@ (8003c2c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003bb2:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8003bb4:	e02b      	b.n	8003c0e <FASTESTPATH_TURN_LEFT_90X_RETURN+0xc2>
		case 3:
			targetAngle = 85;
 8003bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c20 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 8003bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c30 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe4>)
 8003bba:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 50);
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c28 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2232      	movs	r2, #50	@ 0x32
 8003bc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bc4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003bc8:	f003 fbc4 	bl	8007354 <HAL_Delay>
			__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 8003bcc:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bd6:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003bde:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8003be0:	e015      	b.n	8003c0e <FASTESTPATH_TURN_LEFT_90X_RETURN+0xc2>
		case 2:
		case 4:
		default:
	//		targetAngle = 85;
			targetAngle = 79;
 8003be2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c20 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 8003be4:	4a13      	ldr	r2, [pc, #76]	@ (8003c34 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe8>)
 8003be6:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 52);
 8003be8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c28 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2234      	movs	r2, #52	@ 0x34
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bf0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003bf4:	f003 fbae 	bl	8007354 <HAL_Delay>
	//		__SET_MOTOR_DUTY(&htim8, 2500, 2916);
			__SET_MOTOR_DUTY(&htim8, 3000, 3500);
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c02:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003c0a:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8003c0c:	bf00      	nop
		}
		RobotTurnFastest(&targetAngle);
 8003c0e:	4804      	ldr	r0, [pc, #16]	@ (8003c20 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 8003c10:	f7ff fe26 	bl	8003860 <RobotTurnFastest>
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40020000 	.word	0x40020000
 8003c20:	200006a8 	.word	0x200006a8
 8003c24:	42a60000 	.word	0x42a60000
 8003c28:	20000420 	.word	0x20000420
 8003c2c:	20000588 	.word	0x20000588
 8003c30:	42aa0000 	.word	0x42aa0000
 8003c34:	429e0000 	.word	0x429e0000

08003c38 <FASTESTPATH_TURN_RIGHT_180X>:
//		break;
//	}
//	RobotTurnFastest(&targetAngle);
//}

void FASTESTPATH_TURN_RIGHT_180X(uint8_t * turnSize) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 8003c40:	2200      	movs	r2, #0
 8003c42:	2104      	movs	r1, #4
 8003c44:	4825      	ldr	r0, [pc, #148]	@ (8003cdc <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 8003c46:	f004 fc21 	bl	800848c <HAL_GPIO_WritePin>
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	2108      	movs	r1, #8
 8003c4e:	4823      	ldr	r0, [pc, #140]	@ (8003cdc <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 8003c50:	f004 fc1c 	bl	800848c <HAL_GPIO_WritePin>
 8003c54:	2200      	movs	r2, #0
 8003c56:	2120      	movs	r1, #32
 8003c58:	4820      	ldr	r0, [pc, #128]	@ (8003cdc <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 8003c5a:	f004 fc17 	bl	800848c <HAL_GPIO_WritePin>
 8003c5e:	2201      	movs	r2, #1
 8003c60:	2110      	movs	r1, #16
 8003c62:	481e      	ldr	r0, [pc, #120]	@ (8003cdc <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 8003c64:	f004 fc12 	bl	800848c <HAL_GPIO_WritePin>
	switch (*turnSize) {
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d001      	beq.n	8003c74 <FASTESTPATH_TURN_RIGHT_180X+0x3c>
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d115      	bne.n	8003ca0 <FASTESTPATH_TURN_RIGHT_180X+0x68>
	case 1:
	case 3:
		targetAngle = -172;
 8003c74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce0 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 8003c76:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce4 <FASTESTPATH_TURN_RIGHT_180X+0xac>)
 8003c78:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 115);
 8003c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce8 <FASTESTPATH_TURN_RIGHT_180X+0xb0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2273      	movs	r2, #115	@ 0x73
 8003c80:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c82:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003c86:	f003 fb65 	bl	8007354 <HAL_Delay>
		__SET_MOTOR_DUTY(&htim8, 3500, 2000);
 8003c8a:	4b18      	ldr	r3, [pc, #96]	@ (8003cec <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003c92:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c94:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c9c:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8003c9e:	e015      	b.n	8003ccc <FASTESTPATH_TURN_RIGHT_180X+0x94>
	case 2:
	case 4:
	default:
//		targetAngle = -176;
		targetAngle = -170;
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce0 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 8003ca2:	4a13      	ldr	r2, [pc, #76]	@ (8003cf0 <FASTESTPATH_TURN_RIGHT_180X+0xb8>)
 8003ca4:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 98);
 8003ca6:	4b10      	ldr	r3, [pc, #64]	@ (8003ce8 <FASTESTPATH_TURN_RIGHT_180X+0xb0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2262      	movs	r2, #98	@ 0x62
 8003cac:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003cb2:	f003 fb4f 	bl	8007354 <HAL_Delay>
//		__SET_MOTOR_DUTY(&htim8, 2700, 2500);
		__SET_MOTOR_DUTY(&htim8, 3500, 3240);
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003cbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f640 42a8 	movw	r2, #3240	@ 0xca8
 8003cc8:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8003cca:	bf00      	nop
	}
	RobotTurnFastest(&targetAngle);
 8003ccc:	4804      	ldr	r0, [pc, #16]	@ (8003ce0 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 8003cce:	f7ff fdc7 	bl	8003860 <RobotTurnFastest>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40020000 	.word	0x40020000
 8003ce0:	200006a8 	.word	0x200006a8
 8003ce4:	c32c0000 	.word	0xc32c0000
 8003ce8:	20000420 	.word	0x20000420
 8003cec:	20000588 	.word	0x20000588
 8003cf0:	c32a0000 	.word	0xc32a0000
 8003cf4:	00000000 	.word	0x00000000

08003cf8 <RobotMoveUntilIROvershoot>:

void RobotMoveUntilIROvershoot() {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	obsDist_IR = 0;
 8003cfc:	4b4a      	ldr	r3, [pc, #296]	@ (8003e28 <RobotMoveUntilIROvershoot+0x130>)
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
	angleNow = 0; gyroZ = 0;
 8003d04:	4b49      	ldr	r3, [pc, #292]	@ (8003e2c <RobotMoveUntilIROvershoot+0x134>)
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	4b48      	ldr	r3, [pc, #288]	@ (8003e30 <RobotMoveUntilIROvershoot+0x138>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	801a      	strh	r2, [r3, #0]
	  last_curTask_tick = HAL_GetTick();
 8003d12:	f003 fb13 	bl	800733c <HAL_GetTick>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4a46      	ldr	r2, [pc, #280]	@ (8003e34 <RobotMoveUntilIROvershoot+0x13c>)
 8003d1a:	6013      	str	r3, [r2, #0]
	  do {
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003d1c:	4846      	ldr	r0, [pc, #280]	@ (8003e38 <RobotMoveUntilIROvershoot+0x140>)
 8003d1e:	f003 fb81 	bl	8007424 <HAL_ADC_Start>
 8003d22:	f245 51f0 	movw	r1, #22000	@ 0x55f0
 8003d26:	4844      	ldr	r0, [pc, #272]	@ (8003e38 <RobotMoveUntilIROvershoot+0x140>)
 8003d28:	f003 fc81 	bl	800762e <HAL_ADC_PollForConversion>
 8003d2c:	4842      	ldr	r0, [pc, #264]	@ (8003e38 <RobotMoveUntilIROvershoot+0x140>)
 8003d2e:	f003 fe19 	bl	8007964 <HAL_ADC_GetValue>
 8003d32:	4602      	mov	r2, r0
 8003d34:	4b41      	ldr	r3, [pc, #260]	@ (8003e3c <RobotMoveUntilIROvershoot+0x144>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4413      	add	r3, r2
 8003d3a:	4a40      	ldr	r2, [pc, #256]	@ (8003e3c <RobotMoveUntilIROvershoot+0x144>)
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b40      	ldr	r3, [pc, #256]	@ (8003e40 <RobotMoveUntilIROvershoot+0x148>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	3301      	adds	r3, #1
 8003d44:	4a3f      	ldr	r2, [pc, #252]	@ (8003e44 <RobotMoveUntilIROvershoot+0x14c>)
 8003d46:	fb82 1203 	smull	r1, r2, r2, r3
 8003d4a:	1151      	asrs	r1, r2, #5
 8003d4c:	17da      	asrs	r2, r3, #31
 8003d4e:	1a8a      	subs	r2, r1, r2
 8003d50:	2164      	movs	r1, #100	@ 0x64
 8003d52:	fb01 f202 	mul.w	r2, r1, r2
 8003d56:	1a9a      	subs	r2, r3, r2
 8003d58:	b292      	uxth	r2, r2
 8003d5a:	4b39      	ldr	r3, [pc, #228]	@ (8003e40 <RobotMoveUntilIROvershoot+0x148>)
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	4b38      	ldr	r3, [pc, #224]	@ (8003e40 <RobotMoveUntilIROvershoot+0x148>)
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	2b63      	cmp	r3, #99	@ 0x63
 8003d64:	d131      	bne.n	8003dca <RobotMoveUntilIROvershoot+0xd2>
 8003d66:	4b35      	ldr	r3, [pc, #212]	@ (8003e3c <RobotMoveUntilIROvershoot+0x144>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a35      	ldr	r2, [pc, #212]	@ (8003e40 <RobotMoveUntilIROvershoot+0x148>)
 8003d6c:	8812      	ldrh	r2, [r2, #0]
 8003d6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc fbc6 	bl	8000504 <__aeabi_ui2d>
 8003d78:	a327      	add	r3, pc, #156	@ (adr r3, 8003e18 <RobotMoveUntilIROvershoot+0x120>)
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f7fc fa83 	bl	8000288 <__aeabi_dsub>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	a126      	add	r1, pc, #152	@ (adr r1, 8003e20 <RobotMoveUntilIROvershoot+0x128>)
 8003d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d8c:	f7fc fd5e 	bl	800084c <__aeabi_ddiv>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	f7fc fede 	bl	8000b58 <__aeabi_d2iz>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bfb8      	it	lt
 8003da2:	425b      	neglt	r3, r3
 8003da4:	ee07 3a90 	vmov	s15, r3
 8003da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dac:	4b1e      	ldr	r3, [pc, #120]	@ (8003e28 <RobotMoveUntilIROvershoot+0x130>)
 8003dae:	edc3 7a00 	vstr	s15, [r3]
 8003db2:	4b22      	ldr	r3, [pc, #136]	@ (8003e3c <RobotMoveUntilIROvershoot+0x144>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a22      	ldr	r2, [pc, #136]	@ (8003e40 <RobotMoveUntilIROvershoot+0x148>)
 8003db8:	8812      	ldrh	r2, [r2, #0]
 8003dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	4b21      	ldr	r3, [pc, #132]	@ (8003e48 <RobotMoveUntilIROvershoot+0x150>)
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e3c <RobotMoveUntilIROvershoot+0x144>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
		  if (obsDist_IR > 40) break;
 8003dca:	4b17      	ldr	r3, [pc, #92]	@ (8003e28 <RobotMoveUntilIROvershoot+0x130>)
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003e4c <RobotMoveUntilIROvershoot+0x154>
 8003dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ddc:	dc10      	bgt.n	8003e00 <RobotMoveUntilIROvershoot+0x108>
		  if (HAL_GetTick() - last_curTask_tick >= 10) {
 8003dde:	f003 faad 	bl	800733c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	4b13      	ldr	r3, [pc, #76]	@ (8003e34 <RobotMoveUntilIROvershoot+0x13c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b09      	cmp	r3, #9
 8003dec:	d996      	bls.n	8003d1c <RobotMoveUntilIROvershoot+0x24>
			  StraightLineMove(SPEED_MODE_2);
 8003dee:	2002      	movs	r0, #2
 8003df0:	f7fe fcf6 	bl	80027e0 <StraightLineMove>
			  last_curTask_tick = HAL_GetTick();
 8003df4:	f003 faa2 	bl	800733c <HAL_GetTick>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8003e34 <RobotMoveUntilIROvershoot+0x13c>)
 8003dfc:	6013      	str	r3, [r2, #0]
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003dfe:	e78d      	b.n	8003d1c <RobotMoveUntilIROvershoot+0x24>
		  if (obsDist_IR > 40) break;
 8003e00:	bf00      	nop
		  }
	  } while (1);
	  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003e02:	4b13      	ldr	r3, [pc, #76]	@ (8003e50 <RobotMoveUntilIROvershoot+0x158>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e0a:	4b11      	ldr	r3, [pc, #68]	@ (8003e50 <RobotMoveUntilIROvershoot+0x158>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	fb5723d3 	.word	0xfb5723d3
 8003e1c:	407046c5 	.word	0x407046c5
 8003e20:	324c8366 	.word	0x324c8366
 8003e24:	40d90b34 	.word	0x40d90b34
 8003e28:	20000708 	.word	0x20000708
 8003e2c:	200006ac 	.word	0x200006ac
 8003e30:	200006b2 	.word	0x200006b2
 8003e34:	200006b8 	.word	0x200006b8
 8003e38:	2000033c 	.word	0x2000033c
 8003e3c:	20000714 	.word	0x20000714
 8003e40:	20000710 	.word	0x20000710
 8003e44:	51eb851f 	.word	0x51eb851f
 8003e48:	20000704 	.word	0x20000704
 8003e4c:	42200000 	.word	0x42200000
 8003e50:	20000588 	.word	0x20000588
 8003e54:	00000000 	.word	0x00000000

08003e58 <RobotMoveUntilIRHit>:

void RobotMoveUntilIRHit() {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
	obsDist_IR = 1000;
 8003e5c:	4b4a      	ldr	r3, [pc, #296]	@ (8003f88 <RobotMoveUntilIRHit+0x130>)
 8003e5e:	4a4b      	ldr	r2, [pc, #300]	@ (8003f8c <RobotMoveUntilIRHit+0x134>)
 8003e60:	601a      	str	r2, [r3, #0]
	angleNow = 0; gyroZ = 0;
 8003e62:	4b4b      	ldr	r3, [pc, #300]	@ (8003f90 <RobotMoveUntilIRHit+0x138>)
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f94 <RobotMoveUntilIRHit+0x13c>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	801a      	strh	r2, [r3, #0]
	  last_curTask_tick = HAL_GetTick();
 8003e70:	f003 fa64 	bl	800733c <HAL_GetTick>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4a48      	ldr	r2, [pc, #288]	@ (8003f98 <RobotMoveUntilIRHit+0x140>)
 8003e78:	6013      	str	r3, [r2, #0]
	  do {
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003e7a:	4848      	ldr	r0, [pc, #288]	@ (8003f9c <RobotMoveUntilIRHit+0x144>)
 8003e7c:	f003 fad2 	bl	8007424 <HAL_ADC_Start>
 8003e80:	f245 51f0 	movw	r1, #22000	@ 0x55f0
 8003e84:	4845      	ldr	r0, [pc, #276]	@ (8003f9c <RobotMoveUntilIRHit+0x144>)
 8003e86:	f003 fbd2 	bl	800762e <HAL_ADC_PollForConversion>
 8003e8a:	4844      	ldr	r0, [pc, #272]	@ (8003f9c <RobotMoveUntilIRHit+0x144>)
 8003e8c:	f003 fd6a 	bl	8007964 <HAL_ADC_GetValue>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b43      	ldr	r3, [pc, #268]	@ (8003fa0 <RobotMoveUntilIRHit+0x148>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4413      	add	r3, r2
 8003e98:	4a41      	ldr	r2, [pc, #260]	@ (8003fa0 <RobotMoveUntilIRHit+0x148>)
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	4b41      	ldr	r3, [pc, #260]	@ (8003fa4 <RobotMoveUntilIRHit+0x14c>)
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	4a41      	ldr	r2, [pc, #260]	@ (8003fa8 <RobotMoveUntilIRHit+0x150>)
 8003ea4:	fb82 1203 	smull	r1, r2, r2, r3
 8003ea8:	1151      	asrs	r1, r2, #5
 8003eaa:	17da      	asrs	r2, r3, #31
 8003eac:	1a8a      	subs	r2, r1, r2
 8003eae:	2164      	movs	r1, #100	@ 0x64
 8003eb0:	fb01 f202 	mul.w	r2, r1, r2
 8003eb4:	1a9a      	subs	r2, r3, r2
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa4 <RobotMoveUntilIRHit+0x14c>)
 8003eba:	801a      	strh	r2, [r3, #0]
 8003ebc:	4b39      	ldr	r3, [pc, #228]	@ (8003fa4 <RobotMoveUntilIRHit+0x14c>)
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	2b63      	cmp	r3, #99	@ 0x63
 8003ec2:	d131      	bne.n	8003f28 <RobotMoveUntilIRHit+0xd0>
 8003ec4:	4b36      	ldr	r3, [pc, #216]	@ (8003fa0 <RobotMoveUntilIRHit+0x148>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a36      	ldr	r2, [pc, #216]	@ (8003fa4 <RobotMoveUntilIRHit+0x14c>)
 8003eca:	8812      	ldrh	r2, [r2, #0]
 8003ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc fb17 	bl	8000504 <__aeabi_ui2d>
 8003ed6:	a328      	add	r3, pc, #160	@ (adr r3, 8003f78 <RobotMoveUntilIRHit+0x120>)
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f7fc f9d4 	bl	8000288 <__aeabi_dsub>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	a126      	add	r1, pc, #152	@ (adr r1, 8003f80 <RobotMoveUntilIRHit+0x128>)
 8003ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003eea:	f7fc fcaf 	bl	800084c <__aeabi_ddiv>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f7fc fe2f 	bl	8000b58 <__aeabi_d2iz>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bfb8      	it	lt
 8003f00:	425b      	neglt	r3, r3
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f88 <RobotMoveUntilIRHit+0x130>)
 8003f0c:	edc3 7a00 	vstr	s15, [r3]
 8003f10:	4b23      	ldr	r3, [pc, #140]	@ (8003fa0 <RobotMoveUntilIRHit+0x148>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a23      	ldr	r2, [pc, #140]	@ (8003fa4 <RobotMoveUntilIRHit+0x14c>)
 8003f16:	8812      	ldrh	r2, [r2, #0]
 8003f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	4b23      	ldr	r3, [pc, #140]	@ (8003fac <RobotMoveUntilIRHit+0x154>)
 8003f20:	801a      	strh	r2, [r3, #0]
 8003f22:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa0 <RobotMoveUntilIRHit+0x148>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
		  if (obsDist_IR < 40) break;
 8003f28:	4b17      	ldr	r3, [pc, #92]	@ (8003f88 <RobotMoveUntilIRHit+0x130>)
 8003f2a:	edd3 7a00 	vldr	s15, [r3]
 8003f2e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003fb0 <RobotMoveUntilIRHit+0x158>
 8003f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3a:	d410      	bmi.n	8003f5e <RobotMoveUntilIRHit+0x106>
		  if (HAL_GetTick() - last_curTask_tick >= 10) {
 8003f3c:	f003 f9fe 	bl	800733c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <RobotMoveUntilIRHit+0x140>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b09      	cmp	r3, #9
 8003f4a:	d996      	bls.n	8003e7a <RobotMoveUntilIRHit+0x22>
			  StraightLineMove(SPEED_MODE_2);
 8003f4c:	2002      	movs	r0, #2
 8003f4e:	f7fe fc47 	bl	80027e0 <StraightLineMove>
			  last_curTask_tick = HAL_GetTick();
 8003f52:	f003 f9f3 	bl	800733c <HAL_GetTick>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a0f      	ldr	r2, [pc, #60]	@ (8003f98 <RobotMoveUntilIRHit+0x140>)
 8003f5a:	6013      	str	r3, [r2, #0]
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003f5c:	e78d      	b.n	8003e7a <RobotMoveUntilIRHit+0x22>
		  if (obsDist_IR < 40) break;
 8003f5e:	bf00      	nop
		  }
	  } while (1);
	  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003f60:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <RobotMoveUntilIRHit+0x15c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2200      	movs	r2, #0
 8003f66:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f68:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <RobotMoveUntilIRHit+0x15c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	f3af 8000 	nop.w
 8003f78:	fb5723d3 	.word	0xfb5723d3
 8003f7c:	407046c5 	.word	0x407046c5
 8003f80:	324c8366 	.word	0x324c8366
 8003f84:	40d90b34 	.word	0x40d90b34
 8003f88:	20000708 	.word	0x20000708
 8003f8c:	447a0000 	.word	0x447a0000
 8003f90:	200006ac 	.word	0x200006ac
 8003f94:	200006b2 	.word	0x200006b2
 8003f98:	200006b8 	.word	0x200006b8
 8003f9c:	2000033c 	.word	0x2000033c
 8003fa0:	20000714 	.word	0x20000714
 8003fa4:	20000710 	.word	0x20000710
 8003fa8:	51eb851f 	.word	0x51eb851f
 8003fac:	20000704 	.word	0x20000704
 8003fb0:	42200000 	.word	0x42200000
 8003fb4:	20000588 	.word	0x20000588

08003fb8 <runOledTask>:
  * @retval None
  */
/* USER CODE END Header_runOledTask */
float angleTemp;
void runOledTask(void *argument)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b092      	sub	sp, #72	@ 0x48
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


		sprintf(message1, "cmd:%c,%d", directionCmd, data);
 8003fc0:	4b28      	ldr	r3, [pc, #160]	@ (8004064 <runOledTask+0xac>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4b28      	ldr	r3, [pc, #160]	@ (8004068 <runOledTask+0xb0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8003fce:	4927      	ldr	r1, [pc, #156]	@ (800406c <runOledTask+0xb4>)
 8003fd0:	f00b ff6a 	bl	800fea8 <siprintf>
		OLED_ShowString(0, 10, message1);
 8003fd4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003fd8:	461a      	mov	r2, r3
 8003fda:	210a      	movs	r1, #10
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f002 fc1b 	bl	8006818 <OLED_ShowString>
		sprintf(message2, "PWM:%d , %d", cfgs[CONFIG_FL00].leftDuty, cfgs[CONFIG_FL00].rightDuty );
 8003fe2:	4b23      	ldr	r3, [pc, #140]	@ (8004070 <runOledTask+0xb8>)
 8003fe4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b21      	ldr	r3, [pc, #132]	@ (8004070 <runOledTask+0xb8>)
 8003fec:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8003ff0:	f107 0020 	add.w	r0, r7, #32
 8003ff4:	491f      	ldr	r1, [pc, #124]	@ (8004074 <runOledTask+0xbc>)
 8003ff6:	f00b ff57 	bl	800fea8 <siprintf>
		OLED_ShowString(0, 30, message2);
 8003ffa:	f107 0320 	add.w	r3, r7, #32
 8003ffe:	461a      	mov	r2, r3
 8004000:	211e      	movs	r1, #30
 8004002:	2000      	movs	r0, #0
 8004004:	f002 fc08 	bl	8006818 <OLED_ShowString>
		sprintf(message3, "Turn:%d", cfgs[CONFIG_FR00].servoTurnVal );
 8004008:	4b19      	ldr	r3, [pc, #100]	@ (8004070 <runOledTask+0xb8>)
 800400a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc fa9a 	bl	8000548 <__aeabi_f2d>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	f107 000c 	add.w	r0, r7, #12
 800401c:	4916      	ldr	r1, [pc, #88]	@ (8004078 <runOledTask+0xc0>)
 800401e:	f00b ff43 	bl	800fea8 <siprintf>
		OLED_ShowString(0, 50, message3);
 8004022:	f107 030c 	add.w	r3, r7, #12
 8004026:	461a      	mov	r2, r3
 8004028:	2132      	movs	r1, #50	@ 0x32
 800402a:	2000      	movs	r0, #0
 800402c:	f002 fbf4 	bl	8006818 <OLED_ShowString>
//	OLED_ShowString(0, 24, (char *) ch);
//	snprintf(ch, sizeof(ch), "obs_a:%-4d|x:%-4d", (int)obs_a, (int) x);
//	OLED_ShowString(0, 24, (char *) ch);
//	snprintf(ch, sizeof(ch), "US:%-4d|IR:%-4d", (int)obsDist_US, (int)obsDist_IR);
//	OLED_ShowString(0, 48, (char *) ch);
	OLED_Refresh_Gram();
 8004030:	f002 fa7e 	bl	8006530 <OLED_Refresh_Gram>
	//HAL_UART_Transmit(&huart3, (uint8_t *) "(", 7, 0xFFFF);
	sprintf(message1, "(%d)", Distance);
 8004034:	4b11      	ldr	r3, [pc, #68]	@ (800407c <runOledTask+0xc4>)
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800403e:	4910      	ldr	r1, [pc, #64]	@ (8004080 <runOledTask+0xc8>)
 8004040:	4618      	mov	r0, r3
 8004042:	f00b ff31 	bl	800fea8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) message1, 7, 0xFFFF);
 8004046:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800404a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800404e:	2207      	movs	r2, #7
 8004050:	480c      	ldr	r0, [pc, #48]	@ (8004084 <runOledTask+0xcc>)
 8004052:	f007 fc42 	bl	800b8da <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart3, (uint8_t *) ")", 7, 0xFFFF);

	osDelay(1000);
 8004056:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800405a:	f008 fd79 	bl	800cb50 <osDelay>
		sprintf(message1, "cmd:%c,%d", directionCmd, data);
 800405e:	bf00      	nop
 8004060:	e7ae      	b.n	8003fc0 <runOledTask+0x8>
 8004062:	bf00      	nop
 8004064:	20000750 	.word	0x20000750
 8004068:	2000074c 	.word	0x2000074c
 800406c:	0801311c 	.word	0x0801311c
 8004070:	20000004 	.word	0x20000004
 8004074:	08013134 	.word	0x08013134
 8004078:	08013140 	.word	0x08013140
 800407c:	2000073c 	.word	0x2000073c
 8004080:	08013148 	.word	0x08013148
 8004084:	200005d0 	.word	0x200005d0

08004088 <runCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for(;;)
  {
 	  switch(curCmd.index) {
 8004090:	4bc6      	ldr	r3, [pc, #792]	@ (80043ac <runCmdTask+0x324>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	3b01      	subs	r3, #1
 8004096:	2b63      	cmp	r3, #99	@ 0x63
 8004098:	f200 827a 	bhi.w	8004590 <runCmdTask+0x508>
 800409c:	a201      	add	r2, pc, #4	@ (adr r2, 80040a4 <runCmdTask+0x1c>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	08004235 	.word	0x08004235
 80040a8:	08004235 	.word	0x08004235
 80040ac:	08004251 	.word	0x08004251
 80040b0:	08004251 	.word	0x08004251
 80040b4:	08004251 	.word	0x08004251
 80040b8:	08004251 	.word	0x08004251
 80040bc:	08004421 	.word	0x08004421
 80040c0:	0800442f 	.word	0x0800442f
 80040c4:	0800443d 	.word	0x0800443d
 80040c8:	0800444b 	.word	0x0800444b
 80040cc:	08004459 	.word	0x08004459
 80040d0:	08004459 	.word	0x08004459
 80040d4:	080044a1 	.word	0x080044a1
 80040d8:	080044a9 	.word	0x080044a9
 80040dc:	080044b7 	.word	0x080044b7
 80040e0:	080044c5 	.word	0x080044c5
 80040e4:	080044d3 	.word	0x080044d3
 80040e8:	08004591 	.word	0x08004591
 80040ec:	08004591 	.word	0x08004591
 80040f0:	08004591 	.word	0x08004591
 80040f4:	08004591 	.word	0x08004591
 80040f8:	08004591 	.word	0x08004591
 80040fc:	08004591 	.word	0x08004591
 8004100:	08004591 	.word	0x08004591
 8004104:	08004591 	.word	0x08004591
 8004108:	08004591 	.word	0x08004591
 800410c:	08004591 	.word	0x08004591
 8004110:	08004591 	.word	0x08004591
 8004114:	08004591 	.word	0x08004591
 8004118:	08004591 	.word	0x08004591
 800411c:	08004591 	.word	0x08004591
 8004120:	08004591 	.word	0x08004591
 8004124:	08004591 	.word	0x08004591
 8004128:	08004591 	.word	0x08004591
 800412c:	08004591 	.word	0x08004591
 8004130:	08004591 	.word	0x08004591
 8004134:	08004591 	.word	0x08004591
 8004138:	08004591 	.word	0x08004591
 800413c:	08004591 	.word	0x08004591
 8004140:	08004591 	.word	0x08004591
 8004144:	08004591 	.word	0x08004591
 8004148:	08004591 	.word	0x08004591
 800414c:	08004591 	.word	0x08004591
 8004150:	08004591 	.word	0x08004591
 8004154:	08004591 	.word	0x08004591
 8004158:	08004591 	.word	0x08004591
 800415c:	08004591 	.word	0x08004591
 8004160:	08004591 	.word	0x08004591
 8004164:	08004591 	.word	0x08004591
 8004168:	08004591 	.word	0x08004591
 800416c:	08004591 	.word	0x08004591
 8004170:	08004591 	.word	0x08004591
 8004174:	08004591 	.word	0x08004591
 8004178:	08004591 	.word	0x08004591
 800417c:	08004591 	.word	0x08004591
 8004180:	08004591 	.word	0x08004591
 8004184:	08004591 	.word	0x08004591
 8004188:	08004591 	.word	0x08004591
 800418c:	08004591 	.word	0x08004591
 8004190:	08004591 	.word	0x08004591
 8004194:	08004591 	.word	0x08004591
 8004198:	08004591 	.word	0x08004591
 800419c:	08004591 	.word	0x08004591
 80041a0:	08004591 	.word	0x08004591
 80041a4:	08004591 	.word	0x08004591
 80041a8:	08004591 	.word	0x08004591
 80041ac:	08004591 	.word	0x08004591
 80041b0:	08004591 	.word	0x08004591
 80041b4:	08004591 	.word	0x08004591
 80041b8:	08004591 	.word	0x08004591
 80041bc:	08004591 	.word	0x08004591
 80041c0:	08004591 	.word	0x08004591
 80041c4:	08004591 	.word	0x08004591
 80041c8:	08004591 	.word	0x08004591
 80041cc:	08004591 	.word	0x08004591
 80041d0:	08004591 	.word	0x08004591
 80041d4:	08004591 	.word	0x08004591
 80041d8:	08004591 	.word	0x08004591
 80041dc:	08004591 	.word	0x08004591
 80041e0:	08004591 	.word	0x08004591
 80041e4:	08004591 	.word	0x08004591
 80041e8:	08004591 	.word	0x08004591
 80041ec:	08004591 	.word	0x08004591
 80041f0:	08004591 	.word	0x08004591
 80041f4:	08004591 	.word	0x08004591
 80041f8:	08004591 	.word	0x08004591
 80041fc:	08004591 	.word	0x08004591
 8004200:	080044e1 	.word	0x080044e1
 8004204:	080044e1 	.word	0x080044e1
 8004208:	08004591 	.word	0x08004591
 800420c:	08004591 	.word	0x08004591
 8004210:	08004591 	.word	0x08004591
 8004214:	08004591 	.word	0x08004591
 8004218:	08004591 	.word	0x08004591
 800421c:	08004591 	.word	0x08004591
 8004220:	08004591 	.word	0x08004591
 8004224:	08004591 	.word	0x08004591
 8004228:	08004591 	.word	0x08004591
 800422c:	08004591 	.word	0x08004591
 8004230:	08004591 	.word	0x08004591
//	  	 case 0: // STOP handled in UART IRQ directly
//	  	  	  break;
	  	 case 1: //FW
	  	 case 2: //BW
	  		curTask = curCmd.index == 1 ? TASK_MOVE : TASK_MOVE_BACKWARD;
 8004234:	4b5d      	ldr	r3, [pc, #372]	@ (80043ac <runCmdTask+0x324>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	4b5a      	ldr	r3, [pc, #360]	@ (80043b0 <runCmdTask+0x328>)
 8004246:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004248:	4b58      	ldr	r3, [pc, #352]	@ (80043ac <runCmdTask+0x324>)
 800424a:	2263      	movs	r2, #99	@ 0x63
 800424c:	701a      	strb	r2, [r3, #0]
	  		 break;
 800424e:	e1a0      	b.n	8004592 <runCmdTask+0x50a>
	  	case 3: //FL manual
		case 4: //FR manual
		case 5: //BL manual
		case 6: //BR manual
			__SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8004250:	4b56      	ldr	r3, [pc, #344]	@ (80043ac <runCmdTask+0x324>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	4a57      	ldr	r2, [pc, #348]	@ (80043b4 <runCmdTask+0x32c>)
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	4413      	add	r3, r2
 800425a:	3304      	adds	r3, #4
 800425c:	edd3 7a00 	vldr	s15, [r3]
 8004260:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80043b8 <runCmdTask+0x330>
 8004264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	dd01      	ble.n	8004272 <runCmdTask+0x1ea>
 800426e:	2375      	movs	r3, #117	@ 0x75
 8004270:	e01c      	b.n	80042ac <runCmdTask+0x224>
 8004272:	4b4e      	ldr	r3, [pc, #312]	@ (80043ac <runCmdTask+0x324>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	4a4f      	ldr	r2, [pc, #316]	@ (80043b4 <runCmdTask+0x32c>)
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	4413      	add	r3, r2
 800427c:	3304      	adds	r3, #4
 800427e:	edd3 7a00 	vldr	s15, [r3]
 8004282:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80043bc <runCmdTask+0x334>
 8004286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428e:	d501      	bpl.n	8004294 <runCmdTask+0x20c>
 8004290:	2330      	movs	r3, #48	@ 0x30
 8004292:	e00b      	b.n	80042ac <runCmdTask+0x224>
 8004294:	4b45      	ldr	r3, [pc, #276]	@ (80043ac <runCmdTask+0x324>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	4a46      	ldr	r2, [pc, #280]	@ (80043b4 <runCmdTask+0x32c>)
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	4413      	add	r3, r2
 800429e:	3304      	adds	r3, #4
 80042a0:	edd3 7a00 	vldr	s15, [r3]
 80042a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a8:	ee17 3a90 	vmov	r3, s15
 80042ac:	4a44      	ldr	r2, [pc, #272]	@ (80043c0 <runCmdTask+0x338>)
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042b2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80042b6:	f003 f84d 	bl	8007354 <HAL_Delay>
 80042ba:	4b3c      	ldr	r3, [pc, #240]	@ (80043ac <runCmdTask+0x324>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	4a3d      	ldr	r2, [pc, #244]	@ (80043b4 <runCmdTask+0x32c>)
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	4413      	add	r3, r2
 80042c4:	3308      	adds	r3, #8
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a3e      	ldr	r2, [pc, #248]	@ (80043c4 <runCmdTask+0x33c>)
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b37      	ldr	r3, [pc, #220]	@ (80043ac <runCmdTask+0x324>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	4a38      	ldr	r2, [pc, #224]	@ (80043b4 <runCmdTask+0x32c>)
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	4413      	add	r3, r2
 80042d6:	330c      	adds	r3, #12
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	2104      	movs	r1, #4
 80042e8:	4837      	ldr	r0, [pc, #220]	@ (80043c8 <runCmdTask+0x340>)
 80042ea:	f004 f8cf 	bl	800848c <HAL_GPIO_WritePin>
 80042ee:	4b2f      	ldr	r3, [pc, #188]	@ (80043ac <runCmdTask+0x324>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	4a30      	ldr	r2, [pc, #192]	@ (80043b4 <runCmdTask+0x32c>)
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	4413      	add	r3, r2
 80042f8:	330c      	adds	r3, #12
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf14      	ite	ne
 8004300:	2301      	movne	r3, #1
 8004302:	2300      	moveq	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	2108      	movs	r1, #8
 800430a:	482f      	ldr	r0, [pc, #188]	@ (80043c8 <runCmdTask+0x340>)
 800430c:	f004 f8be 	bl	800848c <HAL_GPIO_WritePin>
 8004310:	4b26      	ldr	r3, [pc, #152]	@ (80043ac <runCmdTask+0x324>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4a27      	ldr	r2, [pc, #156]	@ (80043b4 <runCmdTask+0x32c>)
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	4413      	add	r3, r2
 800431a:	330c      	adds	r3, #12
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf0c      	ite	eq
 8004322:	2301      	moveq	r3, #1
 8004324:	2300      	movne	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	2120      	movs	r1, #32
 800432c:	4826      	ldr	r0, [pc, #152]	@ (80043c8 <runCmdTask+0x340>)
 800432e:	f004 f8ad 	bl	800848c <HAL_GPIO_WritePin>
 8004332:	4b1e      	ldr	r3, [pc, #120]	@ (80043ac <runCmdTask+0x324>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	4a1f      	ldr	r2, [pc, #124]	@ (80043b4 <runCmdTask+0x32c>)
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	4413      	add	r3, r2
 800433c:	330c      	adds	r3, #12
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
 8004346:	2300      	moveq	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	2110      	movs	r1, #16
 800434e:	481e      	ldr	r0, [pc, #120]	@ (80043c8 <runCmdTask+0x340>)
 8004350:	f004 f89c 	bl	800848c <HAL_GPIO_WritePin>
 8004354:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <runCmdTask+0x324>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	4a16      	ldr	r2, [pc, #88]	@ (80043b4 <runCmdTask+0x32c>)
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	4413      	add	r3, r2
 800435e:	881a      	ldrh	r2, [r3, #0]
 8004360:	4b1a      	ldr	r3, [pc, #104]	@ (80043cc <runCmdTask+0x344>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	635a      	str	r2, [r3, #52]	@ 0x34
 8004366:	4b11      	ldr	r3, [pc, #68]	@ (80043ac <runCmdTask+0x324>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	4a12      	ldr	r2, [pc, #72]	@ (80043b4 <runCmdTask+0x32c>)
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	4413      	add	r3, r2
 8004370:	3302      	adds	r3, #2
 8004372:	881a      	ldrh	r2, [r3, #0]
 8004374:	4b15      	ldr	r3, [pc, #84]	@ (80043cc <runCmdTask+0x344>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	639a      	str	r2, [r3, #56]	@ 0x38
			if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800437a:	4b15      	ldr	r3, [pc, #84]	@ (80043d0 <runCmdTask+0x348>)
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <runCmdTask+0x348>)
 8004380:	785b      	ldrb	r3, [r3, #1]
 8004382:	429a      	cmp	r2, r3
 8004384:	d12e      	bne.n	80043e4 <runCmdTask+0x35c>
				__CLEAR_CURCMD(curCmd);
 8004386:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <runCmdTask+0x324>)
 8004388:	2264      	movs	r2, #100	@ 0x64
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	4b07      	ldr	r3, [pc, #28]	@ (80043ac <runCmdTask+0x324>)
 800438e:	2200      	movs	r2, #0
 8004390:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8004392:	4a10      	ldr	r2, [pc, #64]	@ (80043d4 <runCmdTask+0x34c>)
 8004394:	210f      	movs	r1, #15
 8004396:	4810      	ldr	r0, [pc, #64]	@ (80043d8 <runCmdTask+0x350>)
 8004398:	f00b fd52 	bl	800fe40 <sniprintf>
 800439c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043a0:	2206      	movs	r2, #6
 80043a2:	490e      	ldr	r1, [pc, #56]	@ (80043dc <runCmdTask+0x354>)
 80043a4:	480e      	ldr	r0, [pc, #56]	@ (80043e0 <runCmdTask+0x358>)
 80043a6:	f007 fa98 	bl	800b8da <HAL_UART_Transmit>
 80043aa:	e035      	b.n	8004418 <runCmdTask+0x390>
 80043ac:	20000690 	.word	0x20000690
 80043b0:	20000134 	.word	0x20000134
 80043b4:	20000004 	.word	0x20000004
 80043b8:	42ea0000 	.word	0x42ea0000
 80043bc:	42400000 	.word	0x42400000
 80043c0:	20000420 	.word	0x20000420
 80043c4:	200006a8 	.word	0x200006a8
 80043c8:	40020000 	.word	0x40020000
 80043cc:	20000588 	.word	0x20000588
 80043d0:	2000065c 	.word	0x2000065c
 80043d4:	08013104 	.word	0x08013104
 80043d8:	20000694 	.word	0x20000694
 80043dc:	0801310c 	.word	0x0801310c
 80043e0:	200005d0 	.word	0x200005d0
			} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80043e4:	4b6d      	ldr	r3, [pc, #436]	@ (800459c <runCmdTask+0x514>)
 80043e6:	785b      	ldrb	r3, [r3, #1]
 80043e8:	4a6d      	ldr	r2, [pc, #436]	@ (80045a0 <runCmdTask+0x518>)
 80043ea:	496c      	ldr	r1, [pc, #432]	@ (800459c <runCmdTask+0x514>)
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b69      	ldr	r3, [pc, #420]	@ (800459c <runCmdTask+0x514>)
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	3301      	adds	r3, #1
 80043fa:	4a68      	ldr	r2, [pc, #416]	@ (800459c <runCmdTask+0x514>)
 80043fc:	7892      	ldrb	r2, [r2, #2]
 80043fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8004402:	fb01 f202 	mul.w	r2, r1, r2
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4b64      	ldr	r3, [pc, #400]	@ (800459c <runCmdTask+0x514>)
 800440c:	705a      	strb	r2, [r3, #1]
 800440e:	4a65      	ldr	r2, [pc, #404]	@ (80045a4 <runCmdTask+0x51c>)
 8004410:	210f      	movs	r1, #15
 8004412:	4865      	ldr	r0, [pc, #404]	@ (80045a8 <runCmdTask+0x520>)
 8004414:	f00b fd14 	bl	800fe40 <sniprintf>
			__PEND_CURCMD(curCmd);
 8004418:	4b61      	ldr	r3, [pc, #388]	@ (80045a0 <runCmdTask+0x518>)
 800441a:	2263      	movs	r2, #99	@ 0x63
 800441c:	701a      	strb	r2, [r3, #0]
			 break;
 800441e:	e0b8      	b.n	8004592 <runCmdTask+0x50a>
	  	 case 7: // FL
	  		 curTask = TASK_FL;
 8004420:	4b62      	ldr	r3, [pc, #392]	@ (80045ac <runCmdTask+0x524>)
 8004422:	2202      	movs	r2, #2
 8004424:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004426:	4b5e      	ldr	r3, [pc, #376]	@ (80045a0 <runCmdTask+0x518>)
 8004428:	2263      	movs	r2, #99	@ 0x63
 800442a:	701a      	strb	r2, [r3, #0]
	  		 break;
 800442c:	e0b1      	b.n	8004592 <runCmdTask+0x50a>
	  	 case 8: // FR
	  		curTask = TASK_FR;
 800442e:	4b5f      	ldr	r3, [pc, #380]	@ (80045ac <runCmdTask+0x524>)
 8004430:	2203      	movs	r2, #3
 8004432:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004434:	4b5a      	ldr	r3, [pc, #360]	@ (80045a0 <runCmdTask+0x518>)
 8004436:	2263      	movs	r2, #99	@ 0x63
 8004438:	701a      	strb	r2, [r3, #0]
	  		break;
 800443a:	e0aa      	b.n	8004592 <runCmdTask+0x50a>
	  	 case 9: // BL
	  		curTask = TASK_BL;
 800443c:	4b5b      	ldr	r3, [pc, #364]	@ (80045ac <runCmdTask+0x524>)
 800443e:	2204      	movs	r2, #4
 8004440:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004442:	4b57      	ldr	r3, [pc, #348]	@ (80045a0 <runCmdTask+0x518>)
 8004444:	2263      	movs	r2, #99	@ 0x63
 8004446:	701a      	strb	r2, [r3, #0]
	  		break;
 8004448:	e0a3      	b.n	8004592 <runCmdTask+0x50a>
	  	 case 10: //BR
	  		curTask = TASK_BR;
 800444a:	4b58      	ldr	r3, [pc, #352]	@ (80045ac <runCmdTask+0x524>)
 800444c:	2205      	movs	r2, #5
 800444e:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004450:	4b53      	ldr	r3, [pc, #332]	@ (80045a0 <runCmdTask+0x518>)
 8004452:	2263      	movs	r2, #99	@ 0x63
 8004454:	701a      	strb	r2, [r3, #0]
	  		break;
 8004456:	e09c      	b.n	8004592 <runCmdTask+0x50a>
	  	 case 11: // TL
	  	 case 12: // TR
	  		 __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8004458:	4b51      	ldr	r3, [pc, #324]	@ (80045a0 <runCmdTask+0x518>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b0b      	cmp	r3, #11
 800445e:	d004      	beq.n	800446a <runCmdTask+0x3e2>
 8004460:	4b53      	ldr	r3, [pc, #332]	@ (80045b0 <runCmdTask+0x528>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2275      	movs	r2, #117	@ 0x75
 8004466:	641a      	str	r2, [r3, #64]	@ 0x40
 8004468:	e003      	b.n	8004472 <runCmdTask+0x3ea>
 800446a:	4b51      	ldr	r3, [pc, #324]	@ (80045b0 <runCmdTask+0x528>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2230      	movs	r2, #48	@ 0x30
 8004470:	641a      	str	r2, [r3, #64]	@ 0x40
 8004472:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004476:	f002 ff6d 	bl	8007354 <HAL_Delay>
	  		__CLEAR_CURCMD(curCmd);
 800447a:	4b49      	ldr	r3, [pc, #292]	@ (80045a0 <runCmdTask+0x518>)
 800447c:	2264      	movs	r2, #100	@ 0x64
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	4b47      	ldr	r3, [pc, #284]	@ (80045a0 <runCmdTask+0x518>)
 8004482:	2200      	movs	r2, #0
 8004484:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8004486:	4a4b      	ldr	r2, [pc, #300]	@ (80045b4 <runCmdTask+0x52c>)
 8004488:	210f      	movs	r1, #15
 800448a:	4847      	ldr	r0, [pc, #284]	@ (80045a8 <runCmdTask+0x520>)
 800448c:	f00b fcd8 	bl	800fe40 <sniprintf>
 8004490:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004494:	2206      	movs	r2, #6
 8004496:	4948      	ldr	r1, [pc, #288]	@ (80045b8 <runCmdTask+0x530>)
 8004498:	4848      	ldr	r0, [pc, #288]	@ (80045bc <runCmdTask+0x534>)
 800449a:	f007 fa1e 	bl	800b8da <HAL_UART_Transmit>
	  		 break;
 800449e:	e078      	b.n	8004592 <runCmdTask+0x50a>
	  	 case 13: // debug IR sensor
	  		 curTask = TASK_ADC;
 80044a0:	4b42      	ldr	r3, [pc, #264]	@ (80045ac <runCmdTask+0x524>)
 80044a2:	2206      	movs	r2, #6
 80044a4:	701a      	strb	r2, [r3, #0]
	  		 break;
 80044a6:	e074      	b.n	8004592 <runCmdTask+0x50a>
	  	 case 14: // DT move until specified distance from obstacle
	  		  curTask = TASK_MOVE_OBS;
 80044a8:	4b40      	ldr	r3, [pc, #256]	@ (80045ac <runCmdTask+0x524>)
 80044aa:	2207      	movs	r2, #7
 80044ac:	701a      	strb	r2, [r3, #0]
	  		  __PEND_CURCMD(curCmd);
 80044ae:	4b3c      	ldr	r3, [pc, #240]	@ (80045a0 <runCmdTask+0x518>)
 80044b0:	2263      	movs	r2, #99	@ 0x63
 80044b2:	701a      	strb	r2, [r3, #0]
	  		 break;
 80044b4:	e06d      	b.n	8004592 <runCmdTask+0x50a>
	  	 case 15:
	  		 curTask = TASK_BUZZER;
 80044b6:	4b3d      	ldr	r3, [pc, #244]	@ (80045ac <runCmdTask+0x524>)
 80044b8:	220a      	movs	r2, #10
 80044ba:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 80044bc:	4b38      	ldr	r3, [pc, #224]	@ (80045a0 <runCmdTask+0x518>)
 80044be:	2263      	movs	r2, #99	@ 0x63
 80044c0:	701a      	strb	r2, [r3, #0]
	  		break;
 80044c2:	e066      	b.n	8004592 <runCmdTask+0x50a>
	  	 case 16:
	  		 curTask = TASK_FASTESTPATH;
 80044c4:	4b39      	ldr	r3, [pc, #228]	@ (80045ac <runCmdTask+0x524>)
 80044c6:	2208      	movs	r2, #8
 80044c8:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 80044ca:	4b35      	ldr	r3, [pc, #212]	@ (80045a0 <runCmdTask+0x518>)
 80044cc:	2263      	movs	r2, #99	@ 0x63
 80044ce:	701a      	strb	r2, [r3, #0]
	  		 break;
 80044d0:	e05f      	b.n	8004592 <runCmdTask+0x50a>
	  	 case 17:
	  		 curTask = TASK_FASTESTPATH_V2;
 80044d2:	4b36      	ldr	r3, [pc, #216]	@ (80045ac <runCmdTask+0x524>)
 80044d4:	2209      	movs	r2, #9
 80044d6:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 80044d8:	4b31      	ldr	r3, [pc, #196]	@ (80045a0 <runCmdTask+0x518>)
 80044da:	2263      	movs	r2, #99	@ 0x63
 80044dc:	701a      	strb	r2, [r3, #0]
	  		 break;
 80044de:	e058      	b.n	8004592 <runCmdTask+0x50a>
	  	 case 88: // Axxx, rotate left by xxx degree
	  	 case 89: // Cxxx, rotate right by xxx degree
	  		 __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 80044e0:	4b2f      	ldr	r3, [pc, #188]	@ (80045a0 <runCmdTask+0x518>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b58      	cmp	r3, #88	@ 0x58
 80044e6:	d004      	beq.n	80044f2 <runCmdTask+0x46a>
 80044e8:	4b31      	ldr	r3, [pc, #196]	@ (80045b0 <runCmdTask+0x528>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2275      	movs	r2, #117	@ 0x75
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80044f0:	e003      	b.n	80044fa <runCmdTask+0x472>
 80044f2:	4b2f      	ldr	r3, [pc, #188]	@ (80045b0 <runCmdTask+0x528>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2230      	movs	r2, #48	@ 0x30
 80044f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80044fa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80044fe:	f002 ff29 	bl	8007354 <HAL_Delay>
	  		 __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8004502:	2200      	movs	r2, #0
 8004504:	2104      	movs	r1, #4
 8004506:	482e      	ldr	r0, [pc, #184]	@ (80045c0 <runCmdTask+0x538>)
 8004508:	f003 ffc0 	bl	800848c <HAL_GPIO_WritePin>
 800450c:	2201      	movs	r2, #1
 800450e:	2108      	movs	r1, #8
 8004510:	482b      	ldr	r0, [pc, #172]	@ (80045c0 <runCmdTask+0x538>)
 8004512:	f003 ffbb 	bl	800848c <HAL_GPIO_WritePin>
 8004516:	2200      	movs	r2, #0
 8004518:	2120      	movs	r1, #32
 800451a:	4829      	ldr	r0, [pc, #164]	@ (80045c0 <runCmdTask+0x538>)
 800451c:	f003 ffb6 	bl	800848c <HAL_GPIO_WritePin>
 8004520:	2201      	movs	r2, #1
 8004522:	2110      	movs	r1, #16
 8004524:	4826      	ldr	r0, [pc, #152]	@ (80045c0 <runCmdTask+0x538>)
 8004526:	f003 ffb1 	bl	800848c <HAL_GPIO_WritePin>
	  		 if (curCmd.index == 88) {
 800452a:	4b1d      	ldr	r3, [pc, #116]	@ (80045a0 <runCmdTask+0x518>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b58      	cmp	r3, #88	@ 0x58
 8004530:	d113      	bne.n	800455a <runCmdTask+0x4d2>
	  			 targetAngle = curCmd.val;
 8004532:	4b1b      	ldr	r3, [pc, #108]	@ (80045a0 <runCmdTask+0x518>)
 8004534:	885b      	ldrh	r3, [r3, #2]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	4b21      	ldr	r3, [pc, #132]	@ (80045c4 <runCmdTask+0x53c>)
 8004540:	edc3 7a00 	vstr	s15, [r3]
	  			 __SET_MOTOR_DUTY(&htim8, 800, 1200);
 8004544:	4b20      	ldr	r3, [pc, #128]	@ (80045c8 <runCmdTask+0x540>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800454c:	635a      	str	r2, [r3, #52]	@ 0x34
 800454e:	4b1e      	ldr	r3, [pc, #120]	@ (80045c8 <runCmdTask+0x540>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8004556:	639a      	str	r2, [r3, #56]	@ 0x38
 8004558:	e013      	b.n	8004582 <runCmdTask+0x4fa>
	  		 } else {
	  			targetAngle = -curCmd.val;
 800455a:	4b11      	ldr	r3, [pc, #68]	@ (80045a0 <runCmdTask+0x518>)
 800455c:	885b      	ldrh	r3, [r3, #2]
 800455e:	425b      	negs	r3, r3
 8004560:	ee07 3a90 	vmov	s15, r3
 8004564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004568:	4b16      	ldr	r3, [pc, #88]	@ (80045c4 <runCmdTask+0x53c>)
 800456a:	edc3 7a00 	vstr	s15, [r3]
	  			 __SET_MOTOR_DUTY(&htim8, 1200, 800);
 800456e:	4b16      	ldr	r3, [pc, #88]	@ (80045c8 <runCmdTask+0x540>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8004576:	635a      	str	r2, [r3, #52]	@ 0x34
 8004578:	4b13      	ldr	r3, [pc, #76]	@ (80045c8 <runCmdTask+0x540>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004580:	639a      	str	r2, [r3, #56]	@ 0x38
	  		 }
	  		__PEND_CURCMD(curCmd);
 8004582:	4b07      	ldr	r3, [pc, #28]	@ (80045a0 <runCmdTask+0x518>)
 8004584:	2263      	movs	r2, #99	@ 0x63
 8004586:	701a      	strb	r2, [r3, #0]
	  		 RobotTurn(&targetAngle);
 8004588:	480e      	ldr	r0, [pc, #56]	@ (80045c4 <runCmdTask+0x53c>)
 800458a:	f7ff f8bd 	bl	8003708 <RobotTurn>
	  		 break;
 800458e:	e000      	b.n	8004592 <runCmdTask+0x50a>
	  		 break;
	  	 case 100:
	  		 break;
	  	 default:
	  //		 curCmd.index = 99;
	  		 break;
 8004590:	bf00      	nop
	  	 }

	  osDelay(100);
 8004592:	2064      	movs	r0, #100	@ 0x64
 8004594:	f008 fadc 	bl	800cb50 <osDelay>
 	  switch(curCmd.index) {
 8004598:	e57a      	b.n	8004090 <runCmdTask+0x8>
 800459a:	bf00      	nop
 800459c:	2000065c 	.word	0x2000065c
 80045a0:	20000690 	.word	0x20000690
 80045a4:	08013114 	.word	0x08013114
 80045a8:	20000694 	.word	0x20000694
 80045ac:	20000134 	.word	0x20000134
 80045b0:	20000420 	.word	0x20000420
 80045b4:	08013104 	.word	0x08013104
 80045b8:	0801310c 	.word	0x0801310c
 80045bc:	200005d0 	.word	0x200005d0
 80045c0:	40020000 	.word	0x40020000
 80045c4:	200006a8 	.word	0x200006a8
 80045c8:	20000588 	.word	0x20000588

080045cc <runADCTask>:
* Greedy Task (can only preempted by UART IRQ or EXTI)
* When activate (curTask == TASK_ADC), function executes in 1MHz
*/
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
	uint16_t dataPoint = 0; uint32_t IR_data_raw_acc = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	81fb      	strh	r3, [r7, #14]
 80045d8:	2300      	movs	r3, #0
 80045da:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_ADC) osDelay(1000);
 80045dc:	4b27      	ldr	r3, [pc, #156]	@ (800467c <runADCTask+0xb0>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b06      	cmp	r3, #6
 80045e2:	d004      	beq.n	80045ee <runADCTask+0x22>
 80045e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80045e8:	f008 fab2 	bl	800cb50 <osDelay>
 80045ec:	e7f6      	b.n	80045dc <runADCTask+0x10>
	  else {
//			dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
//			last_curTask_tick = HAL_GetTick();
			__PEND_CURCMD(curCmd);
 80045ee:	4b24      	ldr	r3, [pc, #144]	@ (8004680 <runADCTask+0xb4>)
 80045f0:	2263      	movs	r2, #99	@ 0x63
 80045f2:	701a      	strb	r2, [r3, #0]
			targetDist = 40;
 80045f4:	4b23      	ldr	r3, [pc, #140]	@ (8004684 <runADCTask+0xb8>)
 80045f6:	4a24      	ldr	r2, [pc, #144]	@ (8004688 <runADCTask+0xbc>)
 80045f8:	601a      	str	r2, [r3, #0]
			RobotMoveDistObstacle_IR(&targetDist);
 80045fa:	4822      	ldr	r0, [pc, #136]	@ (8004684 <runADCTask+0xb8>)
 80045fc:	f7fe ff18 	bl	8003430 <RobotMoveDistObstacle_IR>
//			  osDelay(5);
//			} while (1);
//
//		  __ON_TASK_END(&htim8, prevTask, curTask);
//		  HAL_ADC_Stop(&hadc1);
		  clickOnce = 0;
 8004600:	4b22      	ldr	r3, [pc, #136]	@ (800468c <runADCTask+0xc0>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004606:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <runADCTask+0xb0>)
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	4b21      	ldr	r3, [pc, #132]	@ (8004690 <runADCTask+0xc4>)
 800460c:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 800460e:	4b1b      	ldr	r3, [pc, #108]	@ (800467c <runADCTask+0xb0>)
 8004610:	220b      	movs	r2, #11
 8004612:	701a      	strb	r2, [r3, #0]
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004614:	4b1f      	ldr	r3, [pc, #124]	@ (8004694 <runADCTask+0xc8>)
 8004616:	781a      	ldrb	r2, [r3, #0]
 8004618:	4b1e      	ldr	r3, [pc, #120]	@ (8004694 <runADCTask+0xc8>)
 800461a:	785b      	ldrb	r3, [r3, #1]
 800461c:	429a      	cmp	r2, r3
 800461e:	d112      	bne.n	8004646 <runADCTask+0x7a>
			__CLEAR_CURCMD(curCmd);
 8004620:	4b17      	ldr	r3, [pc, #92]	@ (8004680 <runADCTask+0xb4>)
 8004622:	2264      	movs	r2, #100	@ 0x64
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	4b16      	ldr	r3, [pc, #88]	@ (8004680 <runADCTask+0xb4>)
 8004628:	2200      	movs	r2, #0
 800462a:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 800462c:	4a1a      	ldr	r2, [pc, #104]	@ (8004698 <runADCTask+0xcc>)
 800462e:	210f      	movs	r1, #15
 8004630:	481a      	ldr	r0, [pc, #104]	@ (800469c <runADCTask+0xd0>)
 8004632:	f00b fc05 	bl	800fe40 <sniprintf>
 8004636:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800463a:	2206      	movs	r2, #6
 800463c:	4918      	ldr	r1, [pc, #96]	@ (80046a0 <runADCTask+0xd4>)
 800463e:	4819      	ldr	r0, [pc, #100]	@ (80046a4 <runADCTask+0xd8>)
 8004640:	f007 f94b 	bl	800b8da <HAL_UART_Transmit>
 8004644:	e7ca      	b.n	80045dc <runADCTask+0x10>

		} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004646:	4b13      	ldr	r3, [pc, #76]	@ (8004694 <runADCTask+0xc8>)
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	4a0d      	ldr	r2, [pc, #52]	@ (8004680 <runADCTask+0xb4>)
 800464c:	4911      	ldr	r1, [pc, #68]	@ (8004694 <runADCTask+0xc8>)
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4b0f      	ldr	r3, [pc, #60]	@ (8004694 <runADCTask+0xc8>)
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	3301      	adds	r3, #1
 800465c:	4a0d      	ldr	r2, [pc, #52]	@ (8004694 <runADCTask+0xc8>)
 800465e:	7892      	ldrb	r2, [r2, #2]
 8004660:	fb93 f1f2 	sdiv	r1, r3, r2
 8004664:	fb01 f202 	mul.w	r2, r1, r2
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	b2da      	uxtb	r2, r3
 800466c:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <runADCTask+0xc8>)
 800466e:	705a      	strb	r2, [r3, #1]
 8004670:	4a0d      	ldr	r2, [pc, #52]	@ (80046a8 <runADCTask+0xdc>)
 8004672:	210f      	movs	r1, #15
 8004674:	4809      	ldr	r0, [pc, #36]	@ (800469c <runADCTask+0xd0>)
 8004676:	f00b fbe3 	bl	800fe40 <sniprintf>
	  if (curTask != TASK_ADC) osDelay(1000);
 800467a:	e7af      	b.n	80045dc <runADCTask+0x10>
 800467c:	20000134 	.word	0x20000134
 8004680:	20000690 	.word	0x20000690
 8004684:	200006bc 	.word	0x200006bc
 8004688:	42200000 	.word	0x42200000
 800468c:	20000754 	.word	0x20000754
 8004690:	20000135 	.word	0x20000135
 8004694:	2000065c 	.word	0x2000065c
 8004698:	08013104 	.word	0x08013104
 800469c:	20000694 	.word	0x20000694
 80046a0:	0801310c 	.word	0x0801310c
 80046a4:	200005d0 	.word	0x200005d0
 80046a8:	08013114 	.word	0x08013114

080046ac <runMoveDistTask>:
* @retval None
* Greedy Task (can only preempted by UART IRQ or EXTI)
*/
/* USER CODE END Header_runMoveDistTask */
void runMoveDistTask(void *argument)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 80046b4:	4b85      	ldr	r3, [pc, #532]	@ (80048cc <runMoveDistTask+0x220>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <runMoveDistTask+0x22>
 80046bc:	4b83      	ldr	r3, [pc, #524]	@ (80048cc <runMoveDistTask+0x220>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d004      	beq.n	80046ce <runMoveDistTask+0x22>
 80046c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046c8:	f008 fa42 	bl	800cb50 <osDelay>
 80046cc:	e0fc      	b.n	80048c8 <runMoveDistTask+0x21c>
	  else {
		  if (manualMode) {
 80046ce:	4b80      	ldr	r3, [pc, #512]	@ (80048d0 <runMoveDistTask+0x224>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d07e      	beq.n	80047d4 <runMoveDistTask+0x128>
			  angleNow = 0; gyroZ = 0; // reset angle for PID
 80046d6:	4b7f      	ldr	r3, [pc, #508]	@ (80048d4 <runMoveDistTask+0x228>)
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	4b7e      	ldr	r3, [pc, #504]	@ (80048d8 <runMoveDistTask+0x22c>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	801a      	strh	r2, [r3, #0]
			PIDConfigReset(&pidTSlow);
 80046e4:	487d      	ldr	r0, [pc, #500]	@ (80048dc <runMoveDistTask+0x230>)
 80046e6:	f7fe f868 	bl	80027ba <PIDConfigReset>
			PIDConfigReset(&pidSlow);
 80046ea:	487d      	ldr	r0, [pc, #500]	@ (80048e0 <runMoveDistTask+0x234>)
 80046ec:	f7fe f865 	bl	80027ba <PIDConfigReset>
			PIDConfigReset(&pidFast);
 80046f0:	487c      	ldr	r0, [pc, #496]	@ (80048e4 <runMoveDistTask+0x238>)
 80046f2:	f7fe f862 	bl	80027ba <PIDConfigReset>

			__SET_MOTOR_DIRECTION(curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD);
 80046f6:	4b75      	ldr	r3, [pc, #468]	@ (80048cc <runMoveDistTask+0x220>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bf14      	ite	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	2300      	moveq	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	2104      	movs	r1, #4
 8004708:	4877      	ldr	r0, [pc, #476]	@ (80048e8 <runMoveDistTask+0x23c>)
 800470a:	f003 febf 	bl	800848c <HAL_GPIO_WritePin>
 800470e:	4b6f      	ldr	r3, [pc, #444]	@ (80048cc <runMoveDistTask+0x220>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	2108      	movs	r1, #8
 8004720:	4871      	ldr	r0, [pc, #452]	@ (80048e8 <runMoveDistTask+0x23c>)
 8004722:	f003 feb3 	bl	800848c <HAL_GPIO_WritePin>
 8004726:	4b69      	ldr	r3, [pc, #420]	@ (80048cc <runMoveDistTask+0x220>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	bf14      	ite	ne
 800472e:	2301      	movne	r3, #1
 8004730:	2300      	moveq	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	2120      	movs	r1, #32
 8004738:	486b      	ldr	r0, [pc, #428]	@ (80048e8 <runMoveDistTask+0x23c>)
 800473a:	f003 fea7 	bl	800848c <HAL_GPIO_WritePin>
 800473e:	4b63      	ldr	r3, [pc, #396]	@ (80048cc <runMoveDistTask+0x220>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	2110      	movs	r1, #16
 8004750:	4865      	ldr	r0, [pc, #404]	@ (80048e8 <runMoveDistTask+0x23c>)
 8004752:	f003 fe9b 	bl	800848c <HAL_GPIO_WritePin>

			  __ON_TASK_END(&htim8, prevTask, curTask);
 8004756:	4b65      	ldr	r3, [pc, #404]	@ (80048ec <runMoveDistTask+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2200      	movs	r2, #0
 800475c:	635a      	str	r2, [r3, #52]	@ 0x34
 800475e:	4b63      	ldr	r3, [pc, #396]	@ (80048ec <runMoveDistTask+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	639a      	str	r2, [r3, #56]	@ 0x38
 8004766:	4b59      	ldr	r3, [pc, #356]	@ (80048cc <runMoveDistTask+0x220>)
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	4b61      	ldr	r3, [pc, #388]	@ (80048f0 <runMoveDistTask+0x244>)
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	4b57      	ldr	r3, [pc, #348]	@ (80048cc <runMoveDistTask+0x220>)
 8004770:	220b      	movs	r2, #11
 8004772:	701a      	strb	r2, [r3, #0]
			  clickOnce = 0;
 8004774:	4b5f      	ldr	r3, [pc, #380]	@ (80048f4 <runMoveDistTask+0x248>)
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]

			  __CLEAR_CURCMD(curCmd);
 800477a:	4b5f      	ldr	r3, [pc, #380]	@ (80048f8 <runMoveDistTask+0x24c>)
 800477c:	2264      	movs	r2, #100	@ 0x64
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	4b5d      	ldr	r3, [pc, #372]	@ (80048f8 <runMoveDistTask+0x24c>)
 8004782:	2200      	movs	r2, #0
 8004784:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8004786:	4a5d      	ldr	r2, [pc, #372]	@ (80048fc <runMoveDistTask+0x250>)
 8004788:	210f      	movs	r1, #15
 800478a:	485d      	ldr	r0, [pc, #372]	@ (8004900 <runMoveDistTask+0x254>)
 800478c:	f00b fb58 	bl	800fe40 <sniprintf>
 8004790:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004794:	2206      	movs	r2, #6
 8004796:	495b      	ldr	r1, [pc, #364]	@ (8004904 <runMoveDistTask+0x258>)
 8004798:	485b      	ldr	r0, [pc, #364]	@ (8004908 <runMoveDistTask+0x25c>)
 800479a:	f007 f89e 	bl	800b8da <HAL_UART_Transmit>

			last_curTask_tick = HAL_GetTick();
 800479e:	f002 fdcd 	bl	800733c <HAL_GetTick>
 80047a2:	4603      	mov	r3, r0
 80047a4:	4a59      	ldr	r2, [pc, #356]	@ (800490c <runMoveDistTask+0x260>)
 80047a6:	6013      	str	r3, [r2, #0]
			do {
				if (!manualMode) break;
 80047a8:	4b49      	ldr	r3, [pc, #292]	@ (80048d0 <runMoveDistTask+0x224>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 808a 	beq.w	80048c6 <runMoveDistTask+0x21a>
				if (HAL_GetTick() - last_curTask_tick >= 10) {
 80047b2:	f002 fdc3 	bl	800733c <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	4b54      	ldr	r3, [pc, #336]	@ (800490c <runMoveDistTask+0x260>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b09      	cmp	r3, #9
 80047c0:	d9f2      	bls.n	80047a8 <runMoveDistTask+0xfc>
					StraightLineMove(SPEED_MODE_T);
 80047c2:	2000      	movs	r0, #0
 80047c4:	f7fe f80c 	bl	80027e0 <StraightLineMove>
					last_curTask_tick = HAL_GetTick();
 80047c8:	f002 fdb8 	bl	800733c <HAL_GetTick>
 80047cc:	4603      	mov	r3, r0
 80047ce:	4a4f      	ldr	r2, [pc, #316]	@ (800490c <runMoveDistTask+0x260>)
 80047d0:	6013      	str	r3, [r2, #0]
				if (!manualMode) break;
 80047d2:	e7e9      	b.n	80047a8 <runMoveDistTask+0xfc>
			} while (1);

		  } else {
//			  osDelay(5000); // for video demo only
			  //htim1.Instance->CCR4 = 140; // Center wheel POS
			  targetDist = (float) curCmd.val;
 80047d4:	4b48      	ldr	r3, [pc, #288]	@ (80048f8 <runMoveDistTask+0x24c>)
 80047d6:	885b      	ldrh	r3, [r3, #2]
 80047d8:	ee07 3a90 	vmov	s15, r3
 80047dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004910 <runMoveDistTask+0x264>)
 80047e2:	edc3 7a00 	vstr	s15, [r3]
			  // for target distance lesser than 15, move mode must be forced to SLOW
			  if (targetDist <= 15) moveMode = SLOW;
 80047e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004910 <runMoveDistTask+0x264>)
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80047f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f8:	d802      	bhi.n	8004800 <runMoveDistTask+0x154>
 80047fa:	4b46      	ldr	r3, [pc, #280]	@ (8004914 <runMoveDistTask+0x268>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]

			  if (moveMode == SLOW) {
 8004800:	4b44      	ldr	r3, [pc, #272]	@ (8004914 <runMoveDistTask+0x268>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10c      	bne.n	8004822 <runMoveDistTask+0x176>
				  RobotMoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_1);
 8004808:	4b30      	ldr	r3, [pc, #192]	@ (80048cc <runMoveDistTask+0x220>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2201      	movs	r2, #1
 8004818:	4619      	mov	r1, r3
 800481a:	483d      	ldr	r0, [pc, #244]	@ (8004910 <runMoveDistTask+0x264>)
 800481c:	f7fe faf8 	bl	8002e10 <RobotMoveDist>
 8004820:	e00b      	b.n	800483a <runMoveDistTask+0x18e>
			  } else {
				  RobotMoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_2);
 8004822:	4b2a      	ldr	r3, [pc, #168]	@ (80048cc <runMoveDistTask+0x220>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	bf0c      	ite	eq
 800482a:	2301      	moveq	r3, #1
 800482c:	2300      	movne	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2202      	movs	r2, #2
 8004832:	4619      	mov	r1, r3
 8004834:	4836      	ldr	r0, [pc, #216]	@ (8004910 <runMoveDistTask+0x264>)
 8004836:	f7fe faeb 	bl	8002e10 <RobotMoveDist>
			  }

			  __ON_TASK_END(&htim8, prevTask, curTask);
 800483a:	4b2c      	ldr	r3, [pc, #176]	@ (80048ec <runMoveDistTask+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2200      	movs	r2, #0
 8004840:	635a      	str	r2, [r3, #52]	@ 0x34
 8004842:	4b2a      	ldr	r3, [pc, #168]	@ (80048ec <runMoveDistTask+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	639a      	str	r2, [r3, #56]	@ 0x38
 800484a:	4b20      	ldr	r3, [pc, #128]	@ (80048cc <runMoveDistTask+0x220>)
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	4b28      	ldr	r3, [pc, #160]	@ (80048f0 <runMoveDistTask+0x244>)
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	4b1e      	ldr	r3, [pc, #120]	@ (80048cc <runMoveDistTask+0x220>)
 8004854:	220b      	movs	r2, #11
 8004856:	701a      	strb	r2, [r3, #0]
				  clickOnce = 0;
 8004858:	4b26      	ldr	r3, [pc, #152]	@ (80048f4 <runMoveDistTask+0x248>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]

				if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800485e:	4b2e      	ldr	r3, [pc, #184]	@ (8004918 <runMoveDistTask+0x26c>)
 8004860:	781a      	ldrb	r2, [r3, #0]
 8004862:	4b2d      	ldr	r3, [pc, #180]	@ (8004918 <runMoveDistTask+0x26c>)
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	429a      	cmp	r2, r3
 8004868:	d112      	bne.n	8004890 <runMoveDistTask+0x1e4>
					__CLEAR_CURCMD(curCmd);
 800486a:	4b23      	ldr	r3, [pc, #140]	@ (80048f8 <runMoveDistTask+0x24c>)
 800486c:	2264      	movs	r2, #100	@ 0x64
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	4b21      	ldr	r3, [pc, #132]	@ (80048f8 <runMoveDistTask+0x24c>)
 8004872:	2200      	movs	r2, #0
 8004874:	805a      	strh	r2, [r3, #2]
					__ACK_TASK_DONE(&huart3, rxMsg);
 8004876:	4a21      	ldr	r2, [pc, #132]	@ (80048fc <runMoveDistTask+0x250>)
 8004878:	210f      	movs	r1, #15
 800487a:	4821      	ldr	r0, [pc, #132]	@ (8004900 <runMoveDistTask+0x254>)
 800487c:	f00b fae0 	bl	800fe40 <sniprintf>
 8004880:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004884:	2206      	movs	r2, #6
 8004886:	491f      	ldr	r1, [pc, #124]	@ (8004904 <runMoveDistTask+0x258>)
 8004888:	481f      	ldr	r0, [pc, #124]	@ (8004908 <runMoveDistTask+0x25c>)
 800488a:	f007 f826 	bl	800b8da <HAL_UART_Transmit>
 800488e:	e711      	b.n	80046b4 <runMoveDistTask+0x8>
				} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004890:	4b21      	ldr	r3, [pc, #132]	@ (8004918 <runMoveDistTask+0x26c>)
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	4a18      	ldr	r2, [pc, #96]	@ (80048f8 <runMoveDistTask+0x24c>)
 8004896:	4920      	ldr	r1, [pc, #128]	@ (8004918 <runMoveDistTask+0x26c>)
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004918 <runMoveDistTask+0x26c>)
 80048a2:	785b      	ldrb	r3, [r3, #1]
 80048a4:	3301      	adds	r3, #1
 80048a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004918 <runMoveDistTask+0x26c>)
 80048a8:	7892      	ldrb	r2, [r2, #2]
 80048aa:	fb93 f1f2 	sdiv	r1, r3, r2
 80048ae:	fb01 f202 	mul.w	r2, r1, r2
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	4b18      	ldr	r3, [pc, #96]	@ (8004918 <runMoveDistTask+0x26c>)
 80048b8:	705a      	strb	r2, [r3, #1]
 80048ba:	4a18      	ldr	r2, [pc, #96]	@ (800491c <runMoveDistTask+0x270>)
 80048bc:	210f      	movs	r1, #15
 80048be:	4810      	ldr	r0, [pc, #64]	@ (8004900 <runMoveDistTask+0x254>)
 80048c0:	f00b fabe 	bl	800fe40 <sniprintf>
 80048c4:	e6f6      	b.n	80046b4 <runMoveDistTask+0x8>
				if (!manualMode) break;
 80048c6:	bf00      	nop
	  if (curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 80048c8:	e6f4      	b.n	80046b4 <runMoveDistTask+0x8>
 80048ca:	bf00      	nop
 80048cc:	20000134 	.word	0x20000134
 80048d0:	200006a4 	.word	0x200006a4
 80048d4:	200006ac 	.word	0x200006ac
 80048d8:	200006b2 	.word	0x200006b2
 80048dc:	200006dc 	.word	0x200006dc
 80048e0:	200006c8 	.word	0x200006c8
 80048e4:	200006f0 	.word	0x200006f0
 80048e8:	40020000 	.word	0x40020000
 80048ec:	20000588 	.word	0x20000588
 80048f0:	20000135 	.word	0x20000135
 80048f4:	20000754 	.word	0x20000754
 80048f8:	20000690 	.word	0x20000690
 80048fc:	08013104 	.word	0x08013104
 8004900:	20000694 	.word	0x20000694
 8004904:	0801310c 	.word	0x0801310c
 8004908:	200005d0 	.word	0x200005d0
 800490c:	200006b8 	.word	0x200006b8
 8004910:	200006bc 	.word	0x200006bc
 8004914:	20000136 	.word	0x20000136
 8004918:	2000065c 	.word	0x2000065c
 800491c:	08013114 	.word	0x08013114

08004920 <runFastestPathTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFastestPathTask */
void runFastestPathTask(void *argument)
{
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af04      	add	r7, sp, #16
 8004926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFastestPathTask */
	uint8_t hadOvershoot = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FASTESTPATH) osDelay(1000);
 800492c:	4b84      	ldr	r3, [pc, #528]	@ (8004b40 <runFastestPathTask+0x220>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b08      	cmp	r3, #8
 8004932:	d004      	beq.n	800493e <runFastestPathTask+0x1e>
 8004934:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004938:	f008 f90a 	bl	800cb50 <osDelay>
 800493c:	e7f6      	b.n	800492c <runFastestPathTask+0xc>
	  else {
		  if (step == 0) {
 800493e:	4b81      	ldr	r3, [pc, #516]	@ (8004b44 <runFastestPathTask+0x224>)
 8004940:	f993 3000 	ldrsb.w	r3, [r3]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <runFastestPathTask+0x38>
			  targetDist = 30;
 8004948:	4b7f      	ldr	r3, [pc, #508]	@ (8004b48 <runFastestPathTask+0x228>)
 800494a:	4a80      	ldr	r2, [pc, #512]	@ (8004b4c <runFastestPathTask+0x22c>)
 800494c:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 800494e:	2102      	movs	r1, #2
 8004950:	487d      	ldr	r0, [pc, #500]	@ (8004b48 <runFastestPathTask+0x228>)
 8004952:	f7fe fbf1 	bl	8003138 <RobotMoveDistObstacle>
 8004956:	e23c      	b.n	8004dd2 <runFastestPathTask+0x4b2>
		  } else if (step == 1) {
 8004958:	4b7a      	ldr	r3, [pc, #488]	@ (8004b44 <runFastestPathTask+0x224>)
 800495a:	f993 3000 	ldrsb.w	r3, [r3]
 800495e:	2b01      	cmp	r3, #1
 8004960:	f040 8198 	bne.w	8004c94 <runFastestPathTask+0x374>
			  //2:  turn left by 90 degree, record down angle when US sensor overshoot
			  hadOvershoot = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]
			  angleNow = 0; gyroZ = 0;
 8004968:	4b79      	ldr	r3, [pc, #484]	@ (8004b50 <runFastestPathTask+0x230>)
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	4b78      	ldr	r3, [pc, #480]	@ (8004b54 <runFastestPathTask+0x234>)
 8004972:	2200      	movs	r2, #0
 8004974:	801a      	strh	r2, [r3, #0]
			  angle_left = 0;
 8004976:	4b78      	ldr	r3, [pc, #480]	@ (8004b58 <runFastestPathTask+0x238>)
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
			  targetAngle = 90;
 800497e:	4b77      	ldr	r3, [pc, #476]	@ (8004b5c <runFastestPathTask+0x23c>)
 8004980:	4a77      	ldr	r2, [pc, #476]	@ (8004b60 <runFastestPathTask+0x240>)
 8004982:	601a      	str	r2, [r3, #0]
			  obsDist_US = 0;
 8004984:	4b77      	ldr	r3, [pc, #476]	@ (8004b64 <runFastestPathTask+0x244>)
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
			  __SET_SERVO_TURN_MAX(&htim1, 0);
 800498c:	4b76      	ldr	r3, [pc, #472]	@ (8004b68 <runFastestPathTask+0x248>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2230      	movs	r2, #48	@ 0x30
 8004992:	641a      	str	r2, [r3, #64]	@ 0x40
 8004994:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004998:	f002 fcdc 	bl	8007354 <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 600, 1000);
 800499c:	4b73      	ldr	r3, [pc, #460]	@ (8004b6c <runFastestPathTask+0x24c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80049a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80049a6:	4b71      	ldr	r3, [pc, #452]	@ (8004b6c <runFastestPathTask+0x24c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049ae:	639a      	str	r2, [r3, #56]	@ 0x38
			  __SET_MOTOR_DIRECTION(1);
 80049b0:	2200      	movs	r2, #0
 80049b2:	2104      	movs	r1, #4
 80049b4:	486e      	ldr	r0, [pc, #440]	@ (8004b70 <runFastestPathTask+0x250>)
 80049b6:	f003 fd69 	bl	800848c <HAL_GPIO_WritePin>
 80049ba:	2201      	movs	r2, #1
 80049bc:	2108      	movs	r1, #8
 80049be:	486c      	ldr	r0, [pc, #432]	@ (8004b70 <runFastestPathTask+0x250>)
 80049c0:	f003 fd64 	bl	800848c <HAL_GPIO_WritePin>
 80049c4:	2200      	movs	r2, #0
 80049c6:	2120      	movs	r1, #32
 80049c8:	4869      	ldr	r0, [pc, #420]	@ (8004b70 <runFastestPathTask+0x250>)
 80049ca:	f003 fd5f 	bl	800848c <HAL_GPIO_WritePin>
 80049ce:	2201      	movs	r2, #1
 80049d0:	2110      	movs	r1, #16
 80049d2:	4867      	ldr	r0, [pc, #412]	@ (8004b70 <runFastestPathTask+0x250>)
 80049d4:	f003 fd5a 	bl	800848c <HAL_GPIO_WritePin>
			  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80049d8:	2104      	movs	r1, #4
 80049da:	4866      	ldr	r0, [pc, #408]	@ (8004b74 <runFastestPathTask+0x254>)
 80049dc:	f005 fb70 	bl	800a0c0 <HAL_TIM_IC_Start_IT>
			  last_curTask_tick = HAL_GetTick();
 80049e0:	f002 fcac 	bl	800733c <HAL_GetTick>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4a64      	ldr	r2, [pc, #400]	@ (8004b78 <runFastestPathTask+0x258>)
 80049e8:	6013      	str	r3, [r2, #0]
			  do {
				  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 80049ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049ee:	9302      	str	r3, [sp, #8]
 80049f0:	2302      	movs	r3, #2
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	4b61      	ldr	r3, [pc, #388]	@ (8004b7c <runFastestPathTask+0x25c>)
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	2301      	movs	r3, #1
 80049fa:	2237      	movs	r2, #55	@ 0x37
 80049fc:	21d0      	movs	r1, #208	@ 0xd0
 80049fe:	4860      	ldr	r0, [pc, #384]	@ (8004b80 <runFastestPathTask+0x260>)
 8004a00:	f003 ff9c 	bl	800893c <HAL_I2C_Mem_Read>
 8004a04:	4b5d      	ldr	r3, [pc, #372]	@ (8004b7c <runFastestPathTask+0x25c>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	b21a      	sxth	r2, r3
 8004a0c:	4b5b      	ldr	r3, [pc, #364]	@ (8004b7c <runFastestPathTask+0x25c>)
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	b21b      	sxth	r3, r3
 8004a12:	4313      	orrs	r3, r2
 8004a14:	b21a      	sxth	r2, r3
 8004a16:	4b4f      	ldr	r3, [pc, #316]	@ (8004b54 <runFastestPathTask+0x234>)
 8004a18:	801a      	strh	r2, [r3, #0]
				  if (!hadOvershoot) {
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d11d      	bne.n	8004a5c <runFastestPathTask+0x13c>
					  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8004a20:	2201      	movs	r2, #1
 8004a22:	2110      	movs	r1, #16
 8004a24:	4857      	ldr	r0, [pc, #348]	@ (8004b84 <runFastestPathTask+0x264>)
 8004a26:	f003 fd31 	bl	800848c <HAL_GPIO_WritePin>
					  __delay_us(&htim4, 10); // wait for 10us
 8004a2a:	4b52      	ldr	r3, [pc, #328]	@ (8004b74 <runFastestPathTask+0x254>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a32:	4b50      	ldr	r3, [pc, #320]	@ (8004b74 <runFastestPathTask+0x254>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	2b09      	cmp	r3, #9
 8004a3a:	d9fa      	bls.n	8004a32 <runFastestPathTask+0x112>
					  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2110      	movs	r1, #16
 8004a40:	4850      	ldr	r0, [pc, #320]	@ (8004b84 <runFastestPathTask+0x264>)
 8004a42:	f003 fd23 	bl	800848c <HAL_GPIO_WritePin>
					  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 8004a46:	4b4b      	ldr	r3, [pc, #300]	@ (8004b74 <runFastestPathTask+0x254>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	4b49      	ldr	r3, [pc, #292]	@ (8004b74 <runFastestPathTask+0x254>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0204 	orr.w	r2, r2, #4
 8004a54:	60da      	str	r2, [r3, #12]
					  osDelay(5); // give timer interrupt chance to update obsDist_US value
 8004a56:	2005      	movs	r0, #5
 8004a58:	f008 f87a 	bl	800cb50 <osDelay>
				  }


				  if (HAL_GetTick() - last_curTask_tick >=10) {
 8004a5c:	f002 fc6e 	bl	800733c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b45      	ldr	r3, [pc, #276]	@ (8004b78 <runFastestPathTask+0x258>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b09      	cmp	r3, #9
 8004a6a:	d9be      	bls.n	80049ea <runFastestPathTask+0xca>
//					  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
					  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8004a6c:	4b38      	ldr	r3, [pc, #224]	@ (8004b50 <runFastestPathTask+0x230>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fb fd69 	bl	8000548 <__aeabi_f2d>
 8004a76:	4604      	mov	r4, r0
 8004a78:	460d      	mov	r5, r1
 8004a7a:	4b36      	ldr	r3, [pc, #216]	@ (8004b54 <runFastestPathTask+0x234>)
 8004a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fb fd4f 	bl	8000524 <__aeabi_i2d>
 8004a86:	a32a      	add	r3, pc, #168	@ (adr r3, 8004b30 <runFastestPathTask+0x210>)
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f7fb fede 	bl	800084c <__aeabi_ddiv>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4610      	mov	r0, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	a327      	add	r3, pc, #156	@ (adr r3, 8004b38 <runFastestPathTask+0x218>)
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	f7fb fdab 	bl	80005f8 <__aeabi_dmul>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f7fb fbef 	bl	800028c <__adddf3>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f7fc f897 	bl	8000be8 <__aeabi_d2f>
 8004aba:	4603      	mov	r3, r0
 8004abc:	4a24      	ldr	r2, [pc, #144]	@ (8004b50 <runFastestPathTask+0x230>)
 8004abe:	6013      	str	r3, [r2, #0]
					  if (obsDist_US > 55 && !hadOvershoot) {
 8004ac0:	4b28      	ldr	r3, [pc, #160]	@ (8004b64 <runFastestPathTask+0x244>)
 8004ac2:	edd3 7a00 	vldr	s15, [r3]
 8004ac6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8004b88 <runFastestPathTask+0x268>
 8004aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad2:	dd08      	ble.n	8004ae6 <runFastestPathTask+0x1c6>
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d105      	bne.n	8004ae6 <runFastestPathTask+0x1c6>
						  angle_left = angleNow;
 8004ada:	4b1d      	ldr	r3, [pc, #116]	@ (8004b50 <runFastestPathTask+0x230>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1e      	ldr	r2, [pc, #120]	@ (8004b58 <runFastestPathTask+0x238>)
 8004ae0:	6013      	str	r3, [r2, #0]
						  hadOvershoot = 1;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
					  }

					  if (abs(targetAngle - angleNow) < 0.01) break;
 8004ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b5c <runFastestPathTask+0x23c>)
 8004ae8:	ed93 7a00 	vldr	s14, [r3]
 8004aec:	4b18      	ldr	r3, [pc, #96]	@ (8004b50 <runFastestPathTask+0x230>)
 8004aee:	edd3 7a00 	vldr	s15, [r3]
 8004af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004af6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004afa:	ee17 3a90 	vmov	r3, s15
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	db0d      	blt.n	8004b1e <runFastestPathTask+0x1fe>
 8004b02:	4b16      	ldr	r3, [pc, #88]	@ (8004b5c <runFastestPathTask+0x23c>)
 8004b04:	ed93 7a00 	vldr	s14, [r3]
 8004b08:	4b11      	ldr	r3, [pc, #68]	@ (8004b50 <runFastestPathTask+0x230>)
 8004b0a:	edd3 7a00 	vldr	s15, [r3]
 8004b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b16:	ee17 3a90 	vmov	r3, s15
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	dd36      	ble.n	8004b8c <runFastestPathTask+0x26c>
					  last_curTask_tick = HAL_GetTick();
 8004b1e:	f002 fc0d 	bl	800733c <HAL_GetTick>
 8004b22:	4603      	mov	r3, r0
 8004b24:	4a14      	ldr	r2, [pc, #80]	@ (8004b78 <runFastestPathTask+0x258>)
 8004b26:	6013      	str	r3, [r2, #0]
				  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8004b28:	e75f      	b.n	80049ea <runFastestPathTask+0xca>
 8004b2a:	bf00      	nop
 8004b2c:	f3af 8000 	nop.w
 8004b30:	66666666 	.word	0x66666666
 8004b34:	40306666 	.word	0x40306666
 8004b38:	47ae147b 	.word	0x47ae147b
 8004b3c:	3f847ae1 	.word	0x3f847ae1
 8004b40:	20000134 	.word	0x20000134
 8004b44:	20000758 	.word	0x20000758
 8004b48:	200006bc 	.word	0x200006bc
 8004b4c:	41f00000 	.word	0x41f00000
 8004b50:	200006ac 	.word	0x200006ac
 8004b54:	200006b2 	.word	0x200006b2
 8004b58:	20000724 	.word	0x20000724
 8004b5c:	200006a8 	.word	0x200006a8
 8004b60:	42b40000 	.word	0x42b40000
 8004b64:	2000070c 	.word	0x2000070c
 8004b68:	20000420 	.word	0x20000420
 8004b6c:	20000588 	.word	0x20000588
 8004b70:	40020000 	.word	0x40020000
 8004b74:	200004f8 	.word	0x200004f8
 8004b78:	200006b8 	.word	0x200006b8
 8004b7c:	200006b0 	.word	0x200006b0
 8004b80:	200003cc 	.word	0x200003cc
 8004b84:	40020400 	.word	0x40020400
 8004b88:	425c0000 	.word	0x425c0000
					  if (abs(targetAngle - angleNow) < 0.01) break;
 8004b8c:	bf00      	nop
				  }

				} while (1);
			  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8004b8e:	4ba2      	ldr	r3, [pc, #648]	@ (8004e18 <runFastestPathTask+0x4f8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b96:	4ba0      	ldr	r3, [pc, #640]	@ (8004e18 <runFastestPathTask+0x4f8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	639a      	str	r2, [r3, #56]	@ 0x38
			  __RESET_SERVO_TURN(&htim1);
 8004b9e:	4b9f      	ldr	r3, [pc, #636]	@ (8004e1c <runFastestPathTask+0x4fc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	224c      	movs	r2, #76	@ 0x4c
 8004ba4:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ba6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004baa:	f002 fbd3 	bl	8007354 <HAL_Delay>
			  osDelay(10);
 8004bae:	200a      	movs	r0, #10
 8004bb0:	f007 ffce 	bl	800cb50 <osDelay>

			  obs_a = 30 * tanf(angle_left * PI / 180);
 8004bb4:	4b9a      	ldr	r3, [pc, #616]	@ (8004e20 <runFastestPathTask+0x500>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fb fcc5 	bl	8000548 <__aeabi_f2d>
 8004bbe:	a394      	add	r3, pc, #592	@ (adr r3, 8004e10 <runFastestPathTask+0x4f0>)
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f7fb fd18 	bl	80005f8 <__aeabi_dmul>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	4b93      	ldr	r3, [pc, #588]	@ (8004e24 <runFastestPathTask+0x504>)
 8004bd6:	f7fb fe39 	bl	800084c <__aeabi_ddiv>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	f7fc f801 	bl	8000be8 <__aeabi_d2f>
 8004be6:	4603      	mov	r3, r0
 8004be8:	ee00 3a10 	vmov	s0, r3
 8004bec:	f00d fcca 	bl	8012584 <tanf>
 8004bf0:	eef0 7a40 	vmov.f32	s15, s0
 8004bf4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8004bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bfc:	4b8a      	ldr	r3, [pc, #552]	@ (8004e28 <runFastestPathTask+0x508>)
 8004bfe:	edc3 7a00 	vstr	s15, [r3]
			  angle_right = atanf((60 - obs_a) / 30) * 180 / PI;
 8004c02:	4b89      	ldr	r3, [pc, #548]	@ (8004e28 <runFastestPathTask+0x508>)
 8004c04:	edd3 7a00 	vldr	s15, [r3]
 8004c08:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004e2c <runFastestPathTask+0x50c>
 8004c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c10:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8004c14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c18:	eeb0 0a47 	vmov.f32	s0, s14
 8004c1c:	f00d fbd6 	bl	80123cc <atanf>
 8004c20:	eef0 7a40 	vmov.f32	s15, s0
 8004c24:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8004e30 <runFastestPathTask+0x510>
 8004c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c2c:	ee17 0a90 	vmov	r0, s15
 8004c30:	f7fb fc8a 	bl	8000548 <__aeabi_f2d>
 8004c34:	a376      	add	r3, pc, #472	@ (adr r3, 8004e10 <runFastestPathTask+0x4f0>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f7fb fe07 	bl	800084c <__aeabi_ddiv>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	f7fb ffcf 	bl	8000be8 <__aeabi_d2f>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4a79      	ldr	r2, [pc, #484]	@ (8004e34 <runFastestPathTask+0x514>)
 8004c4e:	6013      	str	r3, [r2, #0]
			  x = sqrtf((60 - obs_a) * (60 - obs_a) + 900) - 23; // 23 robot length offset
 8004c50:	4b75      	ldr	r3, [pc, #468]	@ (8004e28 <runFastestPathTask+0x508>)
 8004c52:	edd3 7a00 	vldr	s15, [r3]
 8004c56:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8004e2c <runFastestPathTask+0x50c>
 8004c5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c5e:	4b72      	ldr	r3, [pc, #456]	@ (8004e28 <runFastestPathTask+0x508>)
 8004c60:	edd3 7a00 	vldr	s15, [r3]
 8004c64:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8004e2c <runFastestPathTask+0x50c>
 8004c68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c70:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8004e38 <runFastestPathTask+0x518>
 8004c74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c78:	eeb0 0a67 	vmov.f32	s0, s15
 8004c7c:	f00d fb88 	bl	8012390 <sqrtf>
 8004c80:	eef0 7a40 	vmov.f32	s15, s0
 8004c84:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8004c88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c8c:	4b6b      	ldr	r3, [pc, #428]	@ (8004e3c <runFastestPathTask+0x51c>)
 8004c8e:	edc3 7a00 	vstr	s15, [r3]
 8004c92:	e09e      	b.n	8004dd2 <runFastestPathTask+0x4b2>

		  } else if (step == 2) {
 8004c94:	4b6a      	ldr	r3, [pc, #424]	@ (8004e40 <runFastestPathTask+0x520>)
 8004c96:	f993 3000 	ldrsb.w	r3, [r3]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d105      	bne.n	8004caa <runFastestPathTask+0x38a>
			  // 3: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 8004c9e:	f7ff f82b 	bl	8003cf8 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 8004ca2:	200a      	movs	r0, #10
 8004ca4:	f007 ff54 	bl	800cb50 <osDelay>
 8004ca8:	e093      	b.n	8004dd2 <runFastestPathTask+0x4b2>
		  }else if (step == 3) {
 8004caa:	4b65      	ldr	r3, [pc, #404]	@ (8004e40 <runFastestPathTask+0x520>)
 8004cac:	f993 3000 	ldrsb.w	r3, [r3]
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d105      	bne.n	8004cc0 <runFastestPathTask+0x3a0>
			  // 4: Turn right by 180 degree
			  FASTESTPATH_TURN_RIGHT_180();
 8004cb4:	f7fe feb4 	bl	8003a20 <FASTESTPATH_TURN_RIGHT_180>
			  osDelay(10);
 8004cb8:	200a      	movs	r0, #10
 8004cba:	f007 ff49 	bl	800cb50 <osDelay>
 8004cbe:	e088      	b.n	8004dd2 <runFastestPathTask+0x4b2>
		  } else if (step == 4){
 8004cc0:	4b5f      	ldr	r3, [pc, #380]	@ (8004e40 <runFastestPathTask+0x520>)
 8004cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d105      	bne.n	8004cd6 <runFastestPathTask+0x3b6>
			  // 5: move forward until right beside obstacle
			  RobotMoveUntilIRHit();
 8004cca:	f7ff f8c5 	bl	8003e58 <RobotMoveUntilIRHit>
			  osDelay(10);
 8004cce:	200a      	movs	r0, #10
 8004cd0:	f007 ff3e 	bl	800cb50 <osDelay>
 8004cd4:	e07d      	b.n	8004dd2 <runFastestPathTask+0x4b2>
		  }else if (step == 5) {
 8004cd6:	4b5a      	ldr	r3, [pc, #360]	@ (8004e40 <runFastestPathTask+0x520>)
 8004cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8004cdc:	2b05      	cmp	r3, #5
 8004cde:	d105      	bne.n	8004cec <runFastestPathTask+0x3cc>
			  // 6: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 8004ce0:	f7ff f80a 	bl	8003cf8 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 8004ce4:	200a      	movs	r0, #10
 8004ce6:	f007 ff33 	bl	800cb50 <osDelay>
 8004cea:	e072      	b.n	8004dd2 <runFastestPathTask+0x4b2>
		  }else if (step == 6) {
 8004cec:	4b54      	ldr	r3, [pc, #336]	@ (8004e40 <runFastestPathTask+0x520>)
 8004cee:	f993 3000 	ldrsb.w	r3, [r3]
 8004cf2:	2b06      	cmp	r3, #6
 8004cf4:	d105      	bne.n	8004d02 <runFastestPathTask+0x3e2>
			  // 7: Turn right by 90 degree
			  FASTESTPATH_TURN_RIGHT_90();
 8004cf6:	f7fe fe59 	bl	80039ac <FASTESTPATH_TURN_RIGHT_90>
			  osDelay(10);
 8004cfa:	200a      	movs	r0, #10
 8004cfc:	f007 ff28 	bl	800cb50 <osDelay>
 8004d00:	e067      	b.n	8004dd2 <runFastestPathTask+0x4b2>
		  }else if (step == 7) {
 8004d02:	4b4f      	ldr	r3, [pc, #316]	@ (8004e40 <runFastestPathTask+0x520>)
 8004d04:	f993 3000 	ldrsb.w	r3, [r3]
 8004d08:	2b07      	cmp	r3, #7
 8004d0a:	d105      	bne.n	8004d18 <runFastestPathTask+0x3f8>
			  // 8: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 8004d0c:	f7fe fff4 	bl	8003cf8 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 8004d10:	200a      	movs	r0, #10
 8004d12:	f007 ff1d 	bl	800cb50 <osDelay>
 8004d16:	e05c      	b.n	8004dd2 <runFastestPathTask+0x4b2>
		  }else if (step == 8) {
 8004d18:	4b49      	ldr	r3, [pc, #292]	@ (8004e40 <runFastestPathTask+0x520>)
 8004d1a:	f993 3000 	ldrsb.w	r3, [r3]
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d11d      	bne.n	8004d5e <runFastestPathTask+0x43e>
			  // 9: turn right by angle_right
			  __SET_SERVO_TURN_MAX(&htim1, 1);
 8004d22:	4b3e      	ldr	r3, [pc, #248]	@ (8004e1c <runFastestPathTask+0x4fc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2275      	movs	r2, #117	@ 0x75
 8004d28:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d2a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004d2e:	f002 fb11 	bl	8007354 <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 2000, 1000);
 8004d32:	4b39      	ldr	r3, [pc, #228]	@ (8004e18 <runFastestPathTask+0x4f8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004d3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d3c:	4b36      	ldr	r3, [pc, #216]	@ (8004e18 <runFastestPathTask+0x4f8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d44:	639a      	str	r2, [r3, #56]	@ 0x38
			  targetAngle = angle_right *-1;
 8004d46:	4b3b      	ldr	r3, [pc, #236]	@ (8004e34 <runFastestPathTask+0x514>)
 8004d48:	edd3 7a00 	vldr	s15, [r3]
 8004d4c:	eef1 7a67 	vneg.f32	s15, s15
 8004d50:	4b3c      	ldr	r3, [pc, #240]	@ (8004e44 <runFastestPathTask+0x524>)
 8004d52:	edc3 7a00 	vstr	s15, [r3]
			  RobotTurn(&targetAngle);
 8004d56:	483b      	ldr	r0, [pc, #236]	@ (8004e44 <runFastestPathTask+0x524>)
 8004d58:	f7fe fcd6 	bl	8003708 <RobotTurn>
 8004d5c:	e039      	b.n	8004dd2 <runFastestPathTask+0x4b2>
		  }else if (step == 9) {
 8004d5e:	4b38      	ldr	r3, [pc, #224]	@ (8004e40 <runFastestPathTask+0x520>)
 8004d60:	f993 3000 	ldrsb.w	r3, [r3]
 8004d64:	2b09      	cmp	r3, #9
 8004d66:	d109      	bne.n	8004d7c <runFastestPathTask+0x45c>
			  //10: move until center of the original path
			  targetDist = x;
 8004d68:	4b34      	ldr	r3, [pc, #208]	@ (8004e3c <runFastestPathTask+0x51c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a36      	ldr	r2, [pc, #216]	@ (8004e48 <runFastestPathTask+0x528>)
 8004d6e:	6013      	str	r3, [r2, #0]
			  RobotMoveDist(&targetDist, 1, SPEED_MODE_T);
 8004d70:	2200      	movs	r2, #0
 8004d72:	2101      	movs	r1, #1
 8004d74:	4834      	ldr	r0, [pc, #208]	@ (8004e48 <runFastestPathTask+0x528>)
 8004d76:	f7fe f84b 	bl	8002e10 <RobotMoveDist>
 8004d7a:	e02a      	b.n	8004dd2 <runFastestPathTask+0x4b2>
		  }else if (step == 10) {
 8004d7c:	4b30      	ldr	r3, [pc, #192]	@ (8004e40 <runFastestPathTask+0x520>)
 8004d7e:	f993 3000 	ldrsb.w	r3, [r3]
 8004d82:	2b0a      	cmp	r3, #10
 8004d84:	d119      	bne.n	8004dba <runFastestPathTask+0x49a>
			  //11: turn left to face the carpark
			  __SET_SERVO_TURN_MAX(&htim1, 0);
 8004d86:	4b25      	ldr	r3, [pc, #148]	@ (8004e1c <runFastestPathTask+0x4fc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2230      	movs	r2, #48	@ 0x30
 8004d8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d8e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004d92:	f002 fadf 	bl	8007354 <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 1000, 2000);
 8004d96:	4b20      	ldr	r3, [pc, #128]	@ (8004e18 <runFastestPathTask+0x4f8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004da0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e18 <runFastestPathTask+0x4f8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004da8:	639a      	str	r2, [r3, #56]	@ 0x38
			  targetAngle = angle_right;
 8004daa:	4b22      	ldr	r3, [pc, #136]	@ (8004e34 <runFastestPathTask+0x514>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a25      	ldr	r2, [pc, #148]	@ (8004e44 <runFastestPathTask+0x524>)
 8004db0:	6013      	str	r3, [r2, #0]
			  RobotTurn(&targetAngle);
 8004db2:	4824      	ldr	r0, [pc, #144]	@ (8004e44 <runFastestPathTask+0x524>)
 8004db4:	f7fe fca8 	bl	8003708 <RobotTurn>
 8004db8:	e00b      	b.n	8004dd2 <runFastestPathTask+0x4b2>
		  } else if (step == 11) {
 8004dba:	4b21      	ldr	r3, [pc, #132]	@ (8004e40 <runFastestPathTask+0x520>)
 8004dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8004dc0:	2b0b      	cmp	r3, #11
 8004dc2:	d106      	bne.n	8004dd2 <runFastestPathTask+0x4b2>
			  //12: back to the carpark
			  targetDist = 15;
 8004dc4:	4b20      	ldr	r3, [pc, #128]	@ (8004e48 <runFastestPathTask+0x528>)
 8004dc6:	4a21      	ldr	r2, [pc, #132]	@ (8004e4c <runFastestPathTask+0x52c>)
 8004dc8:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8004dca:	2102      	movs	r1, #2
 8004dcc:	481e      	ldr	r0, [pc, #120]	@ (8004e48 <runFastestPathTask+0x528>)
 8004dce:	f7fe f9b3 	bl	8003138 <RobotMoveDistObstacle>
		  }

		  clickOnce = 0;
 8004dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e50 <runFastestPathTask+0x530>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e54 <runFastestPathTask+0x534>)
 8004dda:	781a      	ldrb	r2, [r3, #0]
 8004ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8004e58 <runFastestPathTask+0x538>)
 8004dde:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004de0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e54 <runFastestPathTask+0x534>)
 8004de2:	220b      	movs	r2, #11
 8004de4:	701a      	strb	r2, [r3, #0]
		  __CLEAR_CURCMD(curCmd);
 8004de6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e5c <runFastestPathTask+0x53c>)
 8004de8:	2264      	movs	r2, #100	@ 0x64
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <runFastestPathTask+0x53c>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	805a      	strh	r2, [r3, #2]
		  __ACK_TASK_DONE(&huart3, rxMsg);
 8004df2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e60 <runFastestPathTask+0x540>)
 8004df4:	210f      	movs	r1, #15
 8004df6:	481b      	ldr	r0, [pc, #108]	@ (8004e64 <runFastestPathTask+0x544>)
 8004df8:	f00b f822 	bl	800fe40 <sniprintf>
 8004dfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e00:	2206      	movs	r2, #6
 8004e02:	4919      	ldr	r1, [pc, #100]	@ (8004e68 <runFastestPathTask+0x548>)
 8004e04:	4819      	ldr	r0, [pc, #100]	@ (8004e6c <runFastestPathTask+0x54c>)
 8004e06:	f006 fd68 	bl	800b8da <HAL_UART_Transmit>
	  if (curTask != TASK_FASTESTPATH) osDelay(1000);
 8004e0a:	e58f      	b.n	800492c <runFastestPathTask+0xc>
 8004e0c:	f3af 8000 	nop.w
 8004e10:	54524550 	.word	0x54524550
 8004e14:	400921fb 	.word	0x400921fb
 8004e18:	20000588 	.word	0x20000588
 8004e1c:	20000420 	.word	0x20000420
 8004e20:	20000724 	.word	0x20000724
 8004e24:	40668000 	.word	0x40668000
 8004e28:	2000071c 	.word	0x2000071c
 8004e2c:	42700000 	.word	0x42700000
 8004e30:	43340000 	.word	0x43340000
 8004e34:	20000728 	.word	0x20000728
 8004e38:	44610000 	.word	0x44610000
 8004e3c:	20000720 	.word	0x20000720
 8004e40:	20000758 	.word	0x20000758
 8004e44:	200006a8 	.word	0x200006a8
 8004e48:	200006bc 	.word	0x200006bc
 8004e4c:	41700000 	.word	0x41700000
 8004e50:	20000754 	.word	0x20000754
 8004e54:	20000134 	.word	0x20000134
 8004e58:	20000135 	.word	0x20000135
 8004e5c:	20000690 	.word	0x20000690
 8004e60:	08013104 	.word	0x08013104
 8004e64:	20000694 	.word	0x20000694
 8004e68:	0801310c 	.word	0x0801310c
 8004e6c:	200005d0 	.word	0x200005d0

08004e70 <runBuzzerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBuzzerTask */
void runBuzzerTask(void *argument)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBuzzerTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BUZZER) osDelay(1000);
 8004e78:	4b31      	ldr	r3, [pc, #196]	@ (8004f40 <runBuzzerTask+0xd0>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b0a      	cmp	r3, #10
 8004e7e:	d01c      	beq.n	8004eba <runBuzzerTask+0x4a>
 8004e80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e84:	f007 fe64 	bl	800cb50 <osDelay>
 8004e88:	e7f6      	b.n	8004e78 <runBuzzerTask+0x8>
	  else {
		  while (curCmd.val > 0) {
			  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004e90:	482c      	ldr	r0, [pc, #176]	@ (8004f44 <runBuzzerTask+0xd4>)
 8004e92:	f003 fafb 	bl	800848c <HAL_GPIO_WritePin>
			  osDelay(100);
 8004e96:	2064      	movs	r0, #100	@ 0x64
 8004e98:	f007 fe5a 	bl	800cb50 <osDelay>
			  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004ea2:	4828      	ldr	r0, [pc, #160]	@ (8004f44 <runBuzzerTask+0xd4>)
 8004ea4:	f003 faf2 	bl	800848c <HAL_GPIO_WritePin>
			  osDelay(100);
 8004ea8:	2064      	movs	r0, #100	@ 0x64
 8004eaa:	f007 fe51 	bl	800cb50 <osDelay>
			  curCmd.val--;
 8004eae:	4b26      	ldr	r3, [pc, #152]	@ (8004f48 <runBuzzerTask+0xd8>)
 8004eb0:	885b      	ldrh	r3, [r3, #2]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	4b24      	ldr	r3, [pc, #144]	@ (8004f48 <runBuzzerTask+0xd8>)
 8004eb8:	805a      	strh	r2, [r3, #2]
		  while (curCmd.val > 0) {
 8004eba:	4b23      	ldr	r3, [pc, #140]	@ (8004f48 <runBuzzerTask+0xd8>)
 8004ebc:	885b      	ldrh	r3, [r3, #2]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e3      	bne.n	8004e8a <runBuzzerTask+0x1a>
		  }
		  prevTask = curTask;
 8004ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f40 <runBuzzerTask+0xd0>)
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	4b21      	ldr	r3, [pc, #132]	@ (8004f4c <runBuzzerTask+0xdc>)
 8004ec8:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004eca:	4b1d      	ldr	r3, [pc, #116]	@ (8004f40 <runBuzzerTask+0xd0>)
 8004ecc:	220b      	movs	r2, #11
 8004ece:	701a      	strb	r2, [r3, #0]
		  clickOnce = 0;
 8004ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f50 <runBuzzerTask+0xe0>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]


		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f54 <runBuzzerTask+0xe4>)
 8004ed8:	781a      	ldrb	r2, [r3, #0]
 8004eda:	4b1e      	ldr	r3, [pc, #120]	@ (8004f54 <runBuzzerTask+0xe4>)
 8004edc:	785b      	ldrb	r3, [r3, #1]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d112      	bne.n	8004f08 <runBuzzerTask+0x98>
				__CLEAR_CURCMD(curCmd);
 8004ee2:	4b19      	ldr	r3, [pc, #100]	@ (8004f48 <runBuzzerTask+0xd8>)
 8004ee4:	2264      	movs	r2, #100	@ 0x64
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	4b17      	ldr	r3, [pc, #92]	@ (8004f48 <runBuzzerTask+0xd8>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8004eee:	4a1a      	ldr	r2, [pc, #104]	@ (8004f58 <runBuzzerTask+0xe8>)
 8004ef0:	210f      	movs	r1, #15
 8004ef2:	481a      	ldr	r0, [pc, #104]	@ (8004f5c <runBuzzerTask+0xec>)
 8004ef4:	f00a ffa4 	bl	800fe40 <sniprintf>
 8004ef8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004efc:	2206      	movs	r2, #6
 8004efe:	4918      	ldr	r1, [pc, #96]	@ (8004f60 <runBuzzerTask+0xf0>)
 8004f00:	4818      	ldr	r0, [pc, #96]	@ (8004f64 <runBuzzerTask+0xf4>)
 8004f02:	f006 fcea 	bl	800b8da <HAL_UART_Transmit>
 8004f06:	e7b7      	b.n	8004e78 <runBuzzerTask+0x8>
			} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004f08:	4b12      	ldr	r3, [pc, #72]	@ (8004f54 <runBuzzerTask+0xe4>)
 8004f0a:	785b      	ldrb	r3, [r3, #1]
 8004f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004f48 <runBuzzerTask+0xd8>)
 8004f0e:	4911      	ldr	r1, [pc, #68]	@ (8004f54 <runBuzzerTask+0xe4>)
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	4b0e      	ldr	r3, [pc, #56]	@ (8004f54 <runBuzzerTask+0xe4>)
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f54 <runBuzzerTask+0xe4>)
 8004f20:	7892      	ldrb	r2, [r2, #2]
 8004f22:	fb93 f1f2 	sdiv	r1, r3, r2
 8004f26:	fb01 f202 	mul.w	r2, r1, r2
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	4b09      	ldr	r3, [pc, #36]	@ (8004f54 <runBuzzerTask+0xe4>)
 8004f30:	705a      	strb	r2, [r3, #1]
 8004f32:	4a0d      	ldr	r2, [pc, #52]	@ (8004f68 <runBuzzerTask+0xf8>)
 8004f34:	210f      	movs	r1, #15
 8004f36:	4809      	ldr	r0, [pc, #36]	@ (8004f5c <runBuzzerTask+0xec>)
 8004f38:	f00a ff82 	bl	800fe40 <sniprintf>
	  if (curTask != TASK_BUZZER) osDelay(1000);
 8004f3c:	e79c      	b.n	8004e78 <runBuzzerTask+0x8>
 8004f3e:	bf00      	nop
 8004f40:	20000134 	.word	0x20000134
 8004f44:	40020400 	.word	0x40020400
 8004f48:	20000690 	.word	0x20000690
 8004f4c:	20000135 	.word	0x20000135
 8004f50:	20000754 	.word	0x20000754
 8004f54:	2000065c 	.word	0x2000065c
 8004f58:	08013104 	.word	0x08013104
 8004f5c:	20000694 	.word	0x20000694
 8004f60:	0801310c 	.word	0x0801310c
 8004f64:	200005d0 	.word	0x200005d0
 8004f68:	08013114 	.word	0x08013114

08004f6c <runFLTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b092      	sub	sp, #72	@ 0x48
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */
  /* Infinite loop */
	uint8_t message1[20], message2[20], message3[20];
  for(;;)
  {
	  if (curTask != TASK_FL) osDelay(1000);
 8004f74:	4b97      	ldr	r3, [pc, #604]	@ (80051d4 <runFLTask+0x268>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d004      	beq.n	8004f86 <runFLTask+0x1a>
 8004f7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f80:	f007 fde6 	bl	800cb50 <osDelay>
 8004f84:	e7f6      	b.n	8004f74 <runFLTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 8004f86:	4b94      	ldr	r3, [pc, #592]	@ (80051d8 <runFLTask+0x26c>)
 8004f88:	885b      	ldrh	r3, [r3, #2]
 8004f8a:	2b14      	cmp	r3, #20
 8004f8c:	f000 8081 	beq.w	8005092 <runFLTask+0x126>
 8004f90:	2b1e      	cmp	r3, #30
 8004f92:	f040 8107 	bne.w	80051a4 <runFLTask+0x238>
		  case 30: // FL30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 8004f96:	4b91      	ldr	r3, [pc, #580]	@ (80051dc <runFLTask+0x270>)
 8004f98:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8004f9c:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80051e0 <runFLTask+0x274>
 8004fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa8:	dd01      	ble.n	8004fae <runFLTask+0x42>
 8004faa:	2375      	movs	r3, #117	@ 0x75
 8004fac:	e012      	b.n	8004fd4 <runFLTask+0x68>
 8004fae:	4b8b      	ldr	r3, [pc, #556]	@ (80051dc <runFLTask+0x270>)
 8004fb0:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8004fb4:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80051e4 <runFLTask+0x278>
 8004fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc0:	d501      	bpl.n	8004fc6 <runFLTask+0x5a>
 8004fc2:	2330      	movs	r3, #48	@ 0x30
 8004fc4:	e006      	b.n	8004fd4 <runFLTask+0x68>
 8004fc6:	4b85      	ldr	r3, [pc, #532]	@ (80051dc <runFLTask+0x270>)
 8004fc8:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8004fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd0:	ee17 3a90 	vmov	r3, s15
 8004fd4:	4a84      	ldr	r2, [pc, #528]	@ (80051e8 <runFLTask+0x27c>)
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fda:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004fde:	f002 f9b9 	bl	8007354 <HAL_Delay>
 8004fe2:	4b7e      	ldr	r3, [pc, #504]	@ (80051dc <runFLTask+0x270>)
 8004fe4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004fe8:	4a80      	ldr	r2, [pc, #512]	@ (80051ec <runFLTask+0x280>)
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	4b7b      	ldr	r3, [pc, #492]	@ (80051dc <runFLTask+0x270>)
 8004fee:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bf0c      	ite	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	2300      	movne	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	2104      	movs	r1, #4
 8005000:	487b      	ldr	r0, [pc, #492]	@ (80051f0 <runFLTask+0x284>)
 8005002:	f003 fa43 	bl	800848c <HAL_GPIO_WritePin>
 8005006:	4b75      	ldr	r3, [pc, #468]	@ (80051dc <runFLTask+0x270>)
 8005008:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf14      	ite	ne
 8005010:	2301      	movne	r3, #1
 8005012:	2300      	moveq	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	2108      	movs	r1, #8
 800501a:	4875      	ldr	r0, [pc, #468]	@ (80051f0 <runFLTask+0x284>)
 800501c:	f003 fa36 	bl	800848c <HAL_GPIO_WritePin>
 8005020:	4b6e      	ldr	r3, [pc, #440]	@ (80051dc <runFLTask+0x270>)
 8005022:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	2120      	movs	r1, #32
 8005034:	486e      	ldr	r0, [pc, #440]	@ (80051f0 <runFLTask+0x284>)
 8005036:	f003 fa29 	bl	800848c <HAL_GPIO_WritePin>
 800503a:	4b68      	ldr	r3, [pc, #416]	@ (80051dc <runFLTask+0x270>)
 800503c:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	2110      	movs	r1, #16
 800504e:	4868      	ldr	r0, [pc, #416]	@ (80051f0 <runFLTask+0x284>)
 8005050:	f003 fa1c 	bl	800848c <HAL_GPIO_WritePin>
 8005054:	4b61      	ldr	r3, [pc, #388]	@ (80051dc <runFLTask+0x270>)
 8005056:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	@ 0xf0
 800505a:	4b66      	ldr	r3, [pc, #408]	@ (80051f4 <runFLTask+0x288>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005060:	4b5e      	ldr	r3, [pc, #376]	@ (80051dc <runFLTask+0x270>)
 8005062:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	@ 0xf2
 8005066:	4b63      	ldr	r3, [pc, #396]	@ (80051f4 <runFLTask+0x288>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	639a      	str	r2, [r3, #56]	@ 0x38
			  RobotTurn(&targetAngle);
 800506c:	485f      	ldr	r0, [pc, #380]	@ (80051ec <runFLTask+0x280>)
 800506e:	f7fe fb4b 	bl	8003708 <RobotTurn>
			  osDelay(10);
 8005072:	200a      	movs	r0, #10
 8005074:	f007 fd6c 	bl	800cb50 <osDelay>
			  targetDist = 4;
 8005078:	4b5f      	ldr	r3, [pc, #380]	@ (80051f8 <runFLTask+0x28c>)
 800507a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800507e:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005080:	2200      	movs	r2, #0
 8005082:	2100      	movs	r1, #0
 8005084:	485c      	ldr	r0, [pc, #368]	@ (80051f8 <runFLTask+0x28c>)
 8005086:	f7fd fec3 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 800508a:	200a      	movs	r0, #10
 800508c:	f007 fd60 	bl	800cb50 <osDelay>
			  break;
 8005090:	e110      	b.n	80052b4 <runFLTask+0x348>
		  case 20: // FL20 (outdoor 3x1)
			  targetDist = 4;
 8005092:	4b59      	ldr	r3, [pc, #356]	@ (80051f8 <runFLTask+0x28c>)
 8005094:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8005098:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800509a:	2200      	movs	r2, #0
 800509c:	2100      	movs	r1, #0
 800509e:	4856      	ldr	r0, [pc, #344]	@ (80051f8 <runFLTask+0x28c>)
 80050a0:	f7fd feb6 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 80050a4:	200a      	movs	r0, #10
 80050a6:	f007 fd53 	bl	800cb50 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 80050aa:	4b4c      	ldr	r3, [pc, #304]	@ (80051dc <runFLTask+0x270>)
 80050ac:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 80050b0:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80051e0 <runFLTask+0x274>
 80050b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050bc:	dd01      	ble.n	80050c2 <runFLTask+0x156>
 80050be:	2375      	movs	r3, #117	@ 0x75
 80050c0:	e012      	b.n	80050e8 <runFLTask+0x17c>
 80050c2:	4b46      	ldr	r3, [pc, #280]	@ (80051dc <runFLTask+0x270>)
 80050c4:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 80050c8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80051e4 <runFLTask+0x278>
 80050cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d4:	d501      	bpl.n	80050da <runFLTask+0x16e>
 80050d6:	2330      	movs	r3, #48	@ 0x30
 80050d8:	e006      	b.n	80050e8 <runFLTask+0x17c>
 80050da:	4b40      	ldr	r3, [pc, #256]	@ (80051dc <runFLTask+0x270>)
 80050dc:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 80050e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e4:	ee17 3a90 	vmov	r3, s15
 80050e8:	4a3f      	ldr	r2, [pc, #252]	@ (80051e8 <runFLTask+0x27c>)
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ee:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80050f2:	f002 f92f 	bl	8007354 <HAL_Delay>
 80050f6:	4b39      	ldr	r3, [pc, #228]	@ (80051dc <runFLTask+0x270>)
 80050f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80050fc:	4a3b      	ldr	r2, [pc, #236]	@ (80051ec <runFLTask+0x280>)
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b36      	ldr	r3, [pc, #216]	@ (80051dc <runFLTask+0x270>)
 8005102:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8005106:	2b00      	cmp	r3, #0
 8005108:	bf0c      	ite	eq
 800510a:	2301      	moveq	r3, #1
 800510c:	2300      	movne	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	2104      	movs	r1, #4
 8005114:	4836      	ldr	r0, [pc, #216]	@ (80051f0 <runFLTask+0x284>)
 8005116:	f003 f9b9 	bl	800848c <HAL_GPIO_WritePin>
 800511a:	4b30      	ldr	r3, [pc, #192]	@ (80051dc <runFLTask+0x270>)
 800511c:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	2108      	movs	r1, #8
 800512e:	4830      	ldr	r0, [pc, #192]	@ (80051f0 <runFLTask+0x284>)
 8005130:	f003 f9ac 	bl	800848c <HAL_GPIO_WritePin>
 8005134:	4b29      	ldr	r3, [pc, #164]	@ (80051dc <runFLTask+0x270>)
 8005136:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800513a:	2b00      	cmp	r3, #0
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	2120      	movs	r1, #32
 8005148:	4829      	ldr	r0, [pc, #164]	@ (80051f0 <runFLTask+0x284>)
 800514a:	f003 f99f 	bl	800848c <HAL_GPIO_WritePin>
 800514e:	4b23      	ldr	r3, [pc, #140]	@ (80051dc <runFLTask+0x270>)
 8005150:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	2110      	movs	r1, #16
 8005162:	4823      	ldr	r0, [pc, #140]	@ (80051f0 <runFLTask+0x284>)
 8005164:	f003 f992 	bl	800848c <HAL_GPIO_WritePin>
 8005168:	4b1c      	ldr	r3, [pc, #112]	@ (80051dc <runFLTask+0x270>)
 800516a:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 800516e:	4b21      	ldr	r3, [pc, #132]	@ (80051f4 <runFLTask+0x288>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	635a      	str	r2, [r3, #52]	@ 0x34
 8005174:	4b19      	ldr	r3, [pc, #100]	@ (80051dc <runFLTask+0x270>)
 8005176:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 800517a:	4b1e      	ldr	r3, [pc, #120]	@ (80051f4 <runFLTask+0x288>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	639a      	str	r2, [r3, #56]	@ 0x38
			  RobotTurn(&targetAngle);
 8005180:	481a      	ldr	r0, [pc, #104]	@ (80051ec <runFLTask+0x280>)
 8005182:	f7fe fac1 	bl	8003708 <RobotTurn>
			  osDelay(10);
 8005186:	200a      	movs	r0, #10
 8005188:	f007 fce2 	bl	800cb50 <osDelay>
			  targetDist = 7;
 800518c:	4b1a      	ldr	r3, [pc, #104]	@ (80051f8 <runFLTask+0x28c>)
 800518e:	4a1b      	ldr	r2, [pc, #108]	@ (80051fc <runFLTask+0x290>)
 8005190:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005192:	2200      	movs	r2, #0
 8005194:	2100      	movs	r1, #0
 8005196:	4818      	ldr	r0, [pc, #96]	@ (80051f8 <runFLTask+0x28c>)
 8005198:	f7fd fe3a 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 800519c:	200a      	movs	r0, #10
 800519e:	f007 fcd7 	bl	800cb50 <osDelay>
			  break;
 80051a2:	e087      	b.n	80052b4 <runFLTask+0x348>
		  default: // FL00 (indoor 3x1)
			  //targetDist = 4;
			  //RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
			  //osDelay(10);
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 80051a4:	4b0d      	ldr	r3, [pc, #52]	@ (80051dc <runFLTask+0x270>)
 80051a6:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 80051aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80051e0 <runFLTask+0x274>
 80051ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b6:	dd01      	ble.n	80051bc <runFLTask+0x250>
 80051b8:	2375      	movs	r3, #117	@ 0x75
 80051ba:	e028      	b.n	800520e <runFLTask+0x2a2>
 80051bc:	4b07      	ldr	r3, [pc, #28]	@ (80051dc <runFLTask+0x270>)
 80051be:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 80051c2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80051e4 <runFLTask+0x278>
 80051c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ce:	d517      	bpl.n	8005200 <runFLTask+0x294>
 80051d0:	2330      	movs	r3, #48	@ 0x30
 80051d2:	e01c      	b.n	800520e <runFLTask+0x2a2>
 80051d4:	20000134 	.word	0x20000134
 80051d8:	20000690 	.word	0x20000690
 80051dc:	20000004 	.word	0x20000004
 80051e0:	42ea0000 	.word	0x42ea0000
 80051e4:	42400000 	.word	0x42400000
 80051e8:	20000420 	.word	0x20000420
 80051ec:	200006a8 	.word	0x200006a8
 80051f0:	40020000 	.word	0x40020000
 80051f4:	20000588 	.word	0x20000588
 80051f8:	200006bc 	.word	0x200006bc
 80051fc:	40e00000 	.word	0x40e00000
 8005200:	4b4b      	ldr	r3, [pc, #300]	@ (8005330 <runFLTask+0x3c4>)
 8005202:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8005206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800520a:	ee17 3a90 	vmov	r3, s15
 800520e:	4a49      	ldr	r2, [pc, #292]	@ (8005334 <runFLTask+0x3c8>)
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	6413      	str	r3, [r2, #64]	@ 0x40
 8005214:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005218:	f002 f89c 	bl	8007354 <HAL_Delay>
 800521c:	4b44      	ldr	r3, [pc, #272]	@ (8005330 <runFLTask+0x3c4>)
 800521e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005220:	4a45      	ldr	r2, [pc, #276]	@ (8005338 <runFLTask+0x3cc>)
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	4b42      	ldr	r3, [pc, #264]	@ (8005330 <runFLTask+0x3c4>)
 8005226:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800522a:	2b00      	cmp	r3, #0
 800522c:	bf0c      	ite	eq
 800522e:	2301      	moveq	r3, #1
 8005230:	2300      	movne	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	2104      	movs	r1, #4
 8005238:	4840      	ldr	r0, [pc, #256]	@ (800533c <runFLTask+0x3d0>)
 800523a:	f003 f927 	bl	800848c <HAL_GPIO_WritePin>
 800523e:	4b3c      	ldr	r3, [pc, #240]	@ (8005330 <runFLTask+0x3c4>)
 8005240:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	2108      	movs	r1, #8
 8005252:	483a      	ldr	r0, [pc, #232]	@ (800533c <runFLTask+0x3d0>)
 8005254:	f003 f91a 	bl	800848c <HAL_GPIO_WritePin>
 8005258:	4b35      	ldr	r3, [pc, #212]	@ (8005330 <runFLTask+0x3c4>)
 800525a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800525e:	2b00      	cmp	r3, #0
 8005260:	bf0c      	ite	eq
 8005262:	2301      	moveq	r3, #1
 8005264:	2300      	movne	r3, #0
 8005266:	b2db      	uxtb	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	2120      	movs	r1, #32
 800526c:	4833      	ldr	r0, [pc, #204]	@ (800533c <runFLTask+0x3d0>)
 800526e:	f003 f90d 	bl	800848c <HAL_GPIO_WritePin>
 8005272:	4b2f      	ldr	r3, [pc, #188]	@ (8005330 <runFLTask+0x3c4>)
 8005274:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005278:	2b00      	cmp	r3, #0
 800527a:	bf14      	ite	ne
 800527c:	2301      	movne	r3, #1
 800527e:	2300      	moveq	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	2110      	movs	r1, #16
 8005286:	482d      	ldr	r0, [pc, #180]	@ (800533c <runFLTask+0x3d0>)
 8005288:	f003 f900 	bl	800848c <HAL_GPIO_WritePin>
 800528c:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <runFLTask+0x3c4>)
 800528e:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 8005292:	4b2b      	ldr	r3, [pc, #172]	@ (8005340 <runFLTask+0x3d4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	635a      	str	r2, [r3, #52]	@ 0x34
 8005298:	4b25      	ldr	r3, [pc, #148]	@ (8005330 <runFLTask+0x3c4>)
 800529a:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800529e:	4b28      	ldr	r3, [pc, #160]	@ (8005340 <runFLTask+0x3d4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	639a      	str	r2, [r3, #56]	@ 0x38
//			  cfgs[CONFIG_FL00].rightDuty += 100;
//			  sprintf(message2, "PWM:%d , %d", cfgs[CONFIG_FL00].leftDuty, cfgs[CONFIG_FL00].rightDuty );
//			  		OLED_ShowString(0, 30, message2);
//			  		sprintf(message3, "PWM:%d , %d", cfgs[CONFIG_FR00].leftDuty, cfgs[CONFIG_FR00].rightDuty );
//			  		OLED_ShowString(0, 50, message3);
			  RobotTurn(&targetAngle);
 80052a4:	4824      	ldr	r0, [pc, #144]	@ (8005338 <runFLTask+0x3cc>)
 80052a6:	f7fe fa2f 	bl	8003708 <RobotTurn>
			  //Wait();
			  osDelay(1000);
 80052aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052ae:	f007 fc4f 	bl	800cb50 <osDelay>
//			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
//			  osDelay(10);
//			  targetDist = 5;
//			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
//			  osDelay(10);
			  break;
 80052b2:	bf00      	nop
		  }


		  clickOnce = 0;
 80052b4:	4b23      	ldr	r3, [pc, #140]	@ (8005344 <runFLTask+0x3d8>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 80052ba:	4b23      	ldr	r3, [pc, #140]	@ (8005348 <runFLTask+0x3dc>)
 80052bc:	781a      	ldrb	r2, [r3, #0]
 80052be:	4b23      	ldr	r3, [pc, #140]	@ (800534c <runFLTask+0x3e0>)
 80052c0:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 80052c2:	4b21      	ldr	r3, [pc, #132]	@ (8005348 <runFLTask+0x3dc>)
 80052c4:	220b      	movs	r2, #11
 80052c6:	701a      	strb	r2, [r3, #0]

		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 80052c8:	4b21      	ldr	r3, [pc, #132]	@ (8005350 <runFLTask+0x3e4>)
 80052ca:	781a      	ldrb	r2, [r3, #0]
 80052cc:	4b20      	ldr	r3, [pc, #128]	@ (8005350 <runFLTask+0x3e4>)
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d112      	bne.n	80052fa <runFLTask+0x38e>
				__CLEAR_CURCMD(curCmd);
 80052d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005354 <runFLTask+0x3e8>)
 80052d6:	2264      	movs	r2, #100	@ 0x64
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	4b1e      	ldr	r3, [pc, #120]	@ (8005354 <runFLTask+0x3e8>)
 80052dc:	2200      	movs	r2, #0
 80052de:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 80052e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005358 <runFLTask+0x3ec>)
 80052e2:	210f      	movs	r1, #15
 80052e4:	481d      	ldr	r0, [pc, #116]	@ (800535c <runFLTask+0x3f0>)
 80052e6:	f00a fdab 	bl	800fe40 <sniprintf>
 80052ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052ee:	2206      	movs	r2, #6
 80052f0:	491b      	ldr	r1, [pc, #108]	@ (8005360 <runFLTask+0x3f4>)
 80052f2:	481c      	ldr	r0, [pc, #112]	@ (8005364 <runFLTask+0x3f8>)
 80052f4:	f006 faf1 	bl	800b8da <HAL_UART_Transmit>
 80052f8:	e63c      	b.n	8004f74 <runFLTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80052fa:	4b15      	ldr	r3, [pc, #84]	@ (8005350 <runFLTask+0x3e4>)
 80052fc:	785b      	ldrb	r3, [r3, #1]
 80052fe:	4a15      	ldr	r2, [pc, #84]	@ (8005354 <runFLTask+0x3e8>)
 8005300:	4913      	ldr	r1, [pc, #76]	@ (8005350 <runFLTask+0x3e4>)
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	4b11      	ldr	r3, [pc, #68]	@ (8005350 <runFLTask+0x3e4>)
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	3301      	adds	r3, #1
 8005310:	4a0f      	ldr	r2, [pc, #60]	@ (8005350 <runFLTask+0x3e4>)
 8005312:	7892      	ldrb	r2, [r2, #2]
 8005314:	fb93 f1f2 	sdiv	r1, r3, r2
 8005318:	fb01 f202 	mul.w	r2, r1, r2
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	b2da      	uxtb	r2, r3
 8005320:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <runFLTask+0x3e4>)
 8005322:	705a      	strb	r2, [r3, #1]
 8005324:	4a10      	ldr	r2, [pc, #64]	@ (8005368 <runFLTask+0x3fc>)
 8005326:	210f      	movs	r1, #15
 8005328:	480c      	ldr	r0, [pc, #48]	@ (800535c <runFLTask+0x3f0>)
 800532a:	f00a fd89 	bl	800fe40 <sniprintf>
	  if (curTask != TASK_FL) osDelay(1000);
 800532e:	e621      	b.n	8004f74 <runFLTask+0x8>
 8005330:	20000004 	.word	0x20000004
 8005334:	20000420 	.word	0x20000420
 8005338:	200006a8 	.word	0x200006a8
 800533c:	40020000 	.word	0x40020000
 8005340:	20000588 	.word	0x20000588
 8005344:	20000754 	.word	0x20000754
 8005348:	20000134 	.word	0x20000134
 800534c:	20000135 	.word	0x20000135
 8005350:	2000065c 	.word	0x2000065c
 8005354:	20000690 	.word	0x20000690
 8005358:	08013104 	.word	0x08013104
 800535c:	20000694 	.word	0x20000694
 8005360:	0801310c 	.word	0x0801310c
 8005364:	200005d0 	.word	0x200005d0
 8005368:	08013114 	.word	0x08013114

0800536c <runFRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FR) osDelay(1000);
 8005374:	4b98      	ldr	r3, [pc, #608]	@ (80055d8 <runFRTask+0x26c>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b03      	cmp	r3, #3
 800537a:	d004      	beq.n	8005386 <runFRTask+0x1a>
 800537c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005380:	f007 fbe6 	bl	800cb50 <osDelay>
 8005384:	e7f6      	b.n	8005374 <runFRTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 8005386:	4b95      	ldr	r3, [pc, #596]	@ (80055dc <runFRTask+0x270>)
 8005388:	885b      	ldrh	r3, [r3, #2]
 800538a:	2b14      	cmp	r3, #20
 800538c:	f000 8081 	beq.w	8005492 <runFRTask+0x126>
 8005390:	2b1e      	cmp	r3, #30
 8005392:	f040 8108 	bne.w	80055a6 <runFRTask+0x23a>
		  case 30: // FR30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 8005396:	4b92      	ldr	r3, [pc, #584]	@ (80055e0 <runFRTask+0x274>)
 8005398:	edd3 7a41 	vldr	s15, [r3, #260]	@ 0x104
 800539c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80055e4 <runFRTask+0x278>
 80053a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	dd01      	ble.n	80053ae <runFRTask+0x42>
 80053aa:	2375      	movs	r3, #117	@ 0x75
 80053ac:	e012      	b.n	80053d4 <runFRTask+0x68>
 80053ae:	4b8c      	ldr	r3, [pc, #560]	@ (80055e0 <runFRTask+0x274>)
 80053b0:	edd3 7a41 	vldr	s15, [r3, #260]	@ 0x104
 80053b4:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80055e8 <runFRTask+0x27c>
 80053b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c0:	d501      	bpl.n	80053c6 <runFRTask+0x5a>
 80053c2:	2330      	movs	r3, #48	@ 0x30
 80053c4:	e006      	b.n	80053d4 <runFRTask+0x68>
 80053c6:	4b86      	ldr	r3, [pc, #536]	@ (80055e0 <runFRTask+0x274>)
 80053c8:	edd3 7a41 	vldr	s15, [r3, #260]	@ 0x104
 80053cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053d0:	ee17 3a90 	vmov	r3, s15
 80053d4:	4a85      	ldr	r2, [pc, #532]	@ (80055ec <runFRTask+0x280>)
 80053d6:	6812      	ldr	r2, [r2, #0]
 80053d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80053da:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80053de:	f001 ffb9 	bl	8007354 <HAL_Delay>
 80053e2:	4b7f      	ldr	r3, [pc, #508]	@ (80055e0 <runFRTask+0x274>)
 80053e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053e8:	4a81      	ldr	r2, [pc, #516]	@ (80055f0 <runFRTask+0x284>)
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	4b7c      	ldr	r3, [pc, #496]	@ (80055e0 <runFRTask+0x274>)
 80053ee:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	2104      	movs	r1, #4
 8005400:	487c      	ldr	r0, [pc, #496]	@ (80055f4 <runFRTask+0x288>)
 8005402:	f003 f843 	bl	800848c <HAL_GPIO_WritePin>
 8005406:	4b76      	ldr	r3, [pc, #472]	@ (80055e0 <runFRTask+0x274>)
 8005408:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	2108      	movs	r1, #8
 800541a:	4876      	ldr	r0, [pc, #472]	@ (80055f4 <runFRTask+0x288>)
 800541c:	f003 f836 	bl	800848c <HAL_GPIO_WritePin>
 8005420:	4b6f      	ldr	r3, [pc, #444]	@ (80055e0 <runFRTask+0x274>)
 8005422:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf0c      	ite	eq
 800542a:	2301      	moveq	r3, #1
 800542c:	2300      	movne	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	2120      	movs	r1, #32
 8005434:	486f      	ldr	r0, [pc, #444]	@ (80055f4 <runFRTask+0x288>)
 8005436:	f003 f829 	bl	800848c <HAL_GPIO_WritePin>
 800543a:	4b69      	ldr	r3, [pc, #420]	@ (80055e0 <runFRTask+0x274>)
 800543c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8005440:	2b00      	cmp	r3, #0
 8005442:	bf14      	ite	ne
 8005444:	2301      	movne	r3, #1
 8005446:	2300      	moveq	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	2110      	movs	r1, #16
 800544e:	4869      	ldr	r0, [pc, #420]	@ (80055f4 <runFRTask+0x288>)
 8005450:	f003 f81c 	bl	800848c <HAL_GPIO_WritePin>
 8005454:	4b62      	ldr	r3, [pc, #392]	@ (80055e0 <runFRTask+0x274>)
 8005456:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 800545a:	4b67      	ldr	r3, [pc, #412]	@ (80055f8 <runFRTask+0x28c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005460:	4b5f      	ldr	r3, [pc, #380]	@ (80055e0 <runFRTask+0x274>)
 8005462:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8005466:	4b64      	ldr	r3, [pc, #400]	@ (80055f8 <runFRTask+0x28c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	639a      	str	r2, [r3, #56]	@ 0x38
			  RobotTurn(&targetAngle);
 800546c:	4860      	ldr	r0, [pc, #384]	@ (80055f0 <runFRTask+0x284>)
 800546e:	f7fe f94b 	bl	8003708 <RobotTurn>
			  osDelay(10);
 8005472:	200a      	movs	r0, #10
 8005474:	f007 fb6c 	bl	800cb50 <osDelay>
			  targetDist = 4;
 8005478:	4b60      	ldr	r3, [pc, #384]	@ (80055fc <runFRTask+0x290>)
 800547a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800547e:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005480:	2200      	movs	r2, #0
 8005482:	2100      	movs	r1, #0
 8005484:	485d      	ldr	r0, [pc, #372]	@ (80055fc <runFRTask+0x290>)
 8005486:	f7fd fcc3 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 800548a:	200a      	movs	r0, #10
 800548c:	f007 fb60 	bl	800cb50 <osDelay>
			  break;
 8005490:	e110      	b.n	80056b4 <runFRTask+0x348>
		  case 20: // FR20 (outdoor 3x1)
			  targetDist = 4;
 8005492:	4b5a      	ldr	r3, [pc, #360]	@ (80055fc <runFRTask+0x290>)
 8005494:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8005498:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800549a:	2200      	movs	r2, #0
 800549c:	2100      	movs	r1, #0
 800549e:	4857      	ldr	r0, [pc, #348]	@ (80055fc <runFRTask+0x290>)
 80054a0:	f7fd fcb6 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 80054a4:	200a      	movs	r0, #10
 80054a6:	f007 fb53 	bl	800cb50 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR20], &htim8, &htim1, targetAngle);
 80054aa:	4b4d      	ldr	r3, [pc, #308]	@ (80055e0 <runFRTask+0x274>)
 80054ac:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 80054b0:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80055e4 <runFRTask+0x278>
 80054b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054bc:	dd01      	ble.n	80054c2 <runFRTask+0x156>
 80054be:	2375      	movs	r3, #117	@ 0x75
 80054c0:	e012      	b.n	80054e8 <runFRTask+0x17c>
 80054c2:	4b47      	ldr	r3, [pc, #284]	@ (80055e0 <runFRTask+0x274>)
 80054c4:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 80054c8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80055e8 <runFRTask+0x27c>
 80054cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d4:	d501      	bpl.n	80054da <runFRTask+0x16e>
 80054d6:	2330      	movs	r3, #48	@ 0x30
 80054d8:	e006      	b.n	80054e8 <runFRTask+0x17c>
 80054da:	4b41      	ldr	r3, [pc, #260]	@ (80055e0 <runFRTask+0x274>)
 80054dc:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 80054e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e4:	ee17 3a90 	vmov	r3, s15
 80054e8:	4a40      	ldr	r2, [pc, #256]	@ (80055ec <runFRTask+0x280>)
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80054ee:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80054f2:	f001 ff2f 	bl	8007354 <HAL_Delay>
 80054f6:	4b3a      	ldr	r3, [pc, #232]	@ (80055e0 <runFRTask+0x274>)
 80054f8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80054fc:	4a3c      	ldr	r2, [pc, #240]	@ (80055f0 <runFRTask+0x284>)
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	4b37      	ldr	r3, [pc, #220]	@ (80055e0 <runFRTask+0x274>)
 8005502:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8005506:	2b00      	cmp	r3, #0
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	2104      	movs	r1, #4
 8005514:	4837      	ldr	r0, [pc, #220]	@ (80055f4 <runFRTask+0x288>)
 8005516:	f002 ffb9 	bl	800848c <HAL_GPIO_WritePin>
 800551a:	4b31      	ldr	r3, [pc, #196]	@ (80055e0 <runFRTask+0x274>)
 800551c:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8005520:	2b00      	cmp	r3, #0
 8005522:	bf14      	ite	ne
 8005524:	2301      	movne	r3, #1
 8005526:	2300      	moveq	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	2108      	movs	r1, #8
 800552e:	4831      	ldr	r0, [pc, #196]	@ (80055f4 <runFRTask+0x288>)
 8005530:	f002 ffac 	bl	800848c <HAL_GPIO_WritePin>
 8005534:	4b2a      	ldr	r3, [pc, #168]	@ (80055e0 <runFRTask+0x274>)
 8005536:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800553a:	2b00      	cmp	r3, #0
 800553c:	bf0c      	ite	eq
 800553e:	2301      	moveq	r3, #1
 8005540:	2300      	movne	r3, #0
 8005542:	b2db      	uxtb	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	2120      	movs	r1, #32
 8005548:	482a      	ldr	r0, [pc, #168]	@ (80055f4 <runFRTask+0x288>)
 800554a:	f002 ff9f 	bl	800848c <HAL_GPIO_WritePin>
 800554e:	4b24      	ldr	r3, [pc, #144]	@ (80055e0 <runFRTask+0x274>)
 8005550:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf14      	ite	ne
 8005558:	2301      	movne	r3, #1
 800555a:	2300      	moveq	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	2110      	movs	r1, #16
 8005562:	4824      	ldr	r0, [pc, #144]	@ (80055f4 <runFRTask+0x288>)
 8005564:	f002 ff92 	bl	800848c <HAL_GPIO_WritePin>
 8005568:	4b1d      	ldr	r3, [pc, #116]	@ (80055e0 <runFRTask+0x274>)
 800556a:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 800556e:	4b22      	ldr	r3, [pc, #136]	@ (80055f8 <runFRTask+0x28c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	635a      	str	r2, [r3, #52]	@ 0x34
 8005574:	4b1a      	ldr	r3, [pc, #104]	@ (80055e0 <runFRTask+0x274>)
 8005576:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 800557a:	4b1f      	ldr	r3, [pc, #124]	@ (80055f8 <runFRTask+0x28c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	639a      	str	r2, [r3, #56]	@ 0x38
			  RobotTurn(&targetAngle);
 8005580:	481b      	ldr	r0, [pc, #108]	@ (80055f0 <runFRTask+0x284>)
 8005582:	f7fe f8c1 	bl	8003708 <RobotTurn>
			  osDelay(10);
 8005586:	200a      	movs	r0, #10
 8005588:	f007 fae2 	bl	800cb50 <osDelay>
			  targetDist = 8;
 800558c:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <runFRTask+0x290>)
 800558e:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005592:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005594:	2200      	movs	r2, #0
 8005596:	2100      	movs	r1, #0
 8005598:	4818      	ldr	r0, [pc, #96]	@ (80055fc <runFRTask+0x290>)
 800559a:	f7fd fc39 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 800559e:	200a      	movs	r0, #10
 80055a0:	f007 fad6 	bl	800cb50 <osDelay>
			  break;
 80055a4:	e086      	b.n	80056b4 <runFRTask+0x348>
		  default: // FR00 (indoor 3x1)
//			  targetDist = 3;
//			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
//			  osDelay(10);
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 80055a6:	4b0e      	ldr	r3, [pc, #56]	@ (80055e0 <runFRTask+0x274>)
 80055a8:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 80055ac:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80055e4 <runFRTask+0x278>
 80055b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b8:	dd01      	ble.n	80055be <runFRTask+0x252>
 80055ba:	2375      	movs	r3, #117	@ 0x75
 80055bc:	e027      	b.n	800560e <runFRTask+0x2a2>
 80055be:	4b08      	ldr	r3, [pc, #32]	@ (80055e0 <runFRTask+0x274>)
 80055c0:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 80055c4:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80055e8 <runFRTask+0x27c>
 80055c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d0:	d516      	bpl.n	8005600 <runFRTask+0x294>
 80055d2:	2330      	movs	r3, #48	@ 0x30
 80055d4:	e01b      	b.n	800560e <runFRTask+0x2a2>
 80055d6:	bf00      	nop
 80055d8:	20000134 	.word	0x20000134
 80055dc:	20000690 	.word	0x20000690
 80055e0:	20000004 	.word	0x20000004
 80055e4:	42ea0000 	.word	0x42ea0000
 80055e8:	42400000 	.word	0x42400000
 80055ec:	20000420 	.word	0x20000420
 80055f0:	200006a8 	.word	0x200006a8
 80055f4:	40020000 	.word	0x40020000
 80055f8:	20000588 	.word	0x20000588
 80055fc:	200006bc 	.word	0x200006bc
 8005600:	4b4b      	ldr	r3, [pc, #300]	@ (8005730 <runFRTask+0x3c4>)
 8005602:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8005606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800560a:	ee17 3a90 	vmov	r3, s15
 800560e:	4a49      	ldr	r2, [pc, #292]	@ (8005734 <runFRTask+0x3c8>)
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	6413      	str	r3, [r2, #64]	@ 0x40
 8005614:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005618:	f001 fe9c 	bl	8007354 <HAL_Delay>
 800561c:	4b44      	ldr	r3, [pc, #272]	@ (8005730 <runFRTask+0x3c4>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005622:	4a45      	ldr	r2, [pc, #276]	@ (8005738 <runFRTask+0x3cc>)
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	4b42      	ldr	r3, [pc, #264]	@ (8005730 <runFRTask+0x3c4>)
 8005628:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	2104      	movs	r1, #4
 800563a:	4840      	ldr	r0, [pc, #256]	@ (800573c <runFRTask+0x3d0>)
 800563c:	f002 ff26 	bl	800848c <HAL_GPIO_WritePin>
 8005640:	4b3b      	ldr	r3, [pc, #236]	@ (8005730 <runFRTask+0x3c4>)
 8005642:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	461a      	mov	r2, r3
 8005652:	2108      	movs	r1, #8
 8005654:	4839      	ldr	r0, [pc, #228]	@ (800573c <runFRTask+0x3d0>)
 8005656:	f002 ff19 	bl	800848c <HAL_GPIO_WritePin>
 800565a:	4b35      	ldr	r3, [pc, #212]	@ (8005730 <runFRTask+0x3c4>)
 800565c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf0c      	ite	eq
 8005664:	2301      	moveq	r3, #1
 8005666:	2300      	movne	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	2120      	movs	r1, #32
 800566e:	4833      	ldr	r0, [pc, #204]	@ (800573c <runFRTask+0x3d0>)
 8005670:	f002 ff0c 	bl	800848c <HAL_GPIO_WritePin>
 8005674:	4b2e      	ldr	r3, [pc, #184]	@ (8005730 <runFRTask+0x3c4>)
 8005676:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800567a:	2b00      	cmp	r3, #0
 800567c:	bf14      	ite	ne
 800567e:	2301      	movne	r3, #1
 8005680:	2300      	moveq	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	2110      	movs	r1, #16
 8005688:	482c      	ldr	r0, [pc, #176]	@ (800573c <runFRTask+0x3d0>)
 800568a:	f002 feff 	bl	800848c <HAL_GPIO_WritePin>
 800568e:	4b28      	ldr	r3, [pc, #160]	@ (8005730 <runFRTask+0x3c4>)
 8005690:	f8b3 2080 	ldrh.w	r2, [r3, #128]	@ 0x80
 8005694:	4b2a      	ldr	r3, [pc, #168]	@ (8005740 <runFRTask+0x3d4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	635a      	str	r2, [r3, #52]	@ 0x34
 800569a:	4b25      	ldr	r3, [pc, #148]	@ (8005730 <runFRTask+0x3c4>)
 800569c:	f8b3 2082 	ldrh.w	r2, [r3, #130]	@ 0x82
 80056a0:	4b27      	ldr	r3, [pc, #156]	@ (8005740 <runFRTask+0x3d4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	639a      	str	r2, [r3, #56]	@ 0x38
			  RobotTurn(&targetAngle);
 80056a6:	4824      	ldr	r0, [pc, #144]	@ (8005738 <runFRTask+0x3cc>)
 80056a8:	f7fe f82e 	bl	8003708 <RobotTurn>
			  osDelay(10);
 80056ac:	200a      	movs	r0, #10
 80056ae:	f007 fa4f 	bl	800cb50 <osDelay>
//			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
//			  osDelay(10);
//			  targetDist = 4;
//			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
//			  osDelay(10);
			  break;
 80056b2:	bf00      	nop
		  }


		  clickOnce = 0;
 80056b4:	4b23      	ldr	r3, [pc, #140]	@ (8005744 <runFRTask+0x3d8>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 80056ba:	4b23      	ldr	r3, [pc, #140]	@ (8005748 <runFRTask+0x3dc>)
 80056bc:	781a      	ldrb	r2, [r3, #0]
 80056be:	4b23      	ldr	r3, [pc, #140]	@ (800574c <runFRTask+0x3e0>)
 80056c0:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 80056c2:	4b21      	ldr	r3, [pc, #132]	@ (8005748 <runFRTask+0x3dc>)
 80056c4:	220b      	movs	r2, #11
 80056c6:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 80056c8:	4b21      	ldr	r3, [pc, #132]	@ (8005750 <runFRTask+0x3e4>)
 80056ca:	781a      	ldrb	r2, [r3, #0]
 80056cc:	4b20      	ldr	r3, [pc, #128]	@ (8005750 <runFRTask+0x3e4>)
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d112      	bne.n	80056fa <runFRTask+0x38e>
				__CLEAR_CURCMD(curCmd);
 80056d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005754 <runFRTask+0x3e8>)
 80056d6:	2264      	movs	r2, #100	@ 0x64
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	4b1e      	ldr	r3, [pc, #120]	@ (8005754 <runFRTask+0x3e8>)
 80056dc:	2200      	movs	r2, #0
 80056de:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 80056e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005758 <runFRTask+0x3ec>)
 80056e2:	210f      	movs	r1, #15
 80056e4:	481d      	ldr	r0, [pc, #116]	@ (800575c <runFRTask+0x3f0>)
 80056e6:	f00a fbab 	bl	800fe40 <sniprintf>
 80056ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80056ee:	2206      	movs	r2, #6
 80056f0:	491b      	ldr	r1, [pc, #108]	@ (8005760 <runFRTask+0x3f4>)
 80056f2:	481c      	ldr	r0, [pc, #112]	@ (8005764 <runFRTask+0x3f8>)
 80056f4:	f006 f8f1 	bl	800b8da <HAL_UART_Transmit>
 80056f8:	e63c      	b.n	8005374 <runFRTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80056fa:	4b15      	ldr	r3, [pc, #84]	@ (8005750 <runFRTask+0x3e4>)
 80056fc:	785b      	ldrb	r3, [r3, #1]
 80056fe:	4a15      	ldr	r2, [pc, #84]	@ (8005754 <runFRTask+0x3e8>)
 8005700:	4913      	ldr	r1, [pc, #76]	@ (8005750 <runFRTask+0x3e4>)
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	4b11      	ldr	r3, [pc, #68]	@ (8005750 <runFRTask+0x3e4>)
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	3301      	adds	r3, #1
 8005710:	4a0f      	ldr	r2, [pc, #60]	@ (8005750 <runFRTask+0x3e4>)
 8005712:	7892      	ldrb	r2, [r2, #2]
 8005714:	fb93 f1f2 	sdiv	r1, r3, r2
 8005718:	fb01 f202 	mul.w	r2, r1, r2
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	b2da      	uxtb	r2, r3
 8005720:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <runFRTask+0x3e4>)
 8005722:	705a      	strb	r2, [r3, #1]
 8005724:	4a10      	ldr	r2, [pc, #64]	@ (8005768 <runFRTask+0x3fc>)
 8005726:	210f      	movs	r1, #15
 8005728:	480c      	ldr	r0, [pc, #48]	@ (800575c <runFRTask+0x3f0>)
 800572a:	f00a fb89 	bl	800fe40 <sniprintf>
	  if (curTask != TASK_FR) osDelay(1000);
 800572e:	e621      	b.n	8005374 <runFRTask+0x8>
 8005730:	20000004 	.word	0x20000004
 8005734:	20000420 	.word	0x20000420
 8005738:	200006a8 	.word	0x200006a8
 800573c:	40020000 	.word	0x40020000
 8005740:	20000588 	.word	0x20000588
 8005744:	20000754 	.word	0x20000754
 8005748:	20000134 	.word	0x20000134
 800574c:	20000135 	.word	0x20000135
 8005750:	2000065c 	.word	0x2000065c
 8005754:	20000690 	.word	0x20000690
 8005758:	08013104 	.word	0x08013104
 800575c:	20000694 	.word	0x20000694
 8005760:	0801310c 	.word	0x0801310c
 8005764:	200005d0 	.word	0x200005d0
 8005768:	08013114 	.word	0x08013114

0800576c <runBLTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BL) osDelay(1000);
 8005774:	4b96      	ldr	r3, [pc, #600]	@ (80059d0 <runBLTask+0x264>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b04      	cmp	r3, #4
 800577a:	d004      	beq.n	8005786 <runBLTask+0x1a>
 800577c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005780:	f007 f9e6 	bl	800cb50 <osDelay>
 8005784:	e7f6      	b.n	8005774 <runBLTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 8005786:	4b93      	ldr	r3, [pc, #588]	@ (80059d4 <runBLTask+0x268>)
 8005788:	885b      	ldrh	r3, [r3, #2]
 800578a:	2b14      	cmp	r3, #20
 800578c:	d07f      	beq.n	800588e <runBLTask+0x122>
 800578e:	2b1e      	cmp	r3, #30
 8005790:	f040 8106 	bne.w	80059a0 <runBLTask+0x234>
		  case 30: // BL30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 8005794:	4b90      	ldr	r3, [pc, #576]	@ (80059d8 <runBLTask+0x26c>)
 8005796:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 800579a:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80059dc <runBLTask+0x270>
 800579e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a6:	dd01      	ble.n	80057ac <runBLTask+0x40>
 80057a8:	2375      	movs	r3, #117	@ 0x75
 80057aa:	e012      	b.n	80057d2 <runBLTask+0x66>
 80057ac:	4b8a      	ldr	r3, [pc, #552]	@ (80059d8 <runBLTask+0x26c>)
 80057ae:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 80057b2:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80059e0 <runBLTask+0x274>
 80057b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057be:	d501      	bpl.n	80057c4 <runBLTask+0x58>
 80057c0:	2330      	movs	r3, #48	@ 0x30
 80057c2:	e006      	b.n	80057d2 <runBLTask+0x66>
 80057c4:	4b84      	ldr	r3, [pc, #528]	@ (80059d8 <runBLTask+0x26c>)
 80057c6:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 80057ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ce:	ee17 3a90 	vmov	r3, s15
 80057d2:	4a84      	ldr	r2, [pc, #528]	@ (80059e4 <runBLTask+0x278>)
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80057d8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80057dc:	f001 fdba 	bl	8007354 <HAL_Delay>
 80057e0:	4b7d      	ldr	r3, [pc, #500]	@ (80059d8 <runBLTask+0x26c>)
 80057e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80057e6:	4a80      	ldr	r2, [pc, #512]	@ (80059e8 <runBLTask+0x27c>)
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	4b7b      	ldr	r3, [pc, #492]	@ (80059d8 <runBLTask+0x26c>)
 80057ec:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bf0c      	ite	eq
 80057f4:	2301      	moveq	r3, #1
 80057f6:	2300      	movne	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	2104      	movs	r1, #4
 80057fe:	487b      	ldr	r0, [pc, #492]	@ (80059ec <runBLTask+0x280>)
 8005800:	f002 fe44 	bl	800848c <HAL_GPIO_WritePin>
 8005804:	4b74      	ldr	r3, [pc, #464]	@ (80059d8 <runBLTask+0x26c>)
 8005806:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800580a:	2b00      	cmp	r3, #0
 800580c:	bf14      	ite	ne
 800580e:	2301      	movne	r3, #1
 8005810:	2300      	moveq	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	2108      	movs	r1, #8
 8005818:	4874      	ldr	r0, [pc, #464]	@ (80059ec <runBLTask+0x280>)
 800581a:	f002 fe37 	bl	800848c <HAL_GPIO_WritePin>
 800581e:	4b6e      	ldr	r3, [pc, #440]	@ (80059d8 <runBLTask+0x26c>)
 8005820:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	2120      	movs	r1, #32
 8005832:	486e      	ldr	r0, [pc, #440]	@ (80059ec <runBLTask+0x280>)
 8005834:	f002 fe2a 	bl	800848c <HAL_GPIO_WritePin>
 8005838:	4b67      	ldr	r3, [pc, #412]	@ (80059d8 <runBLTask+0x26c>)
 800583a:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800583e:	2b00      	cmp	r3, #0
 8005840:	bf14      	ite	ne
 8005842:	2301      	movne	r3, #1
 8005844:	2300      	moveq	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	2110      	movs	r1, #16
 800584c:	4867      	ldr	r0, [pc, #412]	@ (80059ec <runBLTask+0x280>)
 800584e:	f002 fe1d 	bl	800848c <HAL_GPIO_WritePin>
 8005852:	4b61      	ldr	r3, [pc, #388]	@ (80059d8 <runBLTask+0x26c>)
 8005854:	f8b3 2110 	ldrh.w	r2, [r3, #272]	@ 0x110
 8005858:	4b65      	ldr	r3, [pc, #404]	@ (80059f0 <runBLTask+0x284>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	635a      	str	r2, [r3, #52]	@ 0x34
 800585e:	4b5e      	ldr	r3, [pc, #376]	@ (80059d8 <runBLTask+0x26c>)
 8005860:	f8b3 2112 	ldrh.w	r2, [r3, #274]	@ 0x112
 8005864:	4b62      	ldr	r3, [pc, #392]	@ (80059f0 <runBLTask+0x284>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	639a      	str	r2, [r3, #56]	@ 0x38
			  RobotTurn(&targetAngle);
 800586a:	485f      	ldr	r0, [pc, #380]	@ (80059e8 <runBLTask+0x27c>)
 800586c:	f7fd ff4c 	bl	8003708 <RobotTurn>
			  osDelay(10);
 8005870:	200a      	movs	r0, #10
 8005872:	f007 f96d 	bl	800cb50 <osDelay>
			  targetDist = 4.5;
 8005876:	4b5f      	ldr	r3, [pc, #380]	@ (80059f4 <runBLTask+0x288>)
 8005878:	4a5f      	ldr	r2, [pc, #380]	@ (80059f8 <runBLTask+0x28c>)
 800587a:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800587c:	2200      	movs	r2, #0
 800587e:	2100      	movs	r1, #0
 8005880:	485c      	ldr	r0, [pc, #368]	@ (80059f4 <runBLTask+0x288>)
 8005882:	f7fd fac5 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 8005886:	200a      	movs	r0, #10
 8005888:	f007 f962 	bl	800cb50 <osDelay>
			  break;
 800588c:	e112      	b.n	8005ab4 <runBLTask+0x348>
		  case 20: // BL20 (outdoor 3x1)
			  targetDist = 6;
 800588e:	4b59      	ldr	r3, [pc, #356]	@ (80059f4 <runBLTask+0x288>)
 8005890:	4a5a      	ldr	r2, [pc, #360]	@ (80059fc <runBLTask+0x290>)
 8005892:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005894:	2200      	movs	r2, #0
 8005896:	2101      	movs	r1, #1
 8005898:	4856      	ldr	r0, [pc, #344]	@ (80059f4 <runBLTask+0x288>)
 800589a:	f7fd fab9 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 800589e:	200a      	movs	r0, #10
 80058a0:	f007 f956 	bl	800cb50 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL20], &htim8, &htim1, targetAngle);
 80058a4:	4b4c      	ldr	r3, [pc, #304]	@ (80059d8 <runBLTask+0x26c>)
 80058a6:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 80058aa:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80059dc <runBLTask+0x270>
 80058ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b6:	dd01      	ble.n	80058bc <runBLTask+0x150>
 80058b8:	2375      	movs	r3, #117	@ 0x75
 80058ba:	e012      	b.n	80058e2 <runBLTask+0x176>
 80058bc:	4b46      	ldr	r3, [pc, #280]	@ (80059d8 <runBLTask+0x26c>)
 80058be:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 80058c2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80059e0 <runBLTask+0x274>
 80058c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ce:	d501      	bpl.n	80058d4 <runBLTask+0x168>
 80058d0:	2330      	movs	r3, #48	@ 0x30
 80058d2:	e006      	b.n	80058e2 <runBLTask+0x176>
 80058d4:	4b40      	ldr	r3, [pc, #256]	@ (80059d8 <runBLTask+0x26c>)
 80058d6:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 80058da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058de:	ee17 3a90 	vmov	r3, s15
 80058e2:	4a40      	ldr	r2, [pc, #256]	@ (80059e4 <runBLTask+0x278>)
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80058e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80058ec:	f001 fd32 	bl	8007354 <HAL_Delay>
 80058f0:	4b39      	ldr	r3, [pc, #228]	@ (80059d8 <runBLTask+0x26c>)
 80058f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80058f6:	4a3c      	ldr	r2, [pc, #240]	@ (80059e8 <runBLTask+0x27c>)
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	4b37      	ldr	r3, [pc, #220]	@ (80059d8 <runBLTask+0x26c>)
 80058fc:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	2104      	movs	r1, #4
 800590e:	4837      	ldr	r0, [pc, #220]	@ (80059ec <runBLTask+0x280>)
 8005910:	f002 fdbc 	bl	800848c <HAL_GPIO_WritePin>
 8005914:	4b30      	ldr	r3, [pc, #192]	@ (80059d8 <runBLTask+0x26c>)
 8005916:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800591a:	2b00      	cmp	r3, #0
 800591c:	bf14      	ite	ne
 800591e:	2301      	movne	r3, #1
 8005920:	2300      	moveq	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	2108      	movs	r1, #8
 8005928:	4830      	ldr	r0, [pc, #192]	@ (80059ec <runBLTask+0x280>)
 800592a:	f002 fdaf 	bl	800848c <HAL_GPIO_WritePin>
 800592e:	4b2a      	ldr	r3, [pc, #168]	@ (80059d8 <runBLTask+0x26c>)
 8005930:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005934:	2b00      	cmp	r3, #0
 8005936:	bf0c      	ite	eq
 8005938:	2301      	moveq	r3, #1
 800593a:	2300      	movne	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	2120      	movs	r1, #32
 8005942:	482a      	ldr	r0, [pc, #168]	@ (80059ec <runBLTask+0x280>)
 8005944:	f002 fda2 	bl	800848c <HAL_GPIO_WritePin>
 8005948:	4b23      	ldr	r3, [pc, #140]	@ (80059d8 <runBLTask+0x26c>)
 800594a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800594e:	2b00      	cmp	r3, #0
 8005950:	bf14      	ite	ne
 8005952:	2301      	movne	r3, #1
 8005954:	2300      	moveq	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	2110      	movs	r1, #16
 800595c:	4823      	ldr	r0, [pc, #140]	@ (80059ec <runBLTask+0x280>)
 800595e:	f002 fd95 	bl	800848c <HAL_GPIO_WritePin>
 8005962:	4b1d      	ldr	r3, [pc, #116]	@ (80059d8 <runBLTask+0x26c>)
 8005964:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8005968:	4b21      	ldr	r3, [pc, #132]	@ (80059f0 <runBLTask+0x284>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	635a      	str	r2, [r3, #52]	@ 0x34
 800596e:	4b1a      	ldr	r3, [pc, #104]	@ (80059d8 <runBLTask+0x26c>)
 8005970:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8005974:	4b1e      	ldr	r3, [pc, #120]	@ (80059f0 <runBLTask+0x284>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	639a      	str	r2, [r3, #56]	@ 0x38
			  RobotTurn(&targetAngle);
 800597a:	481b      	ldr	r0, [pc, #108]	@ (80059e8 <runBLTask+0x27c>)
 800597c:	f7fd fec4 	bl	8003708 <RobotTurn>
			  osDelay(10);
 8005980:	200a      	movs	r0, #10
 8005982:	f007 f8e5 	bl	800cb50 <osDelay>
			  targetDist = 2;
 8005986:	4b1b      	ldr	r3, [pc, #108]	@ (80059f4 <runBLTask+0x288>)
 8005988:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800598c:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800598e:	2200      	movs	r2, #0
 8005990:	2101      	movs	r1, #1
 8005992:	4818      	ldr	r0, [pc, #96]	@ (80059f4 <runBLTask+0x288>)
 8005994:	f7fd fa3c 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 8005998:	200a      	movs	r0, #10
 800599a:	f007 f8d9 	bl	800cb50 <osDelay>
			  break;
 800599e:	e089      	b.n	8005ab4 <runBLTask+0x348>
		  default: // BL00 (indoor 3x1)
//			  targetDist = 6;
//			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
//			  osDelay(10);
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 80059a0:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <runBLTask+0x26c>)
 80059a2:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80059a6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80059dc <runBLTask+0x270>
 80059aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b2:	dd01      	ble.n	80059b8 <runBLTask+0x24c>
 80059b4:	2375      	movs	r3, #117	@ 0x75
 80059b6:	e02a      	b.n	8005a0e <runBLTask+0x2a2>
 80059b8:	4b07      	ldr	r3, [pc, #28]	@ (80059d8 <runBLTask+0x26c>)
 80059ba:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80059be:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80059e0 <runBLTask+0x274>
 80059c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ca:	d519      	bpl.n	8005a00 <runBLTask+0x294>
 80059cc:	2330      	movs	r3, #48	@ 0x30
 80059ce:	e01e      	b.n	8005a0e <runBLTask+0x2a2>
 80059d0:	20000134 	.word	0x20000134
 80059d4:	20000690 	.word	0x20000690
 80059d8:	20000004 	.word	0x20000004
 80059dc:	42ea0000 	.word	0x42ea0000
 80059e0:	42400000 	.word	0x42400000
 80059e4:	20000420 	.word	0x20000420
 80059e8:	200006a8 	.word	0x200006a8
 80059ec:	40020000 	.word	0x40020000
 80059f0:	20000588 	.word	0x20000588
 80059f4:	200006bc 	.word	0x200006bc
 80059f8:	40900000 	.word	0x40900000
 80059fc:	40c00000 	.word	0x40c00000
 8005a00:	4b4b      	ldr	r3, [pc, #300]	@ (8005b30 <runBLTask+0x3c4>)
 8005a02:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8005a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0a:	ee17 3a90 	vmov	r3, s15
 8005a0e:	4a49      	ldr	r2, [pc, #292]	@ (8005b34 <runBLTask+0x3c8>)
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a14:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005a18:	f001 fc9c 	bl	8007354 <HAL_Delay>
 8005a1c:	4b44      	ldr	r3, [pc, #272]	@ (8005b30 <runBLTask+0x3c4>)
 8005a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a22:	4a45      	ldr	r2, [pc, #276]	@ (8005b38 <runBLTask+0x3cc>)
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b42      	ldr	r3, [pc, #264]	@ (8005b30 <runBLTask+0x3c4>)
 8005a28:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	2104      	movs	r1, #4
 8005a3a:	4840      	ldr	r0, [pc, #256]	@ (8005b3c <runBLTask+0x3d0>)
 8005a3c:	f002 fd26 	bl	800848c <HAL_GPIO_WritePin>
 8005a40:	4b3b      	ldr	r3, [pc, #236]	@ (8005b30 <runBLTask+0x3c4>)
 8005a42:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bf14      	ite	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	2300      	moveq	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	2108      	movs	r1, #8
 8005a54:	4839      	ldr	r0, [pc, #228]	@ (8005b3c <runBLTask+0x3d0>)
 8005a56:	f002 fd19 	bl	800848c <HAL_GPIO_WritePin>
 8005a5a:	4b35      	ldr	r3, [pc, #212]	@ (8005b30 <runBLTask+0x3c4>)
 8005a5c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2120      	movs	r1, #32
 8005a6e:	4833      	ldr	r0, [pc, #204]	@ (8005b3c <runBLTask+0x3d0>)
 8005a70:	f002 fd0c 	bl	800848c <HAL_GPIO_WritePin>
 8005a74:	4b2e      	ldr	r3, [pc, #184]	@ (8005b30 <runBLTask+0x3c4>)
 8005a76:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bf14      	ite	ne
 8005a7e:	2301      	movne	r3, #1
 8005a80:	2300      	moveq	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	2110      	movs	r1, #16
 8005a88:	482c      	ldr	r0, [pc, #176]	@ (8005b3c <runBLTask+0x3d0>)
 8005a8a:	f002 fcff 	bl	800848c <HAL_GPIO_WritePin>
 8005a8e:	4b28      	ldr	r3, [pc, #160]	@ (8005b30 <runBLTask+0x3c4>)
 8005a90:	f8b3 2090 	ldrh.w	r2, [r3, #144]	@ 0x90
 8005a94:	4b2a      	ldr	r3, [pc, #168]	@ (8005b40 <runBLTask+0x3d4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a9a:	4b25      	ldr	r3, [pc, #148]	@ (8005b30 <runBLTask+0x3c4>)
 8005a9c:	f8b3 2092 	ldrh.w	r2, [r3, #146]	@ 0x92
 8005aa0:	4b27      	ldr	r3, [pc, #156]	@ (8005b40 <runBLTask+0x3d4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	639a      	str	r2, [r3, #56]	@ 0x38
			  RobotTurn(&targetAngle);
 8005aa6:	4824      	ldr	r0, [pc, #144]	@ (8005b38 <runBLTask+0x3cc>)
 8005aa8:	f7fd fe2e 	bl	8003708 <RobotTurn>
			  osDelay(10);
 8005aac:	200a      	movs	r0, #10
 8005aae:	f007 f84f 	bl	800cb50 <osDelay>
//			  targetDist = 7.5;
//			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
//			  osDelay(10);
			  break;
 8005ab2:	bf00      	nop
		  }


		  clickOnce = 0;
 8005ab4:	4b23      	ldr	r3, [pc, #140]	@ (8005b44 <runBLTask+0x3d8>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8005aba:	4b23      	ldr	r3, [pc, #140]	@ (8005b48 <runBLTask+0x3dc>)
 8005abc:	781a      	ldrb	r2, [r3, #0]
 8005abe:	4b23      	ldr	r3, [pc, #140]	@ (8005b4c <runBLTask+0x3e0>)
 8005ac0:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8005ac2:	4b21      	ldr	r3, [pc, #132]	@ (8005b48 <runBLTask+0x3dc>)
 8005ac4:	220b      	movs	r2, #11
 8005ac6:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8005ac8:	4b21      	ldr	r3, [pc, #132]	@ (8005b50 <runBLTask+0x3e4>)
 8005aca:	781a      	ldrb	r2, [r3, #0]
 8005acc:	4b20      	ldr	r3, [pc, #128]	@ (8005b50 <runBLTask+0x3e4>)
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d112      	bne.n	8005afa <runBLTask+0x38e>
				__CLEAR_CURCMD(curCmd);
 8005ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b54 <runBLTask+0x3e8>)
 8005ad6:	2264      	movs	r2, #100	@ 0x64
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	4b1e      	ldr	r3, [pc, #120]	@ (8005b54 <runBLTask+0x3e8>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8005ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b58 <runBLTask+0x3ec>)
 8005ae2:	210f      	movs	r1, #15
 8005ae4:	481d      	ldr	r0, [pc, #116]	@ (8005b5c <runBLTask+0x3f0>)
 8005ae6:	f00a f9ab 	bl	800fe40 <sniprintf>
 8005aea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005aee:	2206      	movs	r2, #6
 8005af0:	491b      	ldr	r1, [pc, #108]	@ (8005b60 <runBLTask+0x3f4>)
 8005af2:	481c      	ldr	r0, [pc, #112]	@ (8005b64 <runBLTask+0x3f8>)
 8005af4:	f005 fef1 	bl	800b8da <HAL_UART_Transmit>
 8005af8:	e63c      	b.n	8005774 <runBLTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005afa:	4b15      	ldr	r3, [pc, #84]	@ (8005b50 <runBLTask+0x3e4>)
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	4a15      	ldr	r2, [pc, #84]	@ (8005b54 <runBLTask+0x3e8>)
 8005b00:	4913      	ldr	r1, [pc, #76]	@ (8005b50 <runBLTask+0x3e4>)
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	4b11      	ldr	r3, [pc, #68]	@ (8005b50 <runBLTask+0x3e4>)
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	4a0f      	ldr	r2, [pc, #60]	@ (8005b50 <runBLTask+0x3e4>)
 8005b12:	7892      	ldrb	r2, [r2, #2]
 8005b14:	fb93 f1f2 	sdiv	r1, r3, r2
 8005b18:	fb01 f202 	mul.w	r2, r1, r2
 8005b1c:	1a9b      	subs	r3, r3, r2
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	4b0b      	ldr	r3, [pc, #44]	@ (8005b50 <runBLTask+0x3e4>)
 8005b22:	705a      	strb	r2, [r3, #1]
 8005b24:	4a10      	ldr	r2, [pc, #64]	@ (8005b68 <runBLTask+0x3fc>)
 8005b26:	210f      	movs	r1, #15
 8005b28:	480c      	ldr	r0, [pc, #48]	@ (8005b5c <runBLTask+0x3f0>)
 8005b2a:	f00a f989 	bl	800fe40 <sniprintf>
	  if (curTask != TASK_BL) osDelay(1000);
 8005b2e:	e621      	b.n	8005774 <runBLTask+0x8>
 8005b30:	20000004 	.word	0x20000004
 8005b34:	20000420 	.word	0x20000420
 8005b38:	200006a8 	.word	0x200006a8
 8005b3c:	40020000 	.word	0x40020000
 8005b40:	20000588 	.word	0x20000588
 8005b44:	20000754 	.word	0x20000754
 8005b48:	20000134 	.word	0x20000134
 8005b4c:	20000135 	.word	0x20000135
 8005b50:	2000065c 	.word	0x2000065c
 8005b54:	20000690 	.word	0x20000690
 8005b58:	08013104 	.word	0x08013104
 8005b5c:	20000694 	.word	0x20000694
 8005b60:	0801310c 	.word	0x0801310c
 8005b64:	200005d0 	.word	0x200005d0
 8005b68:	08013114 	.word	0x08013114

08005b6c <runBRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BR) osDelay(1000);
 8005b74:	4b96      	ldr	r3, [pc, #600]	@ (8005dd0 <runBRTask+0x264>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b05      	cmp	r3, #5
 8005b7a:	d004      	beq.n	8005b86 <runBRTask+0x1a>
 8005b7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005b80:	f006 ffe6 	bl	800cb50 <osDelay>
 8005b84:	e7f6      	b.n	8005b74 <runBRTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 8005b86:	4b93      	ldr	r3, [pc, #588]	@ (8005dd4 <runBRTask+0x268>)
 8005b88:	885b      	ldrh	r3, [r3, #2]
 8005b8a:	2b14      	cmp	r3, #20
 8005b8c:	d07f      	beq.n	8005c8e <runBRTask+0x122>
 8005b8e:	2b1e      	cmp	r3, #30
 8005b90:	f040 8105 	bne.w	8005d9e <runBRTask+0x232>
		  case 30: // BR30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 8005b94:	4b90      	ldr	r3, [pc, #576]	@ (8005dd8 <runBRTask+0x26c>)
 8005b96:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 8005b9a:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8005ddc <runBRTask+0x270>
 8005b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba6:	dd01      	ble.n	8005bac <runBRTask+0x40>
 8005ba8:	2375      	movs	r3, #117	@ 0x75
 8005baa:	e012      	b.n	8005bd2 <runBRTask+0x66>
 8005bac:	4b8a      	ldr	r3, [pc, #552]	@ (8005dd8 <runBRTask+0x26c>)
 8005bae:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 8005bb2:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8005de0 <runBRTask+0x274>
 8005bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	d501      	bpl.n	8005bc4 <runBRTask+0x58>
 8005bc0:	2330      	movs	r3, #48	@ 0x30
 8005bc2:	e006      	b.n	8005bd2 <runBRTask+0x66>
 8005bc4:	4b84      	ldr	r3, [pc, #528]	@ (8005dd8 <runBRTask+0x26c>)
 8005bc6:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 8005bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bce:	ee17 3a90 	vmov	r3, s15
 8005bd2:	4a84      	ldr	r2, [pc, #528]	@ (8005de4 <runBRTask+0x278>)
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bd8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005bdc:	f001 fbba 	bl	8007354 <HAL_Delay>
 8005be0:	4b7d      	ldr	r3, [pc, #500]	@ (8005dd8 <runBRTask+0x26c>)
 8005be2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8005be6:	4a80      	ldr	r2, [pc, #512]	@ (8005de8 <runBRTask+0x27c>)
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	4b7b      	ldr	r3, [pc, #492]	@ (8005dd8 <runBRTask+0x26c>)
 8005bec:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bf0c      	ite	eq
 8005bf4:	2301      	moveq	r3, #1
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	2104      	movs	r1, #4
 8005bfe:	487b      	ldr	r0, [pc, #492]	@ (8005dec <runBRTask+0x280>)
 8005c00:	f002 fc44 	bl	800848c <HAL_GPIO_WritePin>
 8005c04:	4b74      	ldr	r3, [pc, #464]	@ (8005dd8 <runBRTask+0x26c>)
 8005c06:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bf14      	ite	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	2300      	moveq	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	2108      	movs	r1, #8
 8005c18:	4874      	ldr	r0, [pc, #464]	@ (8005dec <runBRTask+0x280>)
 8005c1a:	f002 fc37 	bl	800848c <HAL_GPIO_WritePin>
 8005c1e:	4b6e      	ldr	r3, [pc, #440]	@ (8005dd8 <runBRTask+0x26c>)
 8005c20:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bf0c      	ite	eq
 8005c28:	2301      	moveq	r3, #1
 8005c2a:	2300      	movne	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	461a      	mov	r2, r3
 8005c30:	2120      	movs	r1, #32
 8005c32:	486e      	ldr	r0, [pc, #440]	@ (8005dec <runBRTask+0x280>)
 8005c34:	f002 fc2a 	bl	800848c <HAL_GPIO_WritePin>
 8005c38:	4b67      	ldr	r3, [pc, #412]	@ (8005dd8 <runBRTask+0x26c>)
 8005c3a:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	bf14      	ite	ne
 8005c42:	2301      	movne	r3, #1
 8005c44:	2300      	moveq	r3, #0
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2110      	movs	r1, #16
 8005c4c:	4867      	ldr	r0, [pc, #412]	@ (8005dec <runBRTask+0x280>)
 8005c4e:	f002 fc1d 	bl	800848c <HAL_GPIO_WritePin>
 8005c52:	4b61      	ldr	r3, [pc, #388]	@ (8005dd8 <runBRTask+0x26c>)
 8005c54:	f8b3 2120 	ldrh.w	r2, [r3, #288]	@ 0x120
 8005c58:	4b65      	ldr	r3, [pc, #404]	@ (8005df0 <runBRTask+0x284>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8005dd8 <runBRTask+0x26c>)
 8005c60:	f8b3 2122 	ldrh.w	r2, [r3, #290]	@ 0x122
 8005c64:	4b62      	ldr	r3, [pc, #392]	@ (8005df0 <runBRTask+0x284>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	639a      	str	r2, [r3, #56]	@ 0x38
			  RobotTurn(&targetAngle);
 8005c6a:	485f      	ldr	r0, [pc, #380]	@ (8005de8 <runBRTask+0x27c>)
 8005c6c:	f7fd fd4c 	bl	8003708 <RobotTurn>
			  osDelay(10);
 8005c70:	200a      	movs	r0, #10
 8005c72:	f006 ff6d 	bl	800cb50 <osDelay>
			  targetDist = 5;
 8005c76:	4b5f      	ldr	r3, [pc, #380]	@ (8005df4 <runBRTask+0x288>)
 8005c78:	4a5f      	ldr	r2, [pc, #380]	@ (8005df8 <runBRTask+0x28c>)
 8005c7a:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2100      	movs	r1, #0
 8005c80:	485c      	ldr	r0, [pc, #368]	@ (8005df4 <runBRTask+0x288>)
 8005c82:	f7fd f8c5 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 8005c86:	200a      	movs	r0, #10
 8005c88:	f006 ff62 	bl	800cb50 <osDelay>
			  break;
 8005c8c:	e114      	b.n	8005eb8 <runBRTask+0x34c>
		  case 20: // BR20 (outdoor 3x1)
			  targetDist = 7;
 8005c8e:	4b59      	ldr	r3, [pc, #356]	@ (8005df4 <runBRTask+0x288>)
 8005c90:	4a5a      	ldr	r2, [pc, #360]	@ (8005dfc <runBRTask+0x290>)
 8005c92:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005c94:	2200      	movs	r2, #0
 8005c96:	2101      	movs	r1, #1
 8005c98:	4856      	ldr	r0, [pc, #344]	@ (8005df4 <runBRTask+0x288>)
 8005c9a:	f7fd f8b9 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 8005c9e:	200a      	movs	r0, #10
 8005ca0:	f006 ff56 	bl	800cb50 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR20], &htim8, &htim1, targetAngle);
 8005ca4:	4b4c      	ldr	r3, [pc, #304]	@ (8005dd8 <runBRTask+0x26c>)
 8005ca6:	edd3 7a39 	vldr	s15, [r3, #228]	@ 0xe4
 8005caa:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8005ddc <runBRTask+0x270>
 8005cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb6:	dd01      	ble.n	8005cbc <runBRTask+0x150>
 8005cb8:	2375      	movs	r3, #117	@ 0x75
 8005cba:	e012      	b.n	8005ce2 <runBRTask+0x176>
 8005cbc:	4b46      	ldr	r3, [pc, #280]	@ (8005dd8 <runBRTask+0x26c>)
 8005cbe:	edd3 7a39 	vldr	s15, [r3, #228]	@ 0xe4
 8005cc2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8005de0 <runBRTask+0x274>
 8005cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cce:	d501      	bpl.n	8005cd4 <runBRTask+0x168>
 8005cd0:	2330      	movs	r3, #48	@ 0x30
 8005cd2:	e006      	b.n	8005ce2 <runBRTask+0x176>
 8005cd4:	4b40      	ldr	r3, [pc, #256]	@ (8005dd8 <runBRTask+0x26c>)
 8005cd6:	edd3 7a39 	vldr	s15, [r3, #228]	@ 0xe4
 8005cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cde:	ee17 3a90 	vmov	r3, s15
 8005ce2:	4a40      	ldr	r2, [pc, #256]	@ (8005de4 <runBRTask+0x278>)
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ce8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005cec:	f001 fb32 	bl	8007354 <HAL_Delay>
 8005cf0:	4b39      	ldr	r3, [pc, #228]	@ (8005dd8 <runBRTask+0x26c>)
 8005cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8005de8 <runBRTask+0x27c>)
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4b37      	ldr	r3, [pc, #220]	@ (8005dd8 <runBRTask+0x26c>)
 8005cfc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2104      	movs	r1, #4
 8005d0e:	4837      	ldr	r0, [pc, #220]	@ (8005dec <runBRTask+0x280>)
 8005d10:	f002 fbbc 	bl	800848c <HAL_GPIO_WritePin>
 8005d14:	4b30      	ldr	r3, [pc, #192]	@ (8005dd8 <runBRTask+0x26c>)
 8005d16:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	bf14      	ite	ne
 8005d1e:	2301      	movne	r3, #1
 8005d20:	2300      	moveq	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	2108      	movs	r1, #8
 8005d28:	4830      	ldr	r0, [pc, #192]	@ (8005dec <runBRTask+0x280>)
 8005d2a:	f002 fbaf 	bl	800848c <HAL_GPIO_WritePin>
 8005d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8005dd8 <runBRTask+0x26c>)
 8005d30:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2120      	movs	r1, #32
 8005d42:	482a      	ldr	r0, [pc, #168]	@ (8005dec <runBRTask+0x280>)
 8005d44:	f002 fba2 	bl	800848c <HAL_GPIO_WritePin>
 8005d48:	4b23      	ldr	r3, [pc, #140]	@ (8005dd8 <runBRTask+0x26c>)
 8005d4a:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2300      	moveq	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2110      	movs	r1, #16
 8005d5c:	4823      	ldr	r0, [pc, #140]	@ (8005dec <runBRTask+0x280>)
 8005d5e:	f002 fb95 	bl	800848c <HAL_GPIO_WritePin>
 8005d62:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd8 <runBRTask+0x26c>)
 8005d64:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8005d68:	4b21      	ldr	r3, [pc, #132]	@ (8005df0 <runBRTask+0x284>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd8 <runBRTask+0x26c>)
 8005d70:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	@ 0xe2
 8005d74:	4b1e      	ldr	r3, [pc, #120]	@ (8005df0 <runBRTask+0x284>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	639a      	str	r2, [r3, #56]	@ 0x38
			  RobotTurn(&targetAngle);
 8005d7a:	481b      	ldr	r0, [pc, #108]	@ (8005de8 <runBRTask+0x27c>)
 8005d7c:	f7fd fcc4 	bl	8003708 <RobotTurn>
			  osDelay(10);
 8005d80:	200a      	movs	r0, #10
 8005d82:	f006 fee5 	bl	800cb50 <osDelay>
			  targetDist = 3;
 8005d86:	4b1b      	ldr	r3, [pc, #108]	@ (8005df4 <runBRTask+0x288>)
 8005d88:	4a1d      	ldr	r2, [pc, #116]	@ (8005e00 <runBRTask+0x294>)
 8005d8a:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2101      	movs	r1, #1
 8005d90:	4818      	ldr	r0, [pc, #96]	@ (8005df4 <runBRTask+0x288>)
 8005d92:	f7fd f83d 	bl	8002e10 <RobotMoveDist>
			  osDelay(10);
 8005d96:	200a      	movs	r0, #10
 8005d98:	f006 feda 	bl	800cb50 <osDelay>
			  break;
 8005d9c:	e08c      	b.n	8005eb8 <runBRTask+0x34c>
		  default: // BR00 (indoor 3x1)
//			  targetDist = 7;
//			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
//			  osDelay(10);
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 8005d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd8 <runBRTask+0x26c>)
 8005da0:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8005da4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005ddc <runBRTask+0x270>
 8005da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db0:	dd01      	ble.n	8005db6 <runBRTask+0x24a>
 8005db2:	2375      	movs	r3, #117	@ 0x75
 8005db4:	e02d      	b.n	8005e12 <runBRTask+0x2a6>
 8005db6:	4b08      	ldr	r3, [pc, #32]	@ (8005dd8 <runBRTask+0x26c>)
 8005db8:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8005dbc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8005de0 <runBRTask+0x274>
 8005dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc8:	d51c      	bpl.n	8005e04 <runBRTask+0x298>
 8005dca:	2330      	movs	r3, #48	@ 0x30
 8005dcc:	e021      	b.n	8005e12 <runBRTask+0x2a6>
 8005dce:	bf00      	nop
 8005dd0:	20000134 	.word	0x20000134
 8005dd4:	20000690 	.word	0x20000690
 8005dd8:	20000004 	.word	0x20000004
 8005ddc:	42ea0000 	.word	0x42ea0000
 8005de0:	42400000 	.word	0x42400000
 8005de4:	20000420 	.word	0x20000420
 8005de8:	200006a8 	.word	0x200006a8
 8005dec:	40020000 	.word	0x40020000
 8005df0:	20000588 	.word	0x20000588
 8005df4:	200006bc 	.word	0x200006bc
 8005df8:	40a00000 	.word	0x40a00000
 8005dfc:	40e00000 	.word	0x40e00000
 8005e00:	40400000 	.word	0x40400000
 8005e04:	4b4b      	ldr	r3, [pc, #300]	@ (8005f34 <runBRTask+0x3c8>)
 8005e06:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8005e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0e:	ee17 3a90 	vmov	r3, s15
 8005e12:	4a49      	ldr	r2, [pc, #292]	@ (8005f38 <runBRTask+0x3cc>)
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e18:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005e1c:	f001 fa9a 	bl	8007354 <HAL_Delay>
 8005e20:	4b44      	ldr	r3, [pc, #272]	@ (8005f34 <runBRTask+0x3c8>)
 8005e22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e26:	4a45      	ldr	r2, [pc, #276]	@ (8005f3c <runBRTask+0x3d0>)
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b42      	ldr	r3, [pc, #264]	@ (8005f34 <runBRTask+0x3c8>)
 8005e2c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2104      	movs	r1, #4
 8005e3e:	4840      	ldr	r0, [pc, #256]	@ (8005f40 <runBRTask+0x3d4>)
 8005e40:	f002 fb24 	bl	800848c <HAL_GPIO_WritePin>
 8005e44:	4b3b      	ldr	r3, [pc, #236]	@ (8005f34 <runBRTask+0x3c8>)
 8005e46:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bf14      	ite	ne
 8005e4e:	2301      	movne	r3, #1
 8005e50:	2300      	moveq	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	2108      	movs	r1, #8
 8005e58:	4839      	ldr	r0, [pc, #228]	@ (8005f40 <runBRTask+0x3d4>)
 8005e5a:	f002 fb17 	bl	800848c <HAL_GPIO_WritePin>
 8005e5e:	4b35      	ldr	r3, [pc, #212]	@ (8005f34 <runBRTask+0x3c8>)
 8005e60:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bf0c      	ite	eq
 8005e68:	2301      	moveq	r3, #1
 8005e6a:	2300      	movne	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2120      	movs	r1, #32
 8005e72:	4833      	ldr	r0, [pc, #204]	@ (8005f40 <runBRTask+0x3d4>)
 8005e74:	f002 fb0a 	bl	800848c <HAL_GPIO_WritePin>
 8005e78:	4b2e      	ldr	r3, [pc, #184]	@ (8005f34 <runBRTask+0x3c8>)
 8005e7a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bf14      	ite	ne
 8005e82:	2301      	movne	r3, #1
 8005e84:	2300      	moveq	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2110      	movs	r1, #16
 8005e8c:	482c      	ldr	r0, [pc, #176]	@ (8005f40 <runBRTask+0x3d4>)
 8005e8e:	f002 fafd 	bl	800848c <HAL_GPIO_WritePin>
 8005e92:	4b28      	ldr	r3, [pc, #160]	@ (8005f34 <runBRTask+0x3c8>)
 8005e94:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8005e98:	4b2a      	ldr	r3, [pc, #168]	@ (8005f44 <runBRTask+0x3d8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e9e:	4b25      	ldr	r3, [pc, #148]	@ (8005f34 <runBRTask+0x3c8>)
 8005ea0:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	@ 0xa2
 8005ea4:	4b27      	ldr	r3, [pc, #156]	@ (8005f44 <runBRTask+0x3d8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	639a      	str	r2, [r3, #56]	@ 0x38
			  RobotTurn(&targetAngle);
 8005eaa:	4824      	ldr	r0, [pc, #144]	@ (8005f3c <runBRTask+0x3d0>)
 8005eac:	f7fd fc2c 	bl	8003708 <RobotTurn>
			  osDelay(10);
 8005eb0:	200a      	movs	r0, #10
 8005eb2:	f006 fe4d 	bl	800cb50 <osDelay>
//			  targetDist = 3;
//			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
//			  targetDist = 3;
//			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
//			  osDelay(10);
			  break;
 8005eb6:	bf00      	nop
		  }


		  clickOnce = 0;
 8005eb8:	4b23      	ldr	r3, [pc, #140]	@ (8005f48 <runBRTask+0x3dc>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8005ebe:	4b23      	ldr	r3, [pc, #140]	@ (8005f4c <runBRTask+0x3e0>)
 8005ec0:	781a      	ldrb	r2, [r3, #0]
 8005ec2:	4b23      	ldr	r3, [pc, #140]	@ (8005f50 <runBRTask+0x3e4>)
 8005ec4:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8005ec6:	4b21      	ldr	r3, [pc, #132]	@ (8005f4c <runBRTask+0x3e0>)
 8005ec8:	220b      	movs	r2, #11
 8005eca:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8005ecc:	4b21      	ldr	r3, [pc, #132]	@ (8005f54 <runBRTask+0x3e8>)
 8005ece:	781a      	ldrb	r2, [r3, #0]
 8005ed0:	4b20      	ldr	r3, [pc, #128]	@ (8005f54 <runBRTask+0x3e8>)
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d112      	bne.n	8005efe <runBRTask+0x392>
				__CLEAR_CURCMD(curCmd);
 8005ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8005f58 <runBRTask+0x3ec>)
 8005eda:	2264      	movs	r2, #100	@ 0x64
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	4b1e      	ldr	r3, [pc, #120]	@ (8005f58 <runBRTask+0x3ec>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8005ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f5c <runBRTask+0x3f0>)
 8005ee6:	210f      	movs	r1, #15
 8005ee8:	481d      	ldr	r0, [pc, #116]	@ (8005f60 <runBRTask+0x3f4>)
 8005eea:	f009 ffa9 	bl	800fe40 <sniprintf>
 8005eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ef2:	2206      	movs	r2, #6
 8005ef4:	491b      	ldr	r1, [pc, #108]	@ (8005f64 <runBRTask+0x3f8>)
 8005ef6:	481c      	ldr	r0, [pc, #112]	@ (8005f68 <runBRTask+0x3fc>)
 8005ef8:	f005 fcef 	bl	800b8da <HAL_UART_Transmit>
 8005efc:	e63a      	b.n	8005b74 <runBRTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005efe:	4b15      	ldr	r3, [pc, #84]	@ (8005f54 <runBRTask+0x3e8>)
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	4a15      	ldr	r2, [pc, #84]	@ (8005f58 <runBRTask+0x3ec>)
 8005f04:	4913      	ldr	r1, [pc, #76]	@ (8005f54 <runBRTask+0x3e8>)
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	4b11      	ldr	r3, [pc, #68]	@ (8005f54 <runBRTask+0x3e8>)
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a0f      	ldr	r2, [pc, #60]	@ (8005f54 <runBRTask+0x3e8>)
 8005f16:	7892      	ldrb	r2, [r2, #2]
 8005f18:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f1c:	fb01 f202 	mul.w	r2, r1, r2
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	4b0b      	ldr	r3, [pc, #44]	@ (8005f54 <runBRTask+0x3e8>)
 8005f26:	705a      	strb	r2, [r3, #1]
 8005f28:	4a10      	ldr	r2, [pc, #64]	@ (8005f6c <runBRTask+0x400>)
 8005f2a:	210f      	movs	r1, #15
 8005f2c:	480c      	ldr	r0, [pc, #48]	@ (8005f60 <runBRTask+0x3f4>)
 8005f2e:	f009 ff87 	bl	800fe40 <sniprintf>
	  if (curTask != TASK_BR) osDelay(1000);
 8005f32:	e61f      	b.n	8005b74 <runBRTask+0x8>
 8005f34:	20000004 	.word	0x20000004
 8005f38:	20000420 	.word	0x20000420
 8005f3c:	200006a8 	.word	0x200006a8
 8005f40:	40020000 	.word	0x40020000
 8005f44:	20000588 	.word	0x20000588
 8005f48:	20000754 	.word	0x20000754
 8005f4c:	20000134 	.word	0x20000134
 8005f50:	20000135 	.word	0x20000135
 8005f54:	2000065c 	.word	0x2000065c
 8005f58:	20000690 	.word	0x20000690
 8005f5c:	08013104 	.word	0x08013104
 8005f60:	20000694 	.word	0x20000694
 8005f64:	0801310c 	.word	0x0801310c
 8005f68:	200005d0 	.word	0x200005d0
 8005f6c:	08013114 	.word	0x08013114

08005f70 <runFastestPathTask_V2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFastestPathTask_V2 */
void runFastestPathTask_V2(void *argument)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFastestPathTask_V2 */
	const float FL_Offset_Y = 1.5;
 8005f78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005f7c:	60fb      	str	r3, [r7, #12]
	uint8_t turnSize = 2;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	72bb      	strb	r3, [r7, #10]
	uint8_t speedModeFP = SPEED_MODE_2;
 8005f82:	2302      	movs	r3, #2
 8005f84:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FASTESTPATH_V2) osDelay(1000);
 8005f86:	4b50      	ldr	r3, [pc, #320]	@ (80060c8 <runFastestPathTask_V2+0x158>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b09      	cmp	r3, #9
 8005f8c:	d004      	beq.n	8005f98 <runFastestPathTask_V2+0x28>
 8005f8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f92:	f006 fddd 	bl	800cb50 <osDelay>
 8005f96:	e092      	b.n	80060be <runFastestPathTask_V2+0x14e>
	  else {
		  turnSize = curCmd.val;
 8005f98:	4b4c      	ldr	r3, [pc, #304]	@ (80060cc <runFastestPathTask_V2+0x15c>)
 8005f9a:	885b      	ldrh	r3, [r3, #2]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	72bb      	strb	r3, [r7, #10]
		  speedModeFP = (turnSize == 1 || turnSize == 2) ? SPEED_MODE_2 : SPEED_MODE_1;
 8005fa0:	7abb      	ldrb	r3, [r7, #10]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d002      	beq.n	8005fac <runFastestPathTask_V2+0x3c>
 8005fa6:	7abb      	ldrb	r3, [r7, #10]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d101      	bne.n	8005fb0 <runFastestPathTask_V2+0x40>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e000      	b.n	8005fb2 <runFastestPathTask_V2+0x42>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	72fb      	strb	r3, [r7, #11]
//		  if (turnSize == 3 || turnSize == 4) speedModeFP = SPEED_MODE_1;
//		   STEP 1: move forward until x cm behind the obstacle
//		  if (step == 0) {
			 targetDist = 70;
 8005fb4:	4b46      	ldr	r3, [pc, #280]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 8005fb6:	4a47      	ldr	r2, [pc, #284]	@ (80060d4 <runFastestPathTask_V2+0x164>)
 8005fb8:	601a      	str	r2, [r3, #0]
			 RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 8005fba:	7afb      	ldrb	r3, [r7, #11]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	4843      	ldr	r0, [pc, #268]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 8005fc2:	f7fc ff25 	bl	8002e10 <RobotMoveDist>
		  switch (turnSize) {
 8005fc6:	7abb      	ldrb	r3, [r7, #10]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d81e      	bhi.n	800600c <runFastestPathTask_V2+0x9c>
 8005fce:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd4 <runFastestPathTask_V2+0x64>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005fe5 	.word	0x08005fe5
 8005fd8:	08005ff9 	.word	0x08005ff9
 8005fdc:	08005fe5 	.word	0x08005fe5
 8005fe0:	08005ff9 	.word	0x08005ff9
		  case 1:
		  case 3:
			  targetDist = 20 + 7 + FL_Offset_Y;
 8005fe4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fe8:	eeb3 7a0b 	vmov.f32	s14, #59	@ 0x41d80000  27.0
 8005fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ff0:	4b37      	ldr	r3, [pc, #220]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 8005ff2:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8005ff6:	e00a      	b.n	800600e <runFastestPathTask_V2+0x9e>
		  case 2:
		  case 4:
			  targetDist = 40 + 7 + FL_Offset_Y;
 8005ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ffc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80060d8 <runFastestPathTask_V2+0x168>
 8006000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006004:	4b32      	ldr	r3, [pc, #200]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 8006006:	edc3 7a00 	vstr	s15, [r3]
			  break;
 800600a:	e000      	b.n	800600e <runFastestPathTask_V2+0x9e>
		  default:
			  break;
 800600c:	bf00      	nop
		  }

			  RobotMoveDistObstacle(&targetDist, speedModeFP);
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	4619      	mov	r1, r3
 8006012:	482f      	ldr	r0, [pc, #188]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 8006014:	f7fd f890 	bl	8003138 <RobotMoveDistObstacle>
//		  } else if (step == 1) {
			  // STEP 2: turn left
			  FASTESTPATH_TURN_LEFT_90X(&turnSize);
 8006018:	f107 030a 	add.w	r3, r7, #10
 800601c:	4618      	mov	r0, r3
 800601e:	f7fd fd39 	bl	8003a94 <FASTESTPATH_TURN_LEFT_90X>
//		  } else if (step == 2) {
			  // STEP 3: turn right 180
			  FASTESTPATH_TURN_RIGHT_180X(&turnSize);
 8006022:	f107 030a 	add.w	r3, r7, #10
 8006026:	4618      	mov	r0, r3
 8006028:	f7fd fe06 	bl	8003c38 <FASTESTPATH_TURN_RIGHT_180X>
//		  } else if (step == 3) {
			  // STEP 4: move right by 94cm
			  switch (turnSize) {
 800602c:	7abb      	ldrb	r3, [r7, #10]
 800602e:	3b01      	subs	r3, #1
 8006030:	2b03      	cmp	r3, #3
 8006032:	d813      	bhi.n	800605c <runFastestPathTask_V2+0xec>
 8006034:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <runFastestPathTask_V2+0xcc>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	0800604d 	.word	0x0800604d
 8006040:	08006055 	.word	0x08006055
 8006044:	0800604d 	.word	0x0800604d
 8006048:	08006055 	.word	0x08006055
			  case 1:
			  case 3:
				  targetDist = 52;
 800604c:	4b20      	ldr	r3, [pc, #128]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 800604e:	4a23      	ldr	r2, [pc, #140]	@ (80060dc <runFastestPathTask_V2+0x16c>)
 8006050:	601a      	str	r2, [r3, #0]
				  break;
 8006052:	e004      	b.n	800605e <runFastestPathTask_V2+0xee>
			  case 2:
			  case 4:
				  targetDist = 70;
 8006054:	4b1e      	ldr	r3, [pc, #120]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 8006056:	4a1f      	ldr	r2, [pc, #124]	@ (80060d4 <runFastestPathTask_V2+0x164>)
 8006058:	601a      	str	r2, [r3, #0]
//				  targetDist = 60;
				  break;
 800605a:	e000      	b.n	800605e <runFastestPathTask_V2+0xee>
			  default:
				  break;
 800605c:	bf00      	nop
			  }
			  RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 800605e:	7afb      	ldrb	r3, [r7, #11]
 8006060:	461a      	mov	r2, r3
 8006062:	2101      	movs	r1, #1
 8006064:	481a      	ldr	r0, [pc, #104]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 8006066:	f7fc fed3 	bl	8002e10 <RobotMoveDist>
//		  } else if (step == 4) {
			  // STEP 5: turn right 180
			  FASTESTPATH_TURN_RIGHT_180X(&turnSize);
 800606a:	f107 030a 	add.w	r3, r7, #10
 800606e:	4618      	mov	r0, r3
 8006070:	f7fd fde2 	bl	8003c38 <FASTESTPATH_TURN_RIGHT_180X>
//		  } else if (step == 5) {
			  // STEP 6: turn left (back to initial path)
//			  FASTESTPATH_TURN_LEFT_90X(&turnSize);
			  FASTESTPATH_TURN_LEFT_90X_RETURN(&turnSize);
 8006074:	f107 030a 	add.w	r3, r7, #10
 8006078:	4618      	mov	r0, r3
 800607a:	f7fd fd67 	bl	8003b4c <FASTESTPATH_TURN_LEFT_90X_RETURN>
//		  } else if (step == 6) {
			  // STEP 7: move back to carpack
			  targetDist = 60;
 800607e:	4b14      	ldr	r3, [pc, #80]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 8006080:	4a17      	ldr	r2, [pc, #92]	@ (80060e0 <runFastestPathTask_V2+0x170>)
 8006082:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 8006084:	7afb      	ldrb	r3, [r7, #11]
 8006086:	461a      	mov	r2, r3
 8006088:	2101      	movs	r1, #1
 800608a:	4811      	ldr	r0, [pc, #68]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 800608c:	f7fc fec0 	bl	8002e10 <RobotMoveDist>
			  targetDist = 15;
 8006090:	4b0f      	ldr	r3, [pc, #60]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 8006092:	4a14      	ldr	r2, [pc, #80]	@ (80060e4 <runFastestPathTask_V2+0x174>)
 8006094:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, speedModeFP);
 8006096:	7afb      	ldrb	r3, [r7, #11]
 8006098:	4619      	mov	r1, r3
 800609a:	480d      	ldr	r0, [pc, #52]	@ (80060d0 <runFastestPathTask_V2+0x160>)
 800609c:	f7fd f84c 	bl	8003138 <RobotMoveDistObstacle>
//		  }

//		  step = (step + 1) % 7;

			// DONE.
			prevTask = curTask;
 80060a0:	4b09      	ldr	r3, [pc, #36]	@ (80060c8 <runFastestPathTask_V2+0x158>)
 80060a2:	781a      	ldrb	r2, [r3, #0]
 80060a4:	4b10      	ldr	r3, [pc, #64]	@ (80060e8 <runFastestPathTask_V2+0x178>)
 80060a6:	701a      	strb	r2, [r3, #0]
			curTask = TASK_NONE;
 80060a8:	4b07      	ldr	r3, [pc, #28]	@ (80060c8 <runFastestPathTask_V2+0x158>)
 80060aa:	220b      	movs	r2, #11
 80060ac:	701a      	strb	r2, [r3, #0]
//			__ACK_TASK_DONE(&huart3, rxMsg);
			snprintf((char *)rxMsg, sizeof(rxMsg) - 1, "done!"); \
 80060ae:	4a0f      	ldr	r2, [pc, #60]	@ (80060ec <runFastestPathTask_V2+0x17c>)
 80060b0:	210f      	movs	r1, #15
 80060b2:	480f      	ldr	r0, [pc, #60]	@ (80060f0 <runFastestPathTask_V2+0x180>)
 80060b4:	f009 fec4 	bl	800fe40 <sniprintf>
			//HAL_UART_Transmit(&huart3, (uint8_t *) &Distance, 7, 0xFFFF);
			//HAL_UART_Transmit(&huart3, (uint8_t *) "ACK|X\r\n", 7, 0xFFFF); \
			__CLEAR_CURCMD(curCmd);
			clickOnce = 0;
 80060b8:	4b0e      	ldr	r3, [pc, #56]	@ (80060f4 <runFastestPathTask_V2+0x184>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
	  }
    osDelay(1);
 80060be:	2001      	movs	r0, #1
 80060c0:	f006 fd46 	bl	800cb50 <osDelay>
	  if (curTask != TASK_FASTESTPATH_V2) osDelay(1000);
 80060c4:	e75f      	b.n	8005f86 <runFastestPathTask_V2+0x16>
 80060c6:	bf00      	nop
 80060c8:	20000134 	.word	0x20000134
 80060cc:	20000690 	.word	0x20000690
 80060d0:	200006bc 	.word	0x200006bc
 80060d4:	428c0000 	.word	0x428c0000
 80060d8:	423c0000 	.word	0x423c0000
 80060dc:	42500000 	.word	0x42500000
 80060e0:	42700000 	.word	0x42700000
 80060e4:	41700000 	.word	0x41700000
 80060e8:	20000135 	.word	0x20000135
 80060ec:	08013104 	.word	0x08013104
 80060f0:	20000694 	.word	0x20000694
 80060f4:	20000754 	.word	0x20000754

080060f8 <HCSR04_Read>:
  }
  /* USER CODE END runFastestPathTask_V2 */
}

void HCSR04_Read(void) //Call when u want to get reading from US
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 80060fc:	2201      	movs	r2, #1
 80060fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006102:	480b      	ldr	r0, [pc, #44]	@ (8006130 <HCSR04_Read+0x38>)
 8006104:	f002 f9c2 	bl	800848c <HAL_GPIO_WritePin>
	delay_us(10);
 8006108:	200a      	movs	r0, #10
 800610a:	f000 f815 	bl	8006138 <delay_us>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 800610e:	2200      	movs	r2, #0
 8006110:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006114:	4806      	ldr	r0, [pc, #24]	@ (8006130 <HCSR04_Read+0x38>)
 8006116:	f002 f9b9 	bl	800848c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800611a:	4b06      	ldr	r3, [pc, #24]	@ (8006134 <HCSR04_Read+0x3c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	4b04      	ldr	r3, [pc, #16]	@ (8006134 <HCSR04_Read+0x3c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0202 	orr.w	r2, r2, #2
 8006128:	60da      	str	r2, [r3, #12]
}
 800612a:	bf00      	nop
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40020c00 	.word	0x40020c00
 8006134:	200004f8 	.word	0x200004f8

08006138 <delay_us>:
void delay_us(uint16_t us)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8006142:	4b09      	ldr	r3, [pc, #36]	@ (8006168 <delay_us+0x30>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 800614a:	bf00      	nop
 800614c:	4b06      	ldr	r3, [pc, #24]	@ (8006168 <delay_us+0x30>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006152:	88fb      	ldrh	r3, [r7, #6]
 8006154:	429a      	cmp	r2, r3
 8006156:	d3f9      	bcc.n	800614c <delay_us+0x14>
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	200004f8 	.word	0x200004f8
 800616c:	00000000 	.word	0x00000000

08006170 <HAL_TIM_IC_CaptureCallback>:
//#define ECHO_PIN PE9
//#define ECHO_PORT PEB
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7f1b      	ldrb	r3, [r3, #28]
 800617c:	2b01      	cmp	r3, #1
 800617e:	f040 8083 	bne.w	8006288 <HAL_TIM_IC_CaptureCallback+0x118>
		if (Is_First_Captured == 0) {
 8006182:	4b45      	ldr	r3, [pc, #276]	@ (8006298 <HAL_TIM_IC_CaptureCallback+0x128>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d11a      	bne.n	80061c0 <HAL_TIM_IC_CaptureCallback+0x50>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800618a:	2100      	movs	r1, #0
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f004 fdcf 	bl	800ad30 <HAL_TIM_ReadCapturedValue>
 8006192:	4603      	mov	r3, r0
 8006194:	4a41      	ldr	r2, [pc, #260]	@ (800629c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8006196:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8006198:	4b3f      	ldr	r3, [pc, #252]	@ (8006298 <HAL_TIM_IC_CaptureCallback+0x128>)
 800619a:	2201      	movs	r2, #1
 800619c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6a1a      	ldr	r2, [r3, #32]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 020a 	bic.w	r2, r2, #10
 80061ac:	621a      	str	r2, [r3, #32]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6a1a      	ldr	r2, [r3, #32]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0202 	orr.w	r2, r2, #2
 80061bc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 80061be:	e063      	b.n	8006288 <HAL_TIM_IC_CaptureCallback+0x118>
		} else if (Is_First_Captured == 1) {
 80061c0:	4b35      	ldr	r3, [pc, #212]	@ (8006298 <HAL_TIM_IC_CaptureCallback+0x128>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d15f      	bne.n	8006288 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80061c8:	2100      	movs	r1, #0
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f004 fdb0 	bl	800ad30 <HAL_TIM_ReadCapturedValue>
 80061d0:	4603      	mov	r3, r0
 80061d2:	4a33      	ldr	r2, [pc, #204]	@ (80062a0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80061d4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2200      	movs	r2, #0
 80061dc:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1) {
 80061de:	4b30      	ldr	r3, [pc, #192]	@ (80062a0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4b2e      	ldr	r3, [pc, #184]	@ (800629c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d907      	bls.n	80061fa <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 80061ea:	4b2d      	ldr	r3, [pc, #180]	@ (80062a0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b2b      	ldr	r3, [pc, #172]	@ (800629c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	4a2b      	ldr	r2, [pc, #172]	@ (80062a4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	e00f      	b.n	800621a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 80061fa:	4b28      	ldr	r3, [pc, #160]	@ (800629c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b28      	ldr	r3, [pc, #160]	@ (80062a0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d909      	bls.n	800621a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (65535 - IC_Val1) + IC_Val2;
 8006206:	4b26      	ldr	r3, [pc, #152]	@ (80062a0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b24      	ldr	r3, [pc, #144]	@ (800629c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8006214:	33ff      	adds	r3, #255	@ 0xff
 8006216:	4a23      	ldr	r2, [pc, #140]	@ (80062a4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8006218:	6013      	str	r3, [r2, #0]
			Distance = Difference * .0343 / 2;
 800621a:	4b22      	ldr	r3, [pc, #136]	@ (80062a4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f7fa f970 	bl	8000504 <__aeabi_ui2d>
 8006224:	a31a      	add	r3, pc, #104	@ (adr r3, 8006290 <HAL_TIM_IC_CaptureCallback+0x120>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f7fa f9e5 	bl	80005f8 <__aeabi_dmul>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4610      	mov	r0, r2
 8006234:	4619      	mov	r1, r3
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800623e:	f7fa fb05 	bl	800084c <__aeabi_ddiv>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	f7fa fcad 	bl	8000ba8 <__aeabi_d2uiz>
 800624e:	4603      	mov	r3, r0
 8006250:	b29a      	uxth	r2, r3
 8006252:	4b15      	ldr	r3, [pc, #84]	@ (80062a8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8006254:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0;
 8006256:	4b10      	ldr	r3, [pc, #64]	@ (8006298 <HAL_TIM_IC_CaptureCallback+0x128>)
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6a1a      	ldr	r2, [r3, #32]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 020a 	bic.w	r2, r2, #10
 800626a:	621a      	str	r2, [r3, #32]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6a12      	ldr	r2, [r2, #32]
 8006276:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8006278:	4b0c      	ldr	r3, [pc, #48]	@ (80062ac <HAL_TIM_IC_CaptureCallback+0x13c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	4b0b      	ldr	r3, [pc, #44]	@ (80062ac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0202 	bic.w	r2, r2, #2
 8006286:	60da      	str	r2, [r3, #12]
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	04816f00 	.word	0x04816f00
 8006294:	3fa18fc5 	.word	0x3fa18fc5
 8006298:	20000734 	.word	0x20000734
 800629c:	2000072c 	.word	0x2000072c
 80062a0:	20000730 	.word	0x20000730
 80062a4:	20000738 	.word	0x20000738
 80062a8:	2000073c 	.word	0x2000073c
 80062ac:	200004f8 	.word	0x200004f8

080062b0 <sensorTask>:
void sensorTask(void *argument) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	uint8_t usVal[20] = { 0 };
 80062b8:	2300      	movs	r3, #0
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	f107 0310 	add.w	r3, r7, #16
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	609a      	str	r2, [r3, #8]
 80062c8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN StartUltrasonicTask */
		HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);  // HC-SR04 Sensor
 80062ca:	2100      	movs	r1, #0
 80062cc:	4813      	ldr	r0, [pc, #76]	@ (800631c <sensorTask+0x6c>)
 80062ce:	f003 fef7 	bl	800a0c0 <HAL_TIM_IC_Start_IT>
		/* Infinite loop */
		for (;;) {
			HCSR04_Read();
 80062d2:	f7ff ff11 	bl	80060f8 <HCSR04_Read>
			sprintf(usVal, "Distance: %d \0", (int) Distance);
 80062d6:	4b12      	ldr	r3, [pc, #72]	@ (8006320 <sensorTask+0x70>)
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f107 030c 	add.w	r3, r7, #12
 80062e0:	4910      	ldr	r1, [pc, #64]	@ (8006324 <sensorTask+0x74>)
 80062e2:	4618      	mov	r0, r3
 80062e4:	f009 fde0 	bl	800fea8 <siprintf>
			OLED_ShowString(0, 20, usVal);
 80062e8:	f107 030c 	add.w	r3, r7, #12
 80062ec:	461a      	mov	r2, r3
 80062ee:	2114      	movs	r1, #20
 80062f0:	2000      	movs	r0, #0
 80062f2:	f000 fa91 	bl	8006818 <OLED_ShowString>

			if (Distance <= usThreshold && usFlag == 1) {
 80062f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006320 <sensorTask+0x70>)
 80062f8:	881a      	ldrh	r2, [r3, #0]
 80062fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006328 <sensorTask+0x78>)
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d808      	bhi.n	8006314 <sensorTask+0x64>
 8006302:	4b0a      	ldr	r3, [pc, #40]	@ (800632c <sensorTask+0x7c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d104      	bne.n	8006314 <sensorTask+0x64>
				usFlag = 0;
 800630a:	4b08      	ldr	r3, [pc, #32]	@ (800632c <sensorTask+0x7c>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]
				//moveCarStop();
				motorStop();
 8006310:	f000 f832 	bl	8006378 <motorStop>
			}

			osDelay(100);
 8006314:	2064      	movs	r0, #100	@ 0x64
 8006316:	f006 fc1b 	bl	800cb50 <osDelay>
			HCSR04_Read();
 800631a:	e7da      	b.n	80062d2 <sensorTask+0x22>
 800631c:	200004f8 	.word	0x200004f8
 8006320:	2000073c 	.word	0x2000073c
 8006324:	08013150 	.word	0x08013150
 8006328:	2000013c 	.word	0x2000013c
 800632c:	20000740 	.word	0x20000740

08006330 <setLeftPWM>:
		}
		/* USER CODE END StartUltrasonicTask */

}
void setLeftPWM(uint16_t dutyCycle) {
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, dutyCycle);
 800633a:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <setLeftPWM+0x20>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	88fa      	ldrh	r2, [r7, #6]
 8006340:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20000588 	.word	0x20000588

08006354 <setRightPWM>:

void setRightPWM(uint16_t dutyCycle) {
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);
 800635e:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <setRightPWM+0x20>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20000588 	.word	0x20000588

08006378 <motorStop>:

void motorStop() {
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
	// ------- left motor
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800637c:	2200      	movs	r2, #0
 800637e:	2120      	movs	r1, #32
 8006380:	480c      	ldr	r0, [pc, #48]	@ (80063b4 <motorStop+0x3c>)
 8006382:	f002 f883 	bl	800848c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8006386:	2200      	movs	r2, #0
 8006388:	2110      	movs	r1, #16
 800638a:	480a      	ldr	r0, [pc, #40]	@ (80063b4 <motorStop+0x3c>)
 800638c:	f002 f87e 	bl	800848c <HAL_GPIO_WritePin>
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8006390:	2200      	movs	r2, #0
 8006392:	2104      	movs	r1, #4
 8006394:	4807      	ldr	r0, [pc, #28]	@ (80063b4 <motorStop+0x3c>)
 8006396:	f002 f879 	bl	800848c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800639a:	2200      	movs	r2, #0
 800639c:	2108      	movs	r1, #8
 800639e:	4805      	ldr	r0, [pc, #20]	@ (80063b4 <motorStop+0x3c>)
 80063a0:	f002 f874 	bl	800848c <HAL_GPIO_WritePin>
	setLeftPWM(0);
 80063a4:	2000      	movs	r0, #0
 80063a6:	f7ff ffc3 	bl	8006330 <setLeftPWM>
	setRightPWM(0);
 80063aa:	2000      	movs	r0, #0
 80063ac:	f7ff ffd2 	bl	8006354 <setRightPWM>
}
 80063b0:	bf00      	nop
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40020000 	.word	0x40020000

080063b8 <runBatteryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBatteryTask */
void runBatteryTask(void *argument)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBatteryTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc2);
 80063c0:	4819      	ldr	r0, [pc, #100]	@ (8006428 <runBatteryTask+0x70>)
 80063c2:	f001 f82f 	bl	8007424 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2,20);
 80063c6:	2114      	movs	r1, #20
 80063c8:	4817      	ldr	r0, [pc, #92]	@ (8006428 <runBatteryTask+0x70>)
 80063ca:	f001 f930 	bl	800762e <HAL_ADC_PollForConversion>
	batteryVal = HAL_ADC_GetValue(&hadc2) / 1421.752066 * 100;
 80063ce:	4816      	ldr	r0, [pc, #88]	@ (8006428 <runBatteryTask+0x70>)
 80063d0:	f001 fac8 	bl	8007964 <HAL_ADC_GetValue>
 80063d4:	4603      	mov	r3, r0
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fa f894 	bl	8000504 <__aeabi_ui2d>
 80063dc:	a310      	add	r3, pc, #64	@ (adr r3, 8006420 <runBatteryTask+0x68>)
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	f7fa fa33 	bl	800084c <__aeabi_ddiv>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4610      	mov	r0, r2
 80063ec:	4619      	mov	r1, r3
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	4b0e      	ldr	r3, [pc, #56]	@ (800642c <runBatteryTask+0x74>)
 80063f4:	f7fa f900 	bl	80005f8 <__aeabi_dmul>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4610      	mov	r0, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	f7fa fbf2 	bl	8000be8 <__aeabi_d2f>
 8006404:	4603      	mov	r3, r0
 8006406:	4a0a      	ldr	r2, [pc, #40]	@ (8006430 <runBatteryTask+0x78>)
 8006408:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc2);
 800640a:	4807      	ldr	r0, [pc, #28]	@ (8006428 <runBatteryTask+0x70>)
 800640c:	f001 f8dc 	bl	80075c8 <HAL_ADC_Stop>
    osDelay(30000); // check battery level every 30 seconds
 8006410:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006414:	f006 fb9c 	bl	800cb50 <osDelay>
	HAL_ADC_Start(&hadc2);
 8006418:	bf00      	nop
 800641a:	e7d1      	b.n	80063c0 <runBatteryTask+0x8>
 800641c:	f3af 8000 	nop.w
 8006420:	1d96e9bc 	.word	0x1d96e9bc
 8006424:	40963702 	.word	0x40963702
 8006428:	20000384 	.word	0x20000384
 800642c:	40590000 	.word	0x40590000
 8006430:	20000718 	.word	0x20000718

08006434 <runMoveDistObsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 800643c:	4b2d      	ldr	r3, [pc, #180]	@ (80064f4 <runMoveDistObsTask+0xc0>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b07      	cmp	r3, #7
 8006442:	d004      	beq.n	800644e <runMoveDistObsTask+0x1a>
 8006444:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006448:	f006 fb82 	bl	800cb50 <osDelay>
 800644c:	e7f6      	b.n	800643c <runMoveDistObsTask+0x8>
	  else {
		  targetDist = (float) curCmd.val;
 800644e:	4b2a      	ldr	r3, [pc, #168]	@ (80064f8 <runMoveDistObsTask+0xc4>)
 8006450:	885b      	ldrh	r3, [r3, #2]
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645a:	4b28      	ldr	r3, [pc, #160]	@ (80064fc <runMoveDistObsTask+0xc8>)
 800645c:	edc3 7a00 	vstr	s15, [r3]
		  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8006460:	2102      	movs	r1, #2
 8006462:	4826      	ldr	r0, [pc, #152]	@ (80064fc <runMoveDistObsTask+0xc8>)
 8006464:	f7fc fe68 	bl	8003138 <RobotMoveDistObstacle>

		  __ON_TASK_END(&htim8, prevTask, curTask);
 8006468:	4b25      	ldr	r3, [pc, #148]	@ (8006500 <runMoveDistObsTask+0xcc>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2200      	movs	r2, #0
 800646e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006470:	4b23      	ldr	r3, [pc, #140]	@ (8006500 <runMoveDistObsTask+0xcc>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2200      	movs	r2, #0
 8006476:	639a      	str	r2, [r3, #56]	@ 0x38
 8006478:	4b1e      	ldr	r3, [pc, #120]	@ (80064f4 <runMoveDistObsTask+0xc0>)
 800647a:	781a      	ldrb	r2, [r3, #0]
 800647c:	4b21      	ldr	r3, [pc, #132]	@ (8006504 <runMoveDistObsTask+0xd0>)
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	4b1c      	ldr	r3, [pc, #112]	@ (80064f4 <runMoveDistObsTask+0xc0>)
 8006482:	220b      	movs	r2, #11
 8006484:	701a      	strb	r2, [r3, #0]
		  clickOnce = 0;
 8006486:	4b20      	ldr	r3, [pc, #128]	@ (8006508 <runMoveDistObsTask+0xd4>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]

		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800648c:	4b1f      	ldr	r3, [pc, #124]	@ (800650c <runMoveDistObsTask+0xd8>)
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	4b1e      	ldr	r3, [pc, #120]	@ (800650c <runMoveDistObsTask+0xd8>)
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	429a      	cmp	r2, r3
 8006496:	d112      	bne.n	80064be <runMoveDistObsTask+0x8a>
			__CLEAR_CURCMD(curCmd);
 8006498:	4b17      	ldr	r3, [pc, #92]	@ (80064f8 <runMoveDistObsTask+0xc4>)
 800649a:	2264      	movs	r2, #100	@ 0x64
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	4b16      	ldr	r3, [pc, #88]	@ (80064f8 <runMoveDistObsTask+0xc4>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 80064a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006510 <runMoveDistObsTask+0xdc>)
 80064a6:	210f      	movs	r1, #15
 80064a8:	481a      	ldr	r0, [pc, #104]	@ (8006514 <runMoveDistObsTask+0xe0>)
 80064aa:	f009 fcc9 	bl	800fe40 <sniprintf>
 80064ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80064b2:	2206      	movs	r2, #6
 80064b4:	4918      	ldr	r1, [pc, #96]	@ (8006518 <runMoveDistObsTask+0xe4>)
 80064b6:	4819      	ldr	r0, [pc, #100]	@ (800651c <runMoveDistObsTask+0xe8>)
 80064b8:	f005 fa0f 	bl	800b8da <HAL_UART_Transmit>
 80064bc:	e7be      	b.n	800643c <runMoveDistObsTask+0x8>
		} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80064be:	4b13      	ldr	r3, [pc, #76]	@ (800650c <runMoveDistObsTask+0xd8>)
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	4a0d      	ldr	r2, [pc, #52]	@ (80064f8 <runMoveDistObsTask+0xc4>)
 80064c4:	4911      	ldr	r1, [pc, #68]	@ (800650c <runMoveDistObsTask+0xd8>)
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4b0f      	ldr	r3, [pc, #60]	@ (800650c <runMoveDistObsTask+0xd8>)
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	3301      	adds	r3, #1
 80064d4:	4a0d      	ldr	r2, [pc, #52]	@ (800650c <runMoveDistObsTask+0xd8>)
 80064d6:	7892      	ldrb	r2, [r2, #2]
 80064d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80064dc:	fb01 f202 	mul.w	r2, r1, r2
 80064e0:	1a9b      	subs	r3, r3, r2
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	4b09      	ldr	r3, [pc, #36]	@ (800650c <runMoveDistObsTask+0xd8>)
 80064e6:	705a      	strb	r2, [r3, #1]
 80064e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006520 <runMoveDistObsTask+0xec>)
 80064ea:	210f      	movs	r1, #15
 80064ec:	4809      	ldr	r0, [pc, #36]	@ (8006514 <runMoveDistObsTask+0xe0>)
 80064ee:	f009 fca7 	bl	800fe40 <sniprintf>
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 80064f2:	e7a3      	b.n	800643c <runMoveDistObsTask+0x8>
 80064f4:	20000134 	.word	0x20000134
 80064f8:	20000690 	.word	0x20000690
 80064fc:	200006bc 	.word	0x200006bc
 8006500:	20000588 	.word	0x20000588
 8006504:	20000135 	.word	0x20000135
 8006508:	20000754 	.word	0x20000754
 800650c:	2000065c 	.word	0x2000065c
 8006510:	08013104 	.word	0x08013104
 8006514:	20000694 	.word	0x20000694
 8006518:	0801310c 	.word	0x0801310c
 800651c:	200005d0 	.word	0x200005d0
 8006520:	08013114 	.word	0x08013114

08006524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006528:	b672      	cpsid	i
}
 800652a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800652c:	bf00      	nop
 800652e:	e7fd      	b.n	800652c <Error_Handler+0x8>

08006530 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8006536:	2300      	movs	r3, #0
 8006538:	71fb      	strb	r3, [r7, #7]
 800653a:	e026      	b.n	800658a <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	3b50      	subs	r3, #80	@ 0x50
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2100      	movs	r1, #0
 8006544:	4618      	mov	r0, r3
 8006546:	f000 f82b 	bl	80065a0 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800654a:	2100      	movs	r1, #0
 800654c:	2000      	movs	r0, #0
 800654e:	f000 f827 	bl	80065a0 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8006552:	2100      	movs	r1, #0
 8006554:	2010      	movs	r0, #16
 8006556:	f000 f823 	bl	80065a0 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800655a:	2300      	movs	r3, #0
 800655c:	71bb      	strb	r3, [r7, #6]
 800655e:	e00d      	b.n	800657c <OLED_Refresh_Gram+0x4c>
 8006560:	79ba      	ldrb	r2, [r7, #6]
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	490d      	ldr	r1, [pc, #52]	@ (800659c <OLED_Refresh_Gram+0x6c>)
 8006566:	00d2      	lsls	r2, r2, #3
 8006568:	440a      	add	r2, r1
 800656a:	4413      	add	r3, r2
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2101      	movs	r1, #1
 8006570:	4618      	mov	r0, r3
 8006572:	f000 f815 	bl	80065a0 <OLED_WR_Byte>
 8006576:	79bb      	ldrb	r3, [r7, #6]
 8006578:	3301      	adds	r3, #1
 800657a:	71bb      	strb	r3, [r7, #6]
 800657c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006580:	2b00      	cmp	r3, #0
 8006582:	daed      	bge.n	8006560 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8006584:	79fb      	ldrb	r3, [r7, #7]
 8006586:	3301      	adds	r3, #1
 8006588:	71fb      	strb	r3, [r7, #7]
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	2b07      	cmp	r3, #7
 800658e:	d9d5      	bls.n	800653c <OLED_Refresh_Gram+0xc>
	}   
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000760 	.word	0x20000760

080065a0 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4603      	mov	r3, r0
 80065a8:	460a      	mov	r2, r1
 80065aa:	71fb      	strb	r3, [r7, #7]
 80065ac:	4613      	mov	r3, r2
 80065ae:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80065b0:	79bb      	ldrb	r3, [r7, #6]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d006      	beq.n	80065c4 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80065b6:	2201      	movs	r2, #1
 80065b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80065bc:	481c      	ldr	r0, [pc, #112]	@ (8006630 <OLED_WR_Byte+0x90>)
 80065be:	f001 ff65 	bl	800848c <HAL_GPIO_WritePin>
 80065c2:	e005      	b.n	80065d0 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80065c4:	2200      	movs	r2, #0
 80065c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80065ca:	4819      	ldr	r0, [pc, #100]	@ (8006630 <OLED_WR_Byte+0x90>)
 80065cc:	f001 ff5e 	bl	800848c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]
 80065d4:	e01e      	b.n	8006614 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80065d6:	2200      	movs	r2, #0
 80065d8:	2120      	movs	r1, #32
 80065da:	4815      	ldr	r0, [pc, #84]	@ (8006630 <OLED_WR_Byte+0x90>)
 80065dc:	f001 ff56 	bl	800848c <HAL_GPIO_WritePin>
		if(dat&0x80)
 80065e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	da05      	bge.n	80065f4 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80065e8:	2201      	movs	r2, #1
 80065ea:	2140      	movs	r1, #64	@ 0x40
 80065ec:	4810      	ldr	r0, [pc, #64]	@ (8006630 <OLED_WR_Byte+0x90>)
 80065ee:	f001 ff4d 	bl	800848c <HAL_GPIO_WritePin>
 80065f2:	e004      	b.n	80065fe <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80065f4:	2200      	movs	r2, #0
 80065f6:	2140      	movs	r1, #64	@ 0x40
 80065f8:	480d      	ldr	r0, [pc, #52]	@ (8006630 <OLED_WR_Byte+0x90>)
 80065fa:	f001 ff47 	bl	800848c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80065fe:	2201      	movs	r2, #1
 8006600:	2120      	movs	r1, #32
 8006602:	480b      	ldr	r0, [pc, #44]	@ (8006630 <OLED_WR_Byte+0x90>)
 8006604:	f001 ff42 	bl	800848c <HAL_GPIO_WritePin>
		dat<<=1;   
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	3301      	adds	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	2b07      	cmp	r3, #7
 8006618:	d9dd      	bls.n	80065d6 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800661a:	2201      	movs	r2, #1
 800661c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006620:	4803      	ldr	r0, [pc, #12]	@ (8006630 <OLED_WR_Byte+0x90>)
 8006622:	f001 ff33 	bl	800848c <HAL_GPIO_WritePin>
} 
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	40021000 	.word	0x40021000

08006634 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800663a:	2300      	movs	r3, #0
 800663c:	71fb      	strb	r3, [r7, #7]
 800663e:	e014      	b.n	800666a <OLED_Clear+0x36>
 8006640:	2300      	movs	r3, #0
 8006642:	71bb      	strb	r3, [r7, #6]
 8006644:	e00a      	b.n	800665c <OLED_Clear+0x28>
 8006646:	79ba      	ldrb	r2, [r7, #6]
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	490c      	ldr	r1, [pc, #48]	@ (800667c <OLED_Clear+0x48>)
 800664c:	00d2      	lsls	r2, r2, #3
 800664e:	440a      	add	r2, r1
 8006650:	4413      	add	r3, r2
 8006652:	2200      	movs	r2, #0
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	79bb      	ldrb	r3, [r7, #6]
 8006658:	3301      	adds	r3, #1
 800665a:	71bb      	strb	r3, [r7, #6]
 800665c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006660:	2b00      	cmp	r3, #0
 8006662:	daf0      	bge.n	8006646 <OLED_Clear+0x12>
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	3301      	adds	r3, #1
 8006668:	71fb      	strb	r3, [r7, #7]
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	2b07      	cmp	r3, #7
 800666e:	d9e7      	bls.n	8006640 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8006670:	f7ff ff5e 	bl	8006530 <OLED_Refresh_Gram>
}
 8006674:	bf00      	nop
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20000760 	.word	0x20000760

08006680 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	71fb      	strb	r3, [r7, #7]
 800668a:	460b      	mov	r3, r1
 800668c:	71bb      	strb	r3, [r7, #6]
 800668e:	4613      	mov	r3, r2
 8006690:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8006696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669a:	2b00      	cmp	r3, #0
 800669c:	db41      	blt.n	8006722 <OLED_DrawPoint+0xa2>
 800669e:	79bb      	ldrb	r3, [r7, #6]
 80066a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80066a2:	d83e      	bhi.n	8006722 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80066a4:	79bb      	ldrb	r3, [r7, #6]
 80066a6:	08db      	lsrs	r3, r3, #3
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f1c3 0307 	rsb	r3, r3, #7
 80066ae:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80066b0:	79bb      	ldrb	r3, [r7, #6]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80066b8:	7b7b      	ldrb	r3, [r7, #13]
 80066ba:	f1c3 0307 	rsb	r3, r3, #7
 80066be:	2201      	movs	r2, #1
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80066c6:	797b      	ldrb	r3, [r7, #5]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d012      	beq.n	80066f2 <OLED_DrawPoint+0x72>
 80066cc:	79fa      	ldrb	r2, [r7, #7]
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	4917      	ldr	r1, [pc, #92]	@ (8006730 <OLED_DrawPoint+0xb0>)
 80066d2:	00d2      	lsls	r2, r2, #3
 80066d4:	440a      	add	r2, r1
 80066d6:	4413      	add	r3, r2
 80066d8:	7818      	ldrb	r0, [r3, #0]
 80066da:	79fa      	ldrb	r2, [r7, #7]
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	7bf9      	ldrb	r1, [r7, #15]
 80066e0:	4301      	orrs	r1, r0
 80066e2:	b2c8      	uxtb	r0, r1
 80066e4:	4912      	ldr	r1, [pc, #72]	@ (8006730 <OLED_DrawPoint+0xb0>)
 80066e6:	00d2      	lsls	r2, r2, #3
 80066e8:	440a      	add	r2, r1
 80066ea:	4413      	add	r3, r2
 80066ec:	4602      	mov	r2, r0
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	e018      	b.n	8006724 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80066f2:	79fa      	ldrb	r2, [r7, #7]
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	490e      	ldr	r1, [pc, #56]	@ (8006730 <OLED_DrawPoint+0xb0>)
 80066f8:	00d2      	lsls	r2, r2, #3
 80066fa:	440a      	add	r2, r1
 80066fc:	4413      	add	r3, r2
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b25a      	sxtb	r2, r3
 8006702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006706:	43db      	mvns	r3, r3
 8006708:	b25b      	sxtb	r3, r3
 800670a:	4013      	ands	r3, r2
 800670c:	b259      	sxtb	r1, r3
 800670e:	79fa      	ldrb	r2, [r7, #7]
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	b2c8      	uxtb	r0, r1
 8006714:	4906      	ldr	r1, [pc, #24]	@ (8006730 <OLED_DrawPoint+0xb0>)
 8006716:	00d2      	lsls	r2, r2, #3
 8006718:	440a      	add	r2, r1
 800671a:	4413      	add	r3, r2
 800671c:	4602      	mov	r2, r0
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	e000      	b.n	8006724 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8006722:	bf00      	nop
}
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	20000760 	.word	0x20000760

08006734 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8006734:	b590      	push	{r4, r7, lr}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	4604      	mov	r4, r0
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	461a      	mov	r2, r3
 8006742:	4623      	mov	r3, r4
 8006744:	71fb      	strb	r3, [r7, #7]
 8006746:	4603      	mov	r3, r0
 8006748:	71bb      	strb	r3, [r7, #6]
 800674a:	460b      	mov	r3, r1
 800674c:	717b      	strb	r3, [r7, #5]
 800674e:	4613      	mov	r3, r2
 8006750:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8006752:	79bb      	ldrb	r3, [r7, #6]
 8006754:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8006756:	797b      	ldrb	r3, [r7, #5]
 8006758:	3b20      	subs	r3, #32
 800675a:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800675c:	2300      	movs	r3, #0
 800675e:	73bb      	strb	r3, [r7, #14]
 8006760:	e04d      	b.n	80067fe <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8006762:	793b      	ldrb	r3, [r7, #4]
 8006764:	2b0c      	cmp	r3, #12
 8006766:	d10b      	bne.n	8006780 <OLED_ShowChar+0x4c>
 8006768:	797a      	ldrb	r2, [r7, #5]
 800676a:	7bb9      	ldrb	r1, [r7, #14]
 800676c:	4828      	ldr	r0, [pc, #160]	@ (8006810 <OLED_ShowChar+0xdc>)
 800676e:	4613      	mov	r3, r2
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4403      	add	r3, r0
 8006778:	440b      	add	r3, r1
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	73fb      	strb	r3, [r7, #15]
 800677e:	e007      	b.n	8006790 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8006780:	797a      	ldrb	r2, [r7, #5]
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	4923      	ldr	r1, [pc, #140]	@ (8006814 <OLED_ShowChar+0xe0>)
 8006786:	0112      	lsls	r2, r2, #4
 8006788:	440a      	add	r2, r1
 800678a:	4413      	add	r3, r2
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8006790:	2300      	movs	r3, #0
 8006792:	737b      	strb	r3, [r7, #13]
 8006794:	e02d      	b.n	80067f2 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8006796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	da07      	bge.n	80067ae <OLED_ShowChar+0x7a>
 800679e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80067a2:	79b9      	ldrb	r1, [r7, #6]
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff ff6a 	bl	8006680 <OLED_DrawPoint>
 80067ac:	e00c      	b.n	80067c8 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80067ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bf0c      	ite	eq
 80067b6:	2301      	moveq	r3, #1
 80067b8:	2300      	movne	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	79b9      	ldrb	r1, [r7, #6]
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff ff5c 	bl	8006680 <OLED_DrawPoint>
			temp<<=1;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
			y++;
 80067ce:	79bb      	ldrb	r3, [r7, #6]
 80067d0:	3301      	adds	r3, #1
 80067d2:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80067d4:	79ba      	ldrb	r2, [r7, #6]
 80067d6:	7b3b      	ldrb	r3, [r7, #12]
 80067d8:	1ad2      	subs	r2, r2, r3
 80067da:	793b      	ldrb	r3, [r7, #4]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d105      	bne.n	80067ec <OLED_ShowChar+0xb8>
			{
				y=y0;
 80067e0:	7b3b      	ldrb	r3, [r7, #12]
 80067e2:	71bb      	strb	r3, [r7, #6]
				x++;
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	3301      	adds	r3, #1
 80067e8:	71fb      	strb	r3, [r7, #7]
				break;
 80067ea:	e005      	b.n	80067f8 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80067ec:	7b7b      	ldrb	r3, [r7, #13]
 80067ee:	3301      	adds	r3, #1
 80067f0:	737b      	strb	r3, [r7, #13]
 80067f2:	7b7b      	ldrb	r3, [r7, #13]
 80067f4:	2b07      	cmp	r3, #7
 80067f6:	d9ce      	bls.n	8006796 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	3301      	adds	r3, #1
 80067fc:	73bb      	strb	r3, [r7, #14]
 80067fe:	7bba      	ldrb	r2, [r7, #14]
 8006800:	793b      	ldrb	r3, [r7, #4]
 8006802:	429a      	cmp	r2, r3
 8006804:	d3ad      	bcc.n	8006762 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8006806:	bf00      	nop
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	bd90      	pop	{r4, r7, pc}
 8006810:	08013394 	.word	0x08013394
 8006814:	08013808 	.word	0x08013808

08006818 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af02      	add	r7, sp, #8
 800681e:	4603      	mov	r3, r0
 8006820:	603a      	str	r2, [r7, #0]
 8006822:	71fb      	strb	r3, [r7, #7]
 8006824:	460b      	mov	r3, r1
 8006826:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8006828:	e01f      	b.n	800686a <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	2b7a      	cmp	r3, #122	@ 0x7a
 800682e:	d904      	bls.n	800683a <OLED_ShowString+0x22>
 8006830:	2300      	movs	r3, #0
 8006832:	71fb      	strb	r3, [r7, #7]
 8006834:	79bb      	ldrb	r3, [r7, #6]
 8006836:	3310      	adds	r3, #16
 8006838:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800683a:	79bb      	ldrb	r3, [r7, #6]
 800683c:	2b3a      	cmp	r3, #58	@ 0x3a
 800683e:	d905      	bls.n	800684c <OLED_ShowString+0x34>
 8006840:	2300      	movs	r3, #0
 8006842:	71fb      	strb	r3, [r7, #7]
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	71bb      	strb	r3, [r7, #6]
 8006848:	f7ff fef4 	bl	8006634 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781a      	ldrb	r2, [r3, #0]
 8006850:	79b9      	ldrb	r1, [r7, #6]
 8006852:	79f8      	ldrb	r0, [r7, #7]
 8006854:	2301      	movs	r3, #1
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	230c      	movs	r3, #12
 800685a:	f7ff ff6b 	bl	8006734 <OLED_ShowChar>
        x+=8;
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	3308      	adds	r3, #8
 8006862:	71fb      	strb	r3, [r7, #7]
        p++;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1db      	bne.n	800682a <OLED_ShowString+0x12>
    }  
}	 
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <OLED_Init>:

void OLED_Init(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8006880:	f002 fdde 	bl	8009440 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8006884:	4b41      	ldr	r3, [pc, #260]	@ (800698c <OLED_Init+0x110>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006888:	4a40      	ldr	r2, [pc, #256]	@ (800698c <OLED_Init+0x110>)
 800688a:	f023 0301 	bic.w	r3, r3, #1
 800688e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006890:	4b3e      	ldr	r3, [pc, #248]	@ (800698c <OLED_Init+0x110>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006894:	4a3d      	ldr	r2, [pc, #244]	@ (800698c <OLED_Init+0x110>)
 8006896:	f023 0304 	bic.w	r3, r3, #4
 800689a:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800689c:	f002 fde4 	bl	8009468 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80068a0:	2200      	movs	r2, #0
 80068a2:	2180      	movs	r1, #128	@ 0x80
 80068a4:	483a      	ldr	r0, [pc, #232]	@ (8006990 <OLED_Init+0x114>)
 80068a6:	f001 fdf1 	bl	800848c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80068aa:	2064      	movs	r0, #100	@ 0x64
 80068ac:	f000 fd52 	bl	8007354 <HAL_Delay>
	OLED_RST_Set();
 80068b0:	2201      	movs	r2, #1
 80068b2:	2180      	movs	r1, #128	@ 0x80
 80068b4:	4836      	ldr	r0, [pc, #216]	@ (8006990 <OLED_Init+0x114>)
 80068b6:	f001 fde9 	bl	800848c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80068ba:	2100      	movs	r1, #0
 80068bc:	20ae      	movs	r0, #174	@ 0xae
 80068be:	f7ff fe6f 	bl	80065a0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80068c2:	2100      	movs	r1, #0
 80068c4:	20d5      	movs	r0, #213	@ 0xd5
 80068c6:	f7ff fe6b 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80068ca:	2100      	movs	r1, #0
 80068cc:	2050      	movs	r0, #80	@ 0x50
 80068ce:	f7ff fe67 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80068d2:	2100      	movs	r1, #0
 80068d4:	20a8      	movs	r0, #168	@ 0xa8
 80068d6:	f7ff fe63 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80068da:	2100      	movs	r1, #0
 80068dc:	203f      	movs	r0, #63	@ 0x3f
 80068de:	f7ff fe5f 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80068e2:	2100      	movs	r1, #0
 80068e4:	20d3      	movs	r0, #211	@ 0xd3
 80068e6:	f7ff fe5b 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80068ea:	2100      	movs	r1, #0
 80068ec:	2000      	movs	r0, #0
 80068ee:	f7ff fe57 	bl	80065a0 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80068f2:	2100      	movs	r1, #0
 80068f4:	2040      	movs	r0, #64	@ 0x40
 80068f6:	f7ff fe53 	bl	80065a0 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80068fa:	2100      	movs	r1, #0
 80068fc:	208d      	movs	r0, #141	@ 0x8d
 80068fe:	f7ff fe4f 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8006902:	2100      	movs	r1, #0
 8006904:	2014      	movs	r0, #20
 8006906:	f7ff fe4b 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800690a:	2100      	movs	r1, #0
 800690c:	2020      	movs	r0, #32
 800690e:	f7ff fe47 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8006912:	2100      	movs	r1, #0
 8006914:	2002      	movs	r0, #2
 8006916:	f7ff fe43 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800691a:	2100      	movs	r1, #0
 800691c:	20a1      	movs	r0, #161	@ 0xa1
 800691e:	f7ff fe3f 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8006922:	2100      	movs	r1, #0
 8006924:	20c0      	movs	r0, #192	@ 0xc0
 8006926:	f7ff fe3b 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800692a:	2100      	movs	r1, #0
 800692c:	20da      	movs	r0, #218	@ 0xda
 800692e:	f7ff fe37 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8006932:	2100      	movs	r1, #0
 8006934:	2012      	movs	r0, #18
 8006936:	f7ff fe33 	bl	80065a0 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800693a:	2100      	movs	r1, #0
 800693c:	2081      	movs	r0, #129	@ 0x81
 800693e:	f7ff fe2f 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8006942:	2100      	movs	r1, #0
 8006944:	20ef      	movs	r0, #239	@ 0xef
 8006946:	f7ff fe2b 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800694a:	2100      	movs	r1, #0
 800694c:	20d9      	movs	r0, #217	@ 0xd9
 800694e:	f7ff fe27 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8006952:	2100      	movs	r1, #0
 8006954:	20f1      	movs	r0, #241	@ 0xf1
 8006956:	f7ff fe23 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800695a:	2100      	movs	r1, #0
 800695c:	20db      	movs	r0, #219	@ 0xdb
 800695e:	f7ff fe1f 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8006962:	2100      	movs	r1, #0
 8006964:	2030      	movs	r0, #48	@ 0x30
 8006966:	f7ff fe1b 	bl	80065a0 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800696a:	2100      	movs	r1, #0
 800696c:	20a4      	movs	r0, #164	@ 0xa4
 800696e:	f7ff fe17 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8006972:	2100      	movs	r1, #0
 8006974:	20a6      	movs	r0, #166	@ 0xa6
 8006976:	f7ff fe13 	bl	80065a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800697a:	2100      	movs	r1, #0
 800697c:	20af      	movs	r0, #175	@ 0xaf
 800697e:	f7ff fe0f 	bl	80065a0 <OLED_WR_Byte>
	OLED_Clear(); 
 8006982:	f7ff fe57 	bl	8006634 <OLED_Clear>
}
 8006986:	bf00      	nop
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40023800 	.word	0x40023800
 8006990:	40021000 	.word	0x40021000

08006994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800699a:	2300      	movs	r3, #0
 800699c:	607b      	str	r3, [r7, #4]
 800699e:	4b16      	ldr	r3, [pc, #88]	@ (80069f8 <HAL_MspInit+0x64>)
 80069a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a2:	4a15      	ldr	r2, [pc, #84]	@ (80069f8 <HAL_MspInit+0x64>)
 80069a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80069aa:	4b13      	ldr	r3, [pc, #76]	@ (80069f8 <HAL_MspInit+0x64>)
 80069ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069b2:	607b      	str	r3, [r7, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069b6:	2300      	movs	r3, #0
 80069b8:	603b      	str	r3, [r7, #0]
 80069ba:	4b0f      	ldr	r3, [pc, #60]	@ (80069f8 <HAL_MspInit+0x64>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069be:	4a0e      	ldr	r2, [pc, #56]	@ (80069f8 <HAL_MspInit+0x64>)
 80069c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80069c6:	4b0c      	ldr	r3, [pc, #48]	@ (80069f8 <HAL_MspInit+0x64>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80069d2:	2200      	movs	r2, #0
 80069d4:	210f      	movs	r1, #15
 80069d6:	f06f 0001 	mvn.w	r0, #1
 80069da:	f001 faf2 	bl	8007fc2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80069de:	2200      	movs	r2, #0
 80069e0:	2105      	movs	r1, #5
 80069e2:	2005      	movs	r0, #5
 80069e4:	f001 faed 	bl	8007fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80069e8:	2005      	movs	r0, #5
 80069ea:	f001 fb06 	bl	8007ffa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40023800 	.word	0x40023800

080069fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08c      	sub	sp, #48	@ 0x30
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a04:	f107 031c 	add.w	r3, r7, #28
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	605a      	str	r2, [r3, #4]
 8006a0e:	609a      	str	r2, [r3, #8]
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a36      	ldr	r2, [pc, #216]	@ (8006af4 <HAL_ADC_MspInit+0xf8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d130      	bne.n	8006a80 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61bb      	str	r3, [r7, #24]
 8006a22:	4b35      	ldr	r3, [pc, #212]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a26:	4a34      	ldr	r2, [pc, #208]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a2e:	4b32      	ldr	r3, [pc, #200]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a36:	61bb      	str	r3, [r7, #24]
 8006a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a42:	4a2d      	ldr	r2, [pc, #180]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006a56:	2301      	movs	r3, #1
 8006a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a62:	f107 031c 	add.w	r3, r7, #28
 8006a66:	4619      	mov	r1, r3
 8006a68:	4824      	ldr	r0, [pc, #144]	@ (8006afc <HAL_ADC_MspInit+0x100>)
 8006a6a:	f001 fb73 	bl	8008154 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2105      	movs	r1, #5
 8006a72:	2012      	movs	r0, #18
 8006a74:	f001 faa5 	bl	8007fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006a78:	2012      	movs	r0, #18
 8006a7a:	f001 fabe 	bl	8007ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006a7e:	e034      	b.n	8006aea <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1e      	ldr	r2, [pc, #120]	@ (8006b00 <HAL_ADC_MspInit+0x104>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d12f      	bne.n	8006aea <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a92:	4a19      	ldr	r2, [pc, #100]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006a94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a9a:	4b17      	ldr	r3, [pc, #92]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	4b13      	ldr	r3, [pc, #76]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aae:	4a12      	ldr	r2, [pc, #72]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ab6:	4b10      	ldr	r3, [pc, #64]	@ (8006af8 <HAL_ADC_MspInit+0xfc>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ace:	f107 031c 	add.w	r3, r7, #28
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4809      	ldr	r0, [pc, #36]	@ (8006afc <HAL_ADC_MspInit+0x100>)
 8006ad6:	f001 fb3d 	bl	8008154 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006ada:	2200      	movs	r2, #0
 8006adc:	2105      	movs	r1, #5
 8006ade:	2012      	movs	r0, #18
 8006ae0:	f001 fa6f 	bl	8007fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006ae4:	2012      	movs	r0, #18
 8006ae6:	f001 fa88 	bl	8007ffa <HAL_NVIC_EnableIRQ>
}
 8006aea:	bf00      	nop
 8006aec:	3730      	adds	r7, #48	@ 0x30
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	40012000 	.word	0x40012000
 8006af8:	40023800 	.word	0x40023800
 8006afc:	40020000 	.word	0x40020000
 8006b00:	40012100 	.word	0x40012100

08006b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08a      	sub	sp, #40	@ 0x28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b0c:	f107 0314 	add.w	r3, r7, #20
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	609a      	str	r2, [r3, #8]
 8006b18:	60da      	str	r2, [r3, #12]
 8006b1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a19      	ldr	r2, [pc, #100]	@ (8006b88 <HAL_I2C_MspInit+0x84>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d12c      	bne.n	8006b80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b26:	2300      	movs	r3, #0
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	4b18      	ldr	r3, [pc, #96]	@ (8006b8c <HAL_I2C_MspInit+0x88>)
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2e:	4a17      	ldr	r2, [pc, #92]	@ (8006b8c <HAL_I2C_MspInit+0x88>)
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b36:	4b15      	ldr	r3, [pc, #84]	@ (8006b8c <HAL_I2C_MspInit+0x88>)
 8006b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006b42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b48:	2312      	movs	r3, #18
 8006b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b50:	2303      	movs	r3, #3
 8006b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006b54:	2304      	movs	r3, #4
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b58:	f107 0314 	add.w	r3, r7, #20
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	480c      	ldr	r0, [pc, #48]	@ (8006b90 <HAL_I2C_MspInit+0x8c>)
 8006b60:	f001 faf8 	bl	8008154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	4b08      	ldr	r3, [pc, #32]	@ (8006b8c <HAL_I2C_MspInit+0x88>)
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6c:	4a07      	ldr	r2, [pc, #28]	@ (8006b8c <HAL_I2C_MspInit+0x88>)
 8006b6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b74:	4b05      	ldr	r3, [pc, #20]	@ (8006b8c <HAL_I2C_MspInit+0x88>)
 8006b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006b80:	bf00      	nop
 8006b82:	3728      	adds	r7, #40	@ 0x28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40005400 	.word	0x40005400
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	40020400 	.word	0x40020400

08006b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08c      	sub	sp, #48	@ 0x30
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b9c:	f107 031c 	add.w	r3, r7, #28
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	605a      	str	r2, [r3, #4]
 8006ba6:	609a      	str	r2, [r3, #8]
 8006ba8:	60da      	str	r2, [r3, #12]
 8006baa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a40      	ldr	r2, [pc, #256]	@ (8006cb4 <HAL_TIM_Base_MspInit+0x120>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d135      	bne.n	8006c22 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	4b3f      	ldr	r3, [pc, #252]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bbe:	4a3e      	ldr	r2, [pc, #248]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006bc0:	f043 0301 	orr.w	r3, r3, #1
 8006bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	4b38      	ldr	r3, [pc, #224]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bda:	4a37      	ldr	r2, [pc, #220]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006bdc:	f043 0310 	orr.w	r3, r3, #16
 8006be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006be2:	4b35      	ldr	r3, [pc, #212]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be6:	f003 0310 	and.w	r3, r3, #16
 8006bea:	617b      	str	r3, [r7, #20]
 8006bec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006bee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c00:	2301      	movs	r3, #1
 8006c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c04:	f107 031c 	add.w	r3, r7, #28
 8006c08:	4619      	mov	r1, r3
 8006c0a:	482c      	ldr	r0, [pc, #176]	@ (8006cbc <HAL_TIM_Base_MspInit+0x128>)
 8006c0c:	f001 faa2 	bl	8008154 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8006c10:	2200      	movs	r2, #0
 8006c12:	2105      	movs	r1, #5
 8006c14:	201b      	movs	r0, #27
 8006c16:	f001 f9d4 	bl	8007fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006c1a:	201b      	movs	r0, #27
 8006c1c:	f001 f9ed 	bl	8007ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006c20:	e044      	b.n	8006cac <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM6)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a26      	ldr	r2, [pc, #152]	@ (8006cc0 <HAL_TIM_Base_MspInit+0x12c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d10e      	bne.n	8006c4a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	4b21      	ldr	r3, [pc, #132]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c34:	4a20      	ldr	r2, [pc, #128]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006c36:	f043 0310 	orr.w	r3, r3, #16
 8006c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	693b      	ldr	r3, [r7, #16]
}
 8006c48:	e030      	b.n	8006cac <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM8)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8006cc4 <HAL_TIM_Base_MspInit+0x130>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d12b      	bne.n	8006cac <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	4b17      	ldr	r3, [pc, #92]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c5c:	4a16      	ldr	r2, [pc, #88]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006c5e:	f043 0302 	orr.w	r3, r3, #2
 8006c62:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c64:	4b14      	ldr	r3, [pc, #80]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c70:	2300      	movs	r3, #0
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	4b10      	ldr	r3, [pc, #64]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c78:	4a0f      	ldr	r2, [pc, #60]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006c7a:	f043 0304 	orr.w	r3, r3, #4
 8006c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c80:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb8 <HAL_TIM_Base_MspInit+0x124>)
 8006c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	60bb      	str	r3, [r7, #8]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8006c8c:	23c0      	movs	r3, #192	@ 0xc0
 8006c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c90:	2302      	movs	r3, #2
 8006c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ca0:	f107 031c 	add.w	r3, r7, #28
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4808      	ldr	r0, [pc, #32]	@ (8006cc8 <HAL_TIM_Base_MspInit+0x134>)
 8006ca8:	f001 fa54 	bl	8008154 <HAL_GPIO_Init>
}
 8006cac:	bf00      	nop
 8006cae:	3730      	adds	r7, #48	@ 0x30
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40010000 	.word	0x40010000
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40001000 	.word	0x40001000
 8006cc4:	40010400 	.word	0x40010400
 8006cc8:	40020800 	.word	0x40020800

08006ccc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08c      	sub	sp, #48	@ 0x30
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd4:	f107 031c 	add.w	r3, r7, #28
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	609a      	str	r2, [r3, #8]
 8006ce0:	60da      	str	r2, [r3, #12]
 8006ce2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cec:	d14b      	bne.n	8006d86 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf6:	4a3e      	ldr	r2, [pc, #248]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	4b38      	ldr	r3, [pc, #224]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d12:	4a37      	ldr	r2, [pc, #220]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006d14:	f043 0301 	orr.w	r3, r3, #1
 8006d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d1a:	4b35      	ldr	r3, [pc, #212]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	4b31      	ldr	r3, [pc, #196]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2e:	4a30      	ldr	r2, [pc, #192]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006d30:	f043 0302 	orr.w	r3, r3, #2
 8006d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d36:	4b2e      	ldr	r3, [pc, #184]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8006d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d50:	2300      	movs	r3, #0
 8006d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006d54:	2301      	movs	r3, #1
 8006d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8006d58:	f107 031c 	add.w	r3, r7, #28
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4825      	ldr	r0, [pc, #148]	@ (8006df4 <HAL_TIM_Encoder_MspInit+0x128>)
 8006d60:	f001 f9f8 	bl	8008154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8006d64:	2308      	movs	r3, #8
 8006d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d70:	2300      	movs	r3, #0
 8006d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006d74:	2301      	movs	r3, #1
 8006d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8006d78:	f107 031c 	add.w	r3, r7, #28
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	481e      	ldr	r0, [pc, #120]	@ (8006df8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006d80:	f001 f9e8 	bl	8008154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006d84:	e030      	b.n	8006de8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dfc <HAL_TIM_Encoder_MspInit+0x130>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d12b      	bne.n	8006de8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	4b16      	ldr	r3, [pc, #88]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d98:	4a15      	ldr	r2, [pc, #84]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006d9a:	f043 0302 	orr.w	r3, r3, #2
 8006d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006da0:	4b13      	ldr	r3, [pc, #76]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dac:	2300      	movs	r3, #0
 8006dae:	60bb      	str	r3, [r7, #8]
 8006db0:	4b0f      	ldr	r3, [pc, #60]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db4:	4a0e      	ldr	r2, [pc, #56]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006db6:	f043 0301 	orr.w	r3, r3, #1
 8006dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8006df0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8006dc8:	23c0      	movs	r3, #192	@ 0xc0
 8006dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dcc:	2302      	movs	r3, #2
 8006dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ddc:	f107 031c 	add.w	r3, r7, #28
 8006de0:	4619      	mov	r1, r3
 8006de2:	4804      	ldr	r0, [pc, #16]	@ (8006df4 <HAL_TIM_Encoder_MspInit+0x128>)
 8006de4:	f001 f9b6 	bl	8008154 <HAL_GPIO_Init>
}
 8006de8:	bf00      	nop
 8006dea:	3730      	adds	r7, #48	@ 0x30
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	40023800 	.word	0x40023800
 8006df4:	40020000 	.word	0x40020000
 8006df8:	40020400 	.word	0x40020400
 8006dfc:	40000400 	.word	0x40000400

08006e00 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	@ 0x28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e08:	f107 0314 	add.w	r3, r7, #20
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	605a      	str	r2, [r3, #4]
 8006e12:	609a      	str	r2, [r3, #8]
 8006e14:	60da      	str	r2, [r3, #12]
 8006e16:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006e94 <HAL_TIM_IC_MspInit+0x94>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d134      	bne.n	8006e8c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006e22:	2300      	movs	r3, #0
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	4b1c      	ldr	r3, [pc, #112]	@ (8006e98 <HAL_TIM_IC_MspInit+0x98>)
 8006e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8006e98 <HAL_TIM_IC_MspInit+0x98>)
 8006e2c:	f043 0304 	orr.w	r3, r3, #4
 8006e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e32:	4b19      	ldr	r3, [pc, #100]	@ (8006e98 <HAL_TIM_IC_MspInit+0x98>)
 8006e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	613b      	str	r3, [r7, #16]
 8006e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	4b15      	ldr	r3, [pc, #84]	@ (8006e98 <HAL_TIM_IC_MspInit+0x98>)
 8006e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e46:	4a14      	ldr	r2, [pc, #80]	@ (8006e98 <HAL_TIM_IC_MspInit+0x98>)
 8006e48:	f043 0308 	orr.w	r3, r3, #8
 8006e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e4e:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <HAL_TIM_IC_MspInit+0x98>)
 8006e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8006e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e60:	2302      	movs	r3, #2
 8006e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8006e70:	f107 0314 	add.w	r3, r7, #20
 8006e74:	4619      	mov	r1, r3
 8006e76:	4809      	ldr	r0, [pc, #36]	@ (8006e9c <HAL_TIM_IC_MspInit+0x9c>)
 8006e78:	f001 f96c 	bl	8008154 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2105      	movs	r1, #5
 8006e80:	201e      	movs	r0, #30
 8006e82:	f001 f89e 	bl	8007fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006e86:	201e      	movs	r0, #30
 8006e88:	f001 f8b7 	bl	8007ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006e8c:	bf00      	nop
 8006e8e:	3728      	adds	r7, #40	@ 0x28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40000800 	.word	0x40000800
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	40020c00 	.word	0x40020c00

08006ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ea8:	f107 030c 	add.w	r3, r7, #12
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	605a      	str	r2, [r3, #4]
 8006eb2:	609a      	str	r2, [r3, #8]
 8006eb4:	60da      	str	r2, [r3, #12]
 8006eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a12      	ldr	r2, [pc, #72]	@ (8006f08 <HAL_TIM_MspPostInit+0x68>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d11e      	bne.n	8006f00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60bb      	str	r3, [r7, #8]
 8006ec6:	4b11      	ldr	r3, [pc, #68]	@ (8006f0c <HAL_TIM_MspPostInit+0x6c>)
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eca:	4a10      	ldr	r2, [pc, #64]	@ (8006f0c <HAL_TIM_MspPostInit+0x6c>)
 8006ecc:	f043 0310 	orr.w	r3, r3, #16
 8006ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8006f0c <HAL_TIM_MspPostInit+0x6c>)
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	60bb      	str	r3, [r7, #8]
 8006edc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006ede:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006ee2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ef4:	f107 030c 	add.w	r3, r7, #12
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4805      	ldr	r0, [pc, #20]	@ (8006f10 <HAL_TIM_MspPostInit+0x70>)
 8006efc:	f001 f92a 	bl	8008154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006f00:	bf00      	nop
 8006f02:	3720      	adds	r7, #32
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	40021000 	.word	0x40021000

08006f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08a      	sub	sp, #40	@ 0x28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f1c:	f107 0314 	add.w	r3, r7, #20
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	609a      	str	r2, [r3, #8]
 8006f28:	60da      	str	r2, [r3, #12]
 8006f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa8 <HAL_UART_MspInit+0x94>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d134      	bne.n	8006fa0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006f36:	2300      	movs	r3, #0
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8006fac <HAL_UART_MspInit+0x98>)
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fac <HAL_UART_MspInit+0x98>)
 8006f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f46:	4b19      	ldr	r3, [pc, #100]	@ (8006fac <HAL_UART_MspInit+0x98>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	4b15      	ldr	r3, [pc, #84]	@ (8006fac <HAL_UART_MspInit+0x98>)
 8006f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5a:	4a14      	ldr	r2, [pc, #80]	@ (8006fac <HAL_UART_MspInit+0x98>)
 8006f5c:	f043 0304 	orr.w	r3, r3, #4
 8006f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f62:	4b12      	ldr	r3, [pc, #72]	@ (8006fac <HAL_UART_MspInit+0x98>)
 8006f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006f6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f74:	2302      	movs	r3, #2
 8006f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006f80:	2307      	movs	r3, #7
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f84:	f107 0314 	add.w	r3, r7, #20
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4809      	ldr	r0, [pc, #36]	@ (8006fb0 <HAL_UART_MspInit+0x9c>)
 8006f8c:	f001 f8e2 	bl	8008154 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006f90:	2200      	movs	r2, #0
 8006f92:	2105      	movs	r1, #5
 8006f94:	2027      	movs	r0, #39	@ 0x27
 8006f96:	f001 f814 	bl	8007fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006f9a:	2027      	movs	r0, #39	@ 0x27
 8006f9c:	f001 f82d 	bl	8007ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006fa0:	bf00      	nop
 8006fa2:	3728      	adds	r7, #40	@ 0x28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	40004800 	.word	0x40004800
 8006fac:	40023800 	.word	0x40023800
 8006fb0:	40020800 	.word	0x40020800

08006fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006fb8:	bf00      	nop
 8006fba:	e7fd      	b.n	8006fb8 <NMI_Handler+0x4>

08006fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <HardFault_Handler+0x4>

08006fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006fc8:	bf00      	nop
 8006fca:	e7fd      	b.n	8006fc8 <MemManage_Handler+0x4>

08006fcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <BusFault_Handler+0x4>

08006fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006fd8:	bf00      	nop
 8006fda:	e7fd      	b.n	8006fd8 <UsageFault_Handler+0x4>

08006fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006fe0:	bf00      	nop
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006fee:	f000 f991 	bl	8007314 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006ff2:	f007 fa4b 	bl	800e48c <xTaskGetSchedulerState>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d001      	beq.n	8007000 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006ffc:	f008 f844 	bl	800f088 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007000:	bf00      	nop
 8007002:	bd80      	pop	{r7, pc}

08007004 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8007008:	bf00      	nop
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007018:	4803      	ldr	r0, [pc, #12]	@ (8007028 <ADC_IRQHandler+0x14>)
 800701a:	f000 fb93 	bl	8007744 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800701e:	4803      	ldr	r0, [pc, #12]	@ (800702c <ADC_IRQHandler+0x18>)
 8007020:	f000 fb90 	bl	8007744 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007024:	bf00      	nop
 8007026:	bd80      	pop	{r7, pc}
 8007028:	2000033c 	.word	0x2000033c
 800702c:	20000384 	.word	0x20000384

08007030 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007034:	4802      	ldr	r0, [pc, #8]	@ (8007040 <TIM1_CC_IRQHandler+0x10>)
 8007036:	f003 fb4d 	bl	800a6d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000420 	.word	0x20000420

08007044 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007048:	4802      	ldr	r0, [pc, #8]	@ (8007054 <TIM4_IRQHandler+0x10>)
 800704a:	f003 fb43 	bl	800a6d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800704e:	bf00      	nop
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	200004f8 	.word	0x200004f8

08007058 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800705c:	4802      	ldr	r0, [pc, #8]	@ (8007068 <USART3_IRQHandler+0x10>)
 800705e:	f004 fcff 	bl	800ba60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007062:	bf00      	nop
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	200005d0 	.word	0x200005d0

0800706c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
	return 1;
 8007070:	2301      	movs	r3, #1
}
 8007072:	4618      	mov	r0, r3
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <_kill>:

int _kill(int pid, int sig)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007086:	f009 f881 	bl	801018c <__errno>
 800708a:	4603      	mov	r3, r0
 800708c:	2216      	movs	r2, #22
 800708e:	601a      	str	r2, [r3, #0]
	return -1;
 8007090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <_exit>:

void _exit (int status)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80070a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff ffe7 	bl	800707c <_kill>
	while (1) {}		/* Make sure we hang here */
 80070ae:	bf00      	nop
 80070b0:	e7fd      	b.n	80070ae <_exit+0x12>

080070b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b086      	sub	sp, #24
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	e00a      	b.n	80070da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80070c4:	f3af 8000 	nop.w
 80070c8:	4601      	mov	r1, r0
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	60ba      	str	r2, [r7, #8]
 80070d0:	b2ca      	uxtb	r2, r1
 80070d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	3301      	adds	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	429a      	cmp	r2, r3
 80070e0:	dbf0      	blt.n	80070c4 <_read+0x12>
	}

return len;
 80070e2:	687b      	ldr	r3, [r7, #4]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	e009      	b.n	8007112 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	60ba      	str	r2, [r7, #8]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	4618      	mov	r0, r3
 8007108:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	3301      	adds	r3, #1
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	dbf1      	blt.n	80070fe <_write+0x12>
	}
	return len;
 800711a:	687b      	ldr	r3, [r7, #4]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <_close>:

int _close(int file)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	return -1;
 800712c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800714c:	605a      	str	r2, [r3, #4]
	return 0;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <_isatty>:

int _isatty(int file)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	return 1;
 8007164:	2301      	movs	r3, #1
}
 8007166:	4618      	mov	r0, r3
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
	return 0;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007194:	4a14      	ldr	r2, [pc, #80]	@ (80071e8 <_sbrk+0x5c>)
 8007196:	4b15      	ldr	r3, [pc, #84]	@ (80071ec <_sbrk+0x60>)
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071a0:	4b13      	ldr	r3, [pc, #76]	@ (80071f0 <_sbrk+0x64>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80071a8:	4b11      	ldr	r3, [pc, #68]	@ (80071f0 <_sbrk+0x64>)
 80071aa:	4a12      	ldr	r2, [pc, #72]	@ (80071f4 <_sbrk+0x68>)
 80071ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071ae:	4b10      	ldr	r3, [pc, #64]	@ (80071f0 <_sbrk+0x64>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d207      	bcs.n	80071cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071bc:	f008 ffe6 	bl	801018c <__errno>
 80071c0:	4603      	mov	r3, r0
 80071c2:	220c      	movs	r2, #12
 80071c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80071c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071ca:	e009      	b.n	80071e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071cc:	4b08      	ldr	r3, [pc, #32]	@ (80071f0 <_sbrk+0x64>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071d2:	4b07      	ldr	r3, [pc, #28]	@ (80071f0 <_sbrk+0x64>)
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4413      	add	r3, r2
 80071da:	4a05      	ldr	r2, [pc, #20]	@ (80071f0 <_sbrk+0x64>)
 80071dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80071de:	68fb      	ldr	r3, [r7, #12]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20020000 	.word	0x20020000
 80071ec:	00000400 	.word	0x00000400
 80071f0:	20000b60 	.word	0x20000b60
 80071f4:	20005608 	.word	0x20005608

080071f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80071fc:	4b06      	ldr	r3, [pc, #24]	@ (8007218 <SystemInit+0x20>)
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007202:	4a05      	ldr	r2, [pc, #20]	@ (8007218 <SystemInit+0x20>)
 8007204:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800720c:	bf00      	nop
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	e000ed00 	.word	0xe000ed00

0800721c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800721c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007254 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007220:	480d      	ldr	r0, [pc, #52]	@ (8007258 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007222:	490e      	ldr	r1, [pc, #56]	@ (800725c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007224:	4a0e      	ldr	r2, [pc, #56]	@ (8007260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007228:	e002      	b.n	8007230 <LoopCopyDataInit>

0800722a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800722a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800722c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800722e:	3304      	adds	r3, #4

08007230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007234:	d3f9      	bcc.n	800722a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007236:	4a0b      	ldr	r2, [pc, #44]	@ (8007264 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007238:	4c0b      	ldr	r4, [pc, #44]	@ (8007268 <LoopFillZerobss+0x26>)
  movs r3, #0
 800723a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800723c:	e001      	b.n	8007242 <LoopFillZerobss>

0800723e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800723e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007240:	3204      	adds	r2, #4

08007242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007244:	d3fb      	bcc.n	800723e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007246:	f7ff ffd7 	bl	80071f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800724a:	f008 ffa5 	bl	8010198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800724e:	f7f9 ff4b 	bl	80010e8 <main>
  bx  lr    
 8007252:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007254:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800725c:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 8007260:	08014580 	.word	0x08014580
  ldr r2, =_sbss
 8007264:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8007268:	20005604 	.word	0x20005604

0800726c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800726c:	e7fe      	b.n	800726c <CAN1_RX0_IRQHandler>
	...

08007270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007274:	4b0e      	ldr	r3, [pc, #56]	@ (80072b0 <HAL_Init+0x40>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a0d      	ldr	r2, [pc, #52]	@ (80072b0 <HAL_Init+0x40>)
 800727a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800727e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007280:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <HAL_Init+0x40>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a0a      	ldr	r2, [pc, #40]	@ (80072b0 <HAL_Init+0x40>)
 8007286:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800728a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800728c:	4b08      	ldr	r3, [pc, #32]	@ (80072b0 <HAL_Init+0x40>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a07      	ldr	r2, [pc, #28]	@ (80072b0 <HAL_Init+0x40>)
 8007292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007298:	2003      	movs	r0, #3
 800729a:	f000 fe87 	bl	8007fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800729e:	200f      	movs	r0, #15
 80072a0:	f000 f808 	bl	80072b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80072a4:	f7ff fb76 	bl	8006994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40023c00 	.word	0x40023c00

080072b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80072bc:	4b12      	ldr	r3, [pc, #72]	@ (8007308 <HAL_InitTick+0x54>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	4b12      	ldr	r3, [pc, #72]	@ (800730c <HAL_InitTick+0x58>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	4619      	mov	r1, r3
 80072c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80072ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80072ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fe9f 	bl	8008016 <HAL_SYSTICK_Config>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e00e      	b.n	8007300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b0f      	cmp	r3, #15
 80072e6:	d80a      	bhi.n	80072fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80072e8:	2200      	movs	r2, #0
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072f0:	f000 fe67 	bl	8007fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80072f4:	4a06      	ldr	r2, [pc, #24]	@ (8007310 <HAL_InitTick+0x5c>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	e000      	b.n	8007300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000148 	.word	0x20000148
 800730c:	20000150 	.word	0x20000150
 8007310:	2000014c 	.word	0x2000014c

08007314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007318:	4b06      	ldr	r3, [pc, #24]	@ (8007334 <HAL_IncTick+0x20>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <HAL_IncTick+0x24>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4413      	add	r3, r2
 8007324:	4a04      	ldr	r2, [pc, #16]	@ (8007338 <HAL_IncTick+0x24>)
 8007326:	6013      	str	r3, [r2, #0]
}
 8007328:	bf00      	nop
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000150 	.word	0x20000150
 8007338:	20000b64 	.word	0x20000b64

0800733c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
  return uwTick;
 8007340:	4b03      	ldr	r3, [pc, #12]	@ (8007350 <HAL_GetTick+0x14>)
 8007342:	681b      	ldr	r3, [r3, #0]
}
 8007344:	4618      	mov	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	20000b64 	.word	0x20000b64

08007354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800735c:	f7ff ffee 	bl	800733c <HAL_GetTick>
 8007360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800736c:	d005      	beq.n	800737a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800736e:	4b0a      	ldr	r3, [pc, #40]	@ (8007398 <HAL_Delay+0x44>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4413      	add	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800737a:	bf00      	nop
 800737c:	f7ff ffde 	bl	800733c <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	429a      	cmp	r2, r3
 800738a:	d8f7      	bhi.n	800737c <HAL_Delay+0x28>
  {
  }
}
 800738c:	bf00      	nop
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000150 	.word	0x20000150

0800739c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e033      	b.n	800741a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d109      	bne.n	80073ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff fb1e 	bl	80069fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	f003 0310 	and.w	r3, r3, #16
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d118      	bne.n	800740c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80073e2:	f023 0302 	bic.w	r3, r3, #2
 80073e6:	f043 0202 	orr.w	r2, r3, #2
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fc06 	bl	8007c00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fe:	f023 0303 	bic.w	r3, r3, #3
 8007402:	f043 0201 	orr.w	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	641a      	str	r2, [r3, #64]	@ 0x40
 800740a:	e001      	b.n	8007410 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_ADC_Start+0x1a>
 800743a:	2302      	movs	r3, #2
 800743c:	e0b2      	b.n	80075a4 <HAL_ADC_Start+0x180>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b01      	cmp	r3, #1
 8007452:	d018      	beq.n	8007486 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689a      	ldr	r2, [r3, #8]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007464:	4b52      	ldr	r3, [pc, #328]	@ (80075b0 <HAL_ADC_Start+0x18c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a52      	ldr	r2, [pc, #328]	@ (80075b4 <HAL_ADC_Start+0x190>)
 800746a:	fba2 2303 	umull	r2, r3, r2, r3
 800746e:	0c9a      	lsrs	r2, r3, #18
 8007470:	4613      	mov	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	4413      	add	r3, r2
 8007476:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007478:	e002      	b.n	8007480 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	3b01      	subs	r3, #1
 800747e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f9      	bne.n	800747a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b01      	cmp	r3, #1
 8007492:	d17a      	bne.n	800758a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007498:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80074be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074d2:	d106      	bne.n	80074e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d8:	f023 0206 	bic.w	r2, r3, #6
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	645a      	str	r2, [r3, #68]	@ 0x44
 80074e0:	e002      	b.n	80074e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80074f0:	4b31      	ldr	r3, [pc, #196]	@ (80075b8 <HAL_ADC_Start+0x194>)
 80074f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80074fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f003 031f 	and.w	r3, r3, #31
 8007506:	2b00      	cmp	r3, #0
 8007508:	d12a      	bne.n	8007560 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a2b      	ldr	r2, [pc, #172]	@ (80075bc <HAL_ADC_Start+0x198>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d015      	beq.n	8007540 <HAL_ADC_Start+0x11c>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a29      	ldr	r2, [pc, #164]	@ (80075c0 <HAL_ADC_Start+0x19c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d105      	bne.n	800752a <HAL_ADC_Start+0x106>
 800751e:	4b26      	ldr	r3, [pc, #152]	@ (80075b8 <HAL_ADC_Start+0x194>)
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f003 031f 	and.w	r3, r3, #31
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a25      	ldr	r2, [pc, #148]	@ (80075c4 <HAL_ADC_Start+0x1a0>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d136      	bne.n	80075a2 <HAL_ADC_Start+0x17e>
 8007534:	4b20      	ldr	r3, [pc, #128]	@ (80075b8 <HAL_ADC_Start+0x194>)
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b00      	cmp	r3, #0
 800753e:	d130      	bne.n	80075a2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d129      	bne.n	80075a2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800755c:	609a      	str	r2, [r3, #8]
 800755e:	e020      	b.n	80075a2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a15      	ldr	r2, [pc, #84]	@ (80075bc <HAL_ADC_Start+0x198>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d11b      	bne.n	80075a2 <HAL_ADC_Start+0x17e>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d114      	bne.n	80075a2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007586:	609a      	str	r2, [r3, #8]
 8007588:	e00b      	b.n	80075a2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758e:	f043 0210 	orr.w	r2, r3, #16
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759a:	f043 0201 	orr.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	20000148 	.word	0x20000148
 80075b4:	431bde83 	.word	0x431bde83
 80075b8:	40012300 	.word	0x40012300
 80075bc:	40012000 	.word	0x40012000
 80075c0:	40012100 	.word	0x40012100
 80075c4:	40012200 	.word	0x40012200

080075c8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d101      	bne.n	80075de <HAL_ADC_Stop+0x16>
 80075da:	2302      	movs	r3, #2
 80075dc:	e021      	b.n	8007622 <HAL_ADC_Stop+0x5a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0201 	bic.w	r2, r2, #1
 80075f4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d109      	bne.n	8007618 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007608:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	f043 0201 	orr.w	r2, r3, #1
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800764a:	d113      	bne.n	8007674 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800765a:	d10b      	bne.n	8007674 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007660:	f043 0220 	orr.w	r2, r3, #32
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e063      	b.n	800773c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007674:	f7ff fe62 	bl	800733c <HAL_GetTick>
 8007678:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800767a:	e021      	b.n	80076c0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007682:	d01d      	beq.n	80076c0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <HAL_ADC_PollForConversion+0x6c>
 800768a:	f7ff fe57 	bl	800733c <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d212      	bcs.n	80076c0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d00b      	beq.n	80076c0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ac:	f043 0204 	orr.w	r2, r3, #4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e03d      	b.n	800773c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d1d6      	bne.n	800767c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f06f 0212 	mvn.w	r2, #18
 80076d6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d123      	bne.n	800773a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d11f      	bne.n	800773a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007700:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007704:	2b00      	cmp	r3, #0
 8007706:	d006      	beq.n	8007716 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007712:	2b00      	cmp	r3, #0
 8007714:	d111      	bne.n	800773a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d105      	bne.n	800773a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007732:	f043 0201 	orr.w	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	2300      	movs	r3, #0
 8007752:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d049      	beq.n	800780e <HAL_ADC_IRQHandler+0xca>
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d046      	beq.n	800780e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007784:	f003 0310 	and.w	r3, r3, #16
 8007788:	2b00      	cmp	r3, #0
 800778a:	d105      	bne.n	8007798 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007790:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d12b      	bne.n	80077fe <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d127      	bne.n	80077fe <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d006      	beq.n	80077ca <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d119      	bne.n	80077fe <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0220 	bic.w	r2, r2, #32
 80077d8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d105      	bne.n	80077fe <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f6:	f043 0201 	orr.w	r2, r3, #1
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f8bd 	bl	800797e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0212 	mvn.w	r2, #18
 800780c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800781c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d057      	beq.n	80078d4 <HAL_ADC_IRQHandler+0x190>
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d054      	beq.n	80078d4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782e:	f003 0310 	and.w	r3, r3, #16
 8007832:	2b00      	cmp	r3, #0
 8007834:	d105      	bne.n	8007842 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d139      	bne.n	80078c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007856:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800785a:	2b00      	cmp	r3, #0
 800785c:	d006      	beq.n	800786c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007868:	2b00      	cmp	r3, #0
 800786a:	d12b      	bne.n	80078c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007876:	2b00      	cmp	r3, #0
 8007878:	d124      	bne.n	80078c4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007884:	2b00      	cmp	r3, #0
 8007886:	d11d      	bne.n	80078c4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800788c:	2b00      	cmp	r3, #0
 800788e:	d119      	bne.n	80078c4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800789e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d105      	bne.n	80078c4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078bc:	f043 0201 	orr.w	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fa97 	bl	8007df8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f06f 020c 	mvn.w	r2, #12
 80078d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d017      	beq.n	800791a <HAL_ADC_IRQHandler+0x1d6>
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d014      	beq.n	800791a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d10d      	bne.n	800791a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007902:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f841 	bl	8007992 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f06f 0201 	mvn.w	r2, #1
 8007918:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007928:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d015      	beq.n	800795c <HAL_ADC_IRQHandler+0x218>
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d012      	beq.n	800795c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800793a:	f043 0202 	orr.w	r2, r3, #2
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f06f 0220 	mvn.w	r2, #32
 800794a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f82a 	bl	80079a6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f06f 0220 	mvn.w	r2, #32
 800795a:	601a      	str	r2, [r3, #0]
  }
}
 800795c:	bf00      	nop
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8007972:	4618      	mov	r0, r3
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
	...

080079bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_ADC_ConfigChannel+0x1c>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e105      	b.n	8007be4 <HAL_ADC_ConfigChannel+0x228>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b09      	cmp	r3, #9
 80079e6:	d925      	bls.n	8007a34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68d9      	ldr	r1, [r3, #12]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	461a      	mov	r2, r3
 80079f6:	4613      	mov	r3, r2
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	4413      	add	r3, r2
 80079fc:	3b1e      	subs	r3, #30
 80079fe:	2207      	movs	r2, #7
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	43da      	mvns	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	400a      	ands	r2, r1
 8007a0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68d9      	ldr	r1, [r3, #12]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	4618      	mov	r0, r3
 8007a20:	4603      	mov	r3, r0
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	4403      	add	r3, r0
 8007a26:	3b1e      	subs	r3, #30
 8007a28:	409a      	lsls	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	60da      	str	r2, [r3, #12]
 8007a32:	e022      	b.n	8007a7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6919      	ldr	r1, [r3, #16]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	4613      	mov	r3, r2
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	4413      	add	r3, r2
 8007a48:	2207      	movs	r2, #7
 8007a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4e:	43da      	mvns	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	400a      	ands	r2, r1
 8007a56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6919      	ldr	r1, [r3, #16]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	4618      	mov	r0, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	4403      	add	r3, r0
 8007a70:	409a      	lsls	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b06      	cmp	r3, #6
 8007a80:	d824      	bhi.n	8007acc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	3b05      	subs	r3, #5
 8007a94:	221f      	movs	r2, #31
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	43da      	mvns	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	400a      	ands	r2, r1
 8007aa2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	3b05      	subs	r3, #5
 8007abe:	fa00 f203 	lsl.w	r2, r0, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8007aca:	e04c      	b.n	8007b66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2b0c      	cmp	r3, #12
 8007ad2:	d824      	bhi.n	8007b1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	3b23      	subs	r3, #35	@ 0x23
 8007ae6:	221f      	movs	r2, #31
 8007ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aec:	43da      	mvns	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	400a      	ands	r2, r1
 8007af4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	4618      	mov	r0, r3
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	3b23      	subs	r3, #35	@ 0x23
 8007b10:	fa00 f203 	lsl.w	r2, r0, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b1c:	e023      	b.n	8007b66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3b41      	subs	r3, #65	@ 0x41
 8007b30:	221f      	movs	r2, #31
 8007b32:	fa02 f303 	lsl.w	r3, r2, r3
 8007b36:	43da      	mvns	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	400a      	ands	r2, r1
 8007b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	3b41      	subs	r3, #65	@ 0x41
 8007b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b66:	4b22      	ldr	r3, [pc, #136]	@ (8007bf0 <HAL_ADC_ConfigChannel+0x234>)
 8007b68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a21      	ldr	r2, [pc, #132]	@ (8007bf4 <HAL_ADC_ConfigChannel+0x238>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d109      	bne.n	8007b88 <HAL_ADC_ConfigChannel+0x1cc>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b12      	cmp	r3, #18
 8007b7a:	d105      	bne.n	8007b88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a19      	ldr	r2, [pc, #100]	@ (8007bf4 <HAL_ADC_ConfigChannel+0x238>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d123      	bne.n	8007bda <HAL_ADC_ConfigChannel+0x21e>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b10      	cmp	r3, #16
 8007b98:	d003      	beq.n	8007ba2 <HAL_ADC_ConfigChannel+0x1e6>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b11      	cmp	r3, #17
 8007ba0:	d11b      	bne.n	8007bda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d111      	bne.n	8007bda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007bb6:	4b10      	ldr	r3, [pc, #64]	@ (8007bf8 <HAL_ADC_ConfigChannel+0x23c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a10      	ldr	r2, [pc, #64]	@ (8007bfc <HAL_ADC_ConfigChannel+0x240>)
 8007bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc0:	0c9a      	lsrs	r2, r3, #18
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007bcc:	e002      	b.n	8007bd4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1f9      	bne.n	8007bce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	40012300 	.word	0x40012300
 8007bf4:	40012000 	.word	0x40012000
 8007bf8:	20000148 	.word	0x20000148
 8007bfc:	431bde83 	.word	0x431bde83

08007c00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c08:	4b79      	ldr	r3, [pc, #484]	@ (8007df0 <ADC_Init+0x1f0>)
 8007c0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	431a      	orrs	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6859      	ldr	r1, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	021a      	lsls	r2, r3, #8
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6859      	ldr	r1, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	689a      	ldr	r2, [r3, #8]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6899      	ldr	r1, [r3, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c92:	4a58      	ldr	r2, [pc, #352]	@ (8007df4 <ADC_Init+0x1f4>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d022      	beq.n	8007cde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007ca6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6899      	ldr	r1, [r3, #8]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007cc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6899      	ldr	r1, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	609a      	str	r2, [r3, #8]
 8007cdc:	e00f      	b.n	8007cfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689a      	ldr	r2, [r3, #8]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007cfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0202 	bic.w	r2, r2, #2
 8007d0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6899      	ldr	r1, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7e1b      	ldrb	r3, [r3, #24]
 8007d18:	005a      	lsls	r2, r3, #1
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01b      	beq.n	8007d64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007d4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6859      	ldr	r1, [r3, #4]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d56:	3b01      	subs	r3, #1
 8007d58:	035a      	lsls	r2, r3, #13
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	605a      	str	r2, [r3, #4]
 8007d62:	e007      	b.n	8007d74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	051a      	lsls	r2, r3, #20
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007da8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6899      	ldr	r1, [r3, #8]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007db6:	025a      	lsls	r2, r3, #9
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689a      	ldr	r2, [r3, #8]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6899      	ldr	r1, [r3, #8]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	029a      	lsls	r2, r3, #10
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	609a      	str	r2, [r3, #8]
}
 8007de4:	bf00      	nop
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	40012300 	.word	0x40012300
 8007df4:	0f000001 	.word	0x0f000001

08007df8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e50 <__NVIC_SetPriorityGrouping+0x44>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007e28:	4013      	ands	r3, r2
 8007e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e3e:	4a04      	ldr	r2, [pc, #16]	@ (8007e50 <__NVIC_SetPriorityGrouping+0x44>)
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	60d3      	str	r3, [r2, #12]
}
 8007e44:	bf00      	nop
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	e000ed00 	.word	0xe000ed00

08007e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e58:	4b04      	ldr	r3, [pc, #16]	@ (8007e6c <__NVIC_GetPriorityGrouping+0x18>)
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	0a1b      	lsrs	r3, r3, #8
 8007e5e:	f003 0307 	and.w	r3, r3, #7
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	e000ed00 	.word	0xe000ed00

08007e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	db0b      	blt.n	8007e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	f003 021f 	and.w	r2, r3, #31
 8007e88:	4907      	ldr	r1, [pc, #28]	@ (8007ea8 <__NVIC_EnableIRQ+0x38>)
 8007e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e8e:	095b      	lsrs	r3, r3, #5
 8007e90:	2001      	movs	r0, #1
 8007e92:	fa00 f202 	lsl.w	r2, r0, r2
 8007e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	e000e100 	.word	0xe000e100

08007eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	db0a      	blt.n	8007ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	490c      	ldr	r1, [pc, #48]	@ (8007ef8 <__NVIC_SetPriority+0x4c>)
 8007ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eca:	0112      	lsls	r2, r2, #4
 8007ecc:	b2d2      	uxtb	r2, r2
 8007ece:	440b      	add	r3, r1
 8007ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ed4:	e00a      	b.n	8007eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	4908      	ldr	r1, [pc, #32]	@ (8007efc <__NVIC_SetPriority+0x50>)
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	f003 030f 	and.w	r3, r3, #15
 8007ee2:	3b04      	subs	r3, #4
 8007ee4:	0112      	lsls	r2, r2, #4
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	440b      	add	r3, r1
 8007eea:	761a      	strb	r2, [r3, #24]
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	e000e100 	.word	0xe000e100
 8007efc:	e000ed00 	.word	0xe000ed00

08007f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b089      	sub	sp, #36	@ 0x24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f1c3 0307 	rsb	r3, r3, #7
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	bf28      	it	cs
 8007f1e:	2304      	movcs	r3, #4
 8007f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	3304      	adds	r3, #4
 8007f26:	2b06      	cmp	r3, #6
 8007f28:	d902      	bls.n	8007f30 <NVIC_EncodePriority+0x30>
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	3b03      	subs	r3, #3
 8007f2e:	e000      	b.n	8007f32 <NVIC_EncodePriority+0x32>
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3e:	43da      	mvns	r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	401a      	ands	r2, r3
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f52:	43d9      	mvns	r1, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f58:	4313      	orrs	r3, r2
         );
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3724      	adds	r7, #36	@ 0x24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f78:	d301      	bcc.n	8007f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e00f      	b.n	8007f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8007fa8 <SysTick_Config+0x40>)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3b01      	subs	r3, #1
 8007f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f86:	210f      	movs	r1, #15
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f8c:	f7ff ff8e 	bl	8007eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f90:	4b05      	ldr	r3, [pc, #20]	@ (8007fa8 <SysTick_Config+0x40>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f96:	4b04      	ldr	r3, [pc, #16]	@ (8007fa8 <SysTick_Config+0x40>)
 8007f98:	2207      	movs	r2, #7
 8007f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	e000e010 	.word	0xe000e010

08007fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff ff29 	bl	8007e0c <__NVIC_SetPriorityGrouping>
}
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b086      	sub	sp, #24
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	4603      	mov	r3, r0
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fd4:	f7ff ff3e 	bl	8007e54 <__NVIC_GetPriorityGrouping>
 8007fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	68b9      	ldr	r1, [r7, #8]
 8007fde:	6978      	ldr	r0, [r7, #20]
 8007fe0:	f7ff ff8e 	bl	8007f00 <NVIC_EncodePriority>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fea:	4611      	mov	r1, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff ff5d 	bl	8007eac <__NVIC_SetPriority>
}
 8007ff2:	bf00      	nop
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	4603      	mov	r3, r0
 8008002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff ff31 	bl	8007e70 <__NVIC_EnableIRQ>
}
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff ffa2 	bl	8007f68 <SysTick_Config>
 8008024:	4603      	mov	r3, r0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800803a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800803c:	f7ff f97e 	bl	800733c <HAL_GetTick>
 8008040:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b02      	cmp	r3, #2
 800804c:	d008      	beq.n	8008060 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2280      	movs	r2, #128	@ 0x80
 8008052:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e052      	b.n	8008106 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0216 	bic.w	r2, r2, #22
 800806e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695a      	ldr	r2, [r3, #20]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800807e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008084:	2b00      	cmp	r3, #0
 8008086:	d103      	bne.n	8008090 <HAL_DMA_Abort+0x62>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800808c:	2b00      	cmp	r3, #0
 800808e:	d007      	beq.n	80080a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0208 	bic.w	r2, r2, #8
 800809e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0201 	bic.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080b0:	e013      	b.n	80080da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80080b2:	f7ff f943 	bl	800733c <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b05      	cmp	r3, #5
 80080be:	d90c      	bls.n	80080da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2203      	movs	r2, #3
 80080ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e015      	b.n	8008106 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e4      	bne.n	80080b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080ec:	223f      	movs	r2, #63	@ 0x3f
 80080ee:	409a      	lsls	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d004      	beq.n	800812c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2280      	movs	r2, #128	@ 0x80
 8008126:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e00c      	b.n	8008146 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2205      	movs	r2, #5
 8008130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0201 	bic.w	r2, r2, #1
 8008142:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
	...

08008154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008154:	b480      	push	{r7}
 8008156:	b089      	sub	sp, #36	@ 0x24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800815e:	2300      	movs	r3, #0
 8008160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008162:	2300      	movs	r3, #0
 8008164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008166:	2300      	movs	r3, #0
 8008168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800816a:	2300      	movs	r3, #0
 800816c:	61fb      	str	r3, [r7, #28]
 800816e:	e16b      	b.n	8008448 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008170:	2201      	movs	r2, #1
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	fa02 f303 	lsl.w	r3, r2, r3
 8008178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	4013      	ands	r3, r2
 8008182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	429a      	cmp	r2, r3
 800818a:	f040 815a 	bne.w	8008442 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	2b01      	cmp	r3, #1
 8008198:	d005      	beq.n	80081a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d130      	bne.n	8008208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	2203      	movs	r2, #3
 80081b2:	fa02 f303 	lsl.w	r3, r2, r3
 80081b6:	43db      	mvns	r3, r3
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	4013      	ands	r3, r2
 80081bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80081dc:	2201      	movs	r2, #1
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	fa02 f303 	lsl.w	r3, r2, r3
 80081e4:	43db      	mvns	r3, r3
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	4013      	ands	r3, r2
 80081ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	091b      	lsrs	r3, r3, #4
 80081f2:	f003 0201 	and.w	r2, r3, #1
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	fa02 f303 	lsl.w	r3, r2, r3
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	4313      	orrs	r3, r2
 8008200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f003 0303 	and.w	r3, r3, #3
 8008210:	2b03      	cmp	r3, #3
 8008212:	d017      	beq.n	8008244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	2203      	movs	r2, #3
 8008220:	fa02 f303 	lsl.w	r3, r2, r3
 8008224:	43db      	mvns	r3, r3
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	4013      	ands	r3, r2
 800822a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	fa02 f303 	lsl.w	r3, r2, r3
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	4313      	orrs	r3, r2
 800823c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f003 0303 	and.w	r3, r3, #3
 800824c:	2b02      	cmp	r3, #2
 800824e:	d123      	bne.n	8008298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	08da      	lsrs	r2, r3, #3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3208      	adds	r2, #8
 8008258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	220f      	movs	r2, #15
 8008268:	fa02 f303 	lsl.w	r3, r2, r3
 800826c:	43db      	mvns	r3, r3
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	4013      	ands	r3, r2
 8008272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	fa02 f303 	lsl.w	r3, r2, r3
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	4313      	orrs	r3, r2
 8008288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	08da      	lsrs	r2, r3, #3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3208      	adds	r2, #8
 8008292:	69b9      	ldr	r1, [r7, #24]
 8008294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	2203      	movs	r2, #3
 80082a4:	fa02 f303 	lsl.w	r3, r2, r3
 80082a8:	43db      	mvns	r3, r3
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	4013      	ands	r3, r2
 80082ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f003 0203 	and.w	r2, r3, #3
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	005b      	lsls	r3, r3, #1
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 80b4 	beq.w	8008442 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	4b60      	ldr	r3, [pc, #384]	@ (8008460 <HAL_GPIO_Init+0x30c>)
 80082e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e2:	4a5f      	ldr	r2, [pc, #380]	@ (8008460 <HAL_GPIO_Init+0x30c>)
 80082e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80082e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80082ea:	4b5d      	ldr	r3, [pc, #372]	@ (8008460 <HAL_GPIO_Init+0x30c>)
 80082ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082f6:	4a5b      	ldr	r2, [pc, #364]	@ (8008464 <HAL_GPIO_Init+0x310>)
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	089b      	lsrs	r3, r3, #2
 80082fc:	3302      	adds	r3, #2
 80082fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	f003 0303 	and.w	r3, r3, #3
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	220f      	movs	r2, #15
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	43db      	mvns	r3, r3
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	4013      	ands	r3, r2
 8008318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a52      	ldr	r2, [pc, #328]	@ (8008468 <HAL_GPIO_Init+0x314>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d02b      	beq.n	800837a <HAL_GPIO_Init+0x226>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a51      	ldr	r2, [pc, #324]	@ (800846c <HAL_GPIO_Init+0x318>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d025      	beq.n	8008376 <HAL_GPIO_Init+0x222>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a50      	ldr	r2, [pc, #320]	@ (8008470 <HAL_GPIO_Init+0x31c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d01f      	beq.n	8008372 <HAL_GPIO_Init+0x21e>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a4f      	ldr	r2, [pc, #316]	@ (8008474 <HAL_GPIO_Init+0x320>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d019      	beq.n	800836e <HAL_GPIO_Init+0x21a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a4e      	ldr	r2, [pc, #312]	@ (8008478 <HAL_GPIO_Init+0x324>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d013      	beq.n	800836a <HAL_GPIO_Init+0x216>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a4d      	ldr	r2, [pc, #308]	@ (800847c <HAL_GPIO_Init+0x328>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00d      	beq.n	8008366 <HAL_GPIO_Init+0x212>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a4c      	ldr	r2, [pc, #304]	@ (8008480 <HAL_GPIO_Init+0x32c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d007      	beq.n	8008362 <HAL_GPIO_Init+0x20e>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a4b      	ldr	r2, [pc, #300]	@ (8008484 <HAL_GPIO_Init+0x330>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d101      	bne.n	800835e <HAL_GPIO_Init+0x20a>
 800835a:	2307      	movs	r3, #7
 800835c:	e00e      	b.n	800837c <HAL_GPIO_Init+0x228>
 800835e:	2308      	movs	r3, #8
 8008360:	e00c      	b.n	800837c <HAL_GPIO_Init+0x228>
 8008362:	2306      	movs	r3, #6
 8008364:	e00a      	b.n	800837c <HAL_GPIO_Init+0x228>
 8008366:	2305      	movs	r3, #5
 8008368:	e008      	b.n	800837c <HAL_GPIO_Init+0x228>
 800836a:	2304      	movs	r3, #4
 800836c:	e006      	b.n	800837c <HAL_GPIO_Init+0x228>
 800836e:	2303      	movs	r3, #3
 8008370:	e004      	b.n	800837c <HAL_GPIO_Init+0x228>
 8008372:	2302      	movs	r3, #2
 8008374:	e002      	b.n	800837c <HAL_GPIO_Init+0x228>
 8008376:	2301      	movs	r3, #1
 8008378:	e000      	b.n	800837c <HAL_GPIO_Init+0x228>
 800837a:	2300      	movs	r3, #0
 800837c:	69fa      	ldr	r2, [r7, #28]
 800837e:	f002 0203 	and.w	r2, r2, #3
 8008382:	0092      	lsls	r2, r2, #2
 8008384:	4093      	lsls	r3, r2
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	4313      	orrs	r3, r2
 800838a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800838c:	4935      	ldr	r1, [pc, #212]	@ (8008464 <HAL_GPIO_Init+0x310>)
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	089b      	lsrs	r3, r3, #2
 8008392:	3302      	adds	r3, #2
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800839a:	4b3b      	ldr	r3, [pc, #236]	@ (8008488 <HAL_GPIO_Init+0x334>)
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	43db      	mvns	r3, r3
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	4013      	ands	r3, r2
 80083a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80083be:	4a32      	ldr	r2, [pc, #200]	@ (8008488 <HAL_GPIO_Init+0x334>)
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80083c4:	4b30      	ldr	r3, [pc, #192]	@ (8008488 <HAL_GPIO_Init+0x334>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	43db      	mvns	r3, r3
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	4013      	ands	r3, r2
 80083d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80083e8:	4a27      	ldr	r2, [pc, #156]	@ (8008488 <HAL_GPIO_Init+0x334>)
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80083ee:	4b26      	ldr	r3, [pc, #152]	@ (8008488 <HAL_GPIO_Init+0x334>)
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	43db      	mvns	r3, r3
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	4013      	ands	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800840a:	69ba      	ldr	r2, [r7, #24]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	4313      	orrs	r3, r2
 8008410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008412:	4a1d      	ldr	r2, [pc, #116]	@ (8008488 <HAL_GPIO_Init+0x334>)
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008418:	4b1b      	ldr	r3, [pc, #108]	@ (8008488 <HAL_GPIO_Init+0x334>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	43db      	mvns	r3, r3
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	4013      	ands	r3, r2
 8008426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d003      	beq.n	800843c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800843c:	4a12      	ldr	r2, [pc, #72]	@ (8008488 <HAL_GPIO_Init+0x334>)
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	3301      	adds	r3, #1
 8008446:	61fb      	str	r3, [r7, #28]
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	2b0f      	cmp	r3, #15
 800844c:	f67f ae90 	bls.w	8008170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008450:	bf00      	nop
 8008452:	bf00      	nop
 8008454:	3724      	adds	r7, #36	@ 0x24
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	40023800 	.word	0x40023800
 8008464:	40013800 	.word	0x40013800
 8008468:	40020000 	.word	0x40020000
 800846c:	40020400 	.word	0x40020400
 8008470:	40020800 	.word	0x40020800
 8008474:	40020c00 	.word	0x40020c00
 8008478:	40021000 	.word	0x40021000
 800847c:	40021400 	.word	0x40021400
 8008480:	40021800 	.word	0x40021800
 8008484:	40021c00 	.word	0x40021c00
 8008488:	40013c00 	.word	0x40013c00

0800848c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	807b      	strh	r3, [r7, #2]
 8008498:	4613      	mov	r3, r2
 800849a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800849c:	787b      	ldrb	r3, [r7, #1]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084a2:	887a      	ldrh	r2, [r7, #2]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80084a8:	e003      	b.n	80084b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80084aa:	887b      	ldrh	r3, [r7, #2]
 80084ac:	041a      	lsls	r2, r3, #16
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	619a      	str	r2, [r3, #24]
}
 80084b2:	bf00      	nop
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
	...

080084c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e12b      	b.n	800872a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d106      	bne.n	80084ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7fe fb0c 	bl	8006b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2224      	movs	r2, #36	@ 0x24
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0201 	bic.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008512:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008522:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008524:	f001 fbe4 	bl	8009cf0 <HAL_RCC_GetPCLK1Freq>
 8008528:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	4a81      	ldr	r2, [pc, #516]	@ (8008734 <HAL_I2C_Init+0x274>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d807      	bhi.n	8008544 <HAL_I2C_Init+0x84>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4a80      	ldr	r2, [pc, #512]	@ (8008738 <HAL_I2C_Init+0x278>)
 8008538:	4293      	cmp	r3, r2
 800853a:	bf94      	ite	ls
 800853c:	2301      	movls	r3, #1
 800853e:	2300      	movhi	r3, #0
 8008540:	b2db      	uxtb	r3, r3
 8008542:	e006      	b.n	8008552 <HAL_I2C_Init+0x92>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4a7d      	ldr	r2, [pc, #500]	@ (800873c <HAL_I2C_Init+0x27c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	bf94      	ite	ls
 800854c:	2301      	movls	r3, #1
 800854e:	2300      	movhi	r3, #0
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e0e7      	b.n	800872a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4a78      	ldr	r2, [pc, #480]	@ (8008740 <HAL_I2C_Init+0x280>)
 800855e:	fba2 2303 	umull	r2, r3, r2, r3
 8008562:	0c9b      	lsrs	r3, r3, #18
 8008564:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	430a      	orrs	r2, r1
 8008578:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	4a6a      	ldr	r2, [pc, #424]	@ (8008734 <HAL_I2C_Init+0x274>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d802      	bhi.n	8008594 <HAL_I2C_Init+0xd4>
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	3301      	adds	r3, #1
 8008592:	e009      	b.n	80085a8 <HAL_I2C_Init+0xe8>
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800859a:	fb02 f303 	mul.w	r3, r2, r3
 800859e:	4a69      	ldr	r2, [pc, #420]	@ (8008744 <HAL_I2C_Init+0x284>)
 80085a0:	fba2 2303 	umull	r2, r3, r2, r3
 80085a4:	099b      	lsrs	r3, r3, #6
 80085a6:	3301      	adds	r3, #1
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6812      	ldr	r2, [r2, #0]
 80085ac:	430b      	orrs	r3, r1
 80085ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80085ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	495c      	ldr	r1, [pc, #368]	@ (8008734 <HAL_I2C_Init+0x274>)
 80085c4:	428b      	cmp	r3, r1
 80085c6:	d819      	bhi.n	80085fc <HAL_I2C_Init+0x13c>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	1e59      	subs	r1, r3, #1
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80085d6:	1c59      	adds	r1, r3, #1
 80085d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80085dc:	400b      	ands	r3, r1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <HAL_I2C_Init+0x138>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	1e59      	subs	r1, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80085f0:	3301      	adds	r3, #1
 80085f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085f6:	e051      	b.n	800869c <HAL_I2C_Init+0x1dc>
 80085f8:	2304      	movs	r3, #4
 80085fa:	e04f      	b.n	800869c <HAL_I2C_Init+0x1dc>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d111      	bne.n	8008628 <HAL_I2C_Init+0x168>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	1e58      	subs	r0, r3, #1
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6859      	ldr	r1, [r3, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	440b      	add	r3, r1
 8008612:	fbb0 f3f3 	udiv	r3, r0, r3
 8008616:	3301      	adds	r3, #1
 8008618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800861c:	2b00      	cmp	r3, #0
 800861e:	bf0c      	ite	eq
 8008620:	2301      	moveq	r3, #1
 8008622:	2300      	movne	r3, #0
 8008624:	b2db      	uxtb	r3, r3
 8008626:	e012      	b.n	800864e <HAL_I2C_Init+0x18e>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	1e58      	subs	r0, r3, #1
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6859      	ldr	r1, [r3, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	440b      	add	r3, r1
 8008636:	0099      	lsls	r1, r3, #2
 8008638:	440b      	add	r3, r1
 800863a:	fbb0 f3f3 	udiv	r3, r0, r3
 800863e:	3301      	adds	r3, #1
 8008640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008644:	2b00      	cmp	r3, #0
 8008646:	bf0c      	ite	eq
 8008648:	2301      	moveq	r3, #1
 800864a:	2300      	movne	r3, #0
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <HAL_I2C_Init+0x196>
 8008652:	2301      	movs	r3, #1
 8008654:	e022      	b.n	800869c <HAL_I2C_Init+0x1dc>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10e      	bne.n	800867c <HAL_I2C_Init+0x1bc>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1e58      	subs	r0, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6859      	ldr	r1, [r3, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	440b      	add	r3, r1
 800866c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008670:	3301      	adds	r3, #1
 8008672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800867a:	e00f      	b.n	800869c <HAL_I2C_Init+0x1dc>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	1e58      	subs	r0, r3, #1
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6859      	ldr	r1, [r3, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	440b      	add	r3, r1
 800868a:	0099      	lsls	r1, r3, #2
 800868c:	440b      	add	r3, r1
 800868e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008692:	3301      	adds	r3, #1
 8008694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008698:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	6809      	ldr	r1, [r1, #0]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	69da      	ldr	r2, [r3, #28]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	431a      	orrs	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80086ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6911      	ldr	r1, [r2, #16]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	68d2      	ldr	r2, [r2, #12]
 80086d6:	4311      	orrs	r1, r2
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6812      	ldr	r2, [r2, #0]
 80086dc:	430b      	orrs	r3, r1
 80086de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	695a      	ldr	r2, [r3, #20]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	431a      	orrs	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f042 0201 	orr.w	r2, r2, #1
 800870a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2220      	movs	r2, #32
 8008716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	000186a0 	.word	0x000186a0
 8008738:	001e847f 	.word	0x001e847f
 800873c:	003d08ff 	.word	0x003d08ff
 8008740:	431bde83 	.word	0x431bde83
 8008744:	10624dd3 	.word	0x10624dd3

08008748 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af02      	add	r7, sp, #8
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	4608      	mov	r0, r1
 8008752:	4611      	mov	r1, r2
 8008754:	461a      	mov	r2, r3
 8008756:	4603      	mov	r3, r0
 8008758:	817b      	strh	r3, [r7, #10]
 800875a:	460b      	mov	r3, r1
 800875c:	813b      	strh	r3, [r7, #8]
 800875e:	4613      	mov	r3, r2
 8008760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008762:	f7fe fdeb 	bl	800733c <HAL_GetTick>
 8008766:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b20      	cmp	r3, #32
 8008772:	f040 80d9 	bne.w	8008928 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	2319      	movs	r3, #25
 800877c:	2201      	movs	r2, #1
 800877e:	496d      	ldr	r1, [pc, #436]	@ (8008934 <HAL_I2C_Mem_Write+0x1ec>)
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 fc7f 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800878c:	2302      	movs	r3, #2
 800878e:	e0cc      	b.n	800892a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008796:	2b01      	cmp	r3, #1
 8008798:	d101      	bne.n	800879e <HAL_I2C_Mem_Write+0x56>
 800879a:	2302      	movs	r3, #2
 800879c:	e0c5      	b.n	800892a <HAL_I2C_Mem_Write+0x1e2>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d007      	beq.n	80087c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 0201 	orr.w	r2, r2, #1
 80087c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80087d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2221      	movs	r2, #33	@ 0x21
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2240      	movs	r2, #64	@ 0x40
 80087e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a3a      	ldr	r2, [r7, #32]
 80087ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80087f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4a4d      	ldr	r2, [pc, #308]	@ (8008938 <HAL_I2C_Mem_Write+0x1f0>)
 8008804:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008806:	88f8      	ldrh	r0, [r7, #6]
 8008808:	893a      	ldrh	r2, [r7, #8]
 800880a:	8979      	ldrh	r1, [r7, #10]
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4603      	mov	r3, r0
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 fab6 	bl	8008d88 <I2C_RequestMemoryWrite>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d052      	beq.n	80088c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e081      	b.n	800892a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 fd00 	bl	8009230 <I2C_WaitOnTXEFlagUntilTimeout>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00d      	beq.n	8008852 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883a:	2b04      	cmp	r3, #4
 800883c:	d107      	bne.n	800884e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800884c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e06b      	b.n	800892a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008856:	781a      	ldrb	r2, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	f003 0304 	and.w	r3, r3, #4
 800888c:	2b04      	cmp	r3, #4
 800888e:	d11b      	bne.n	80088c8 <HAL_I2C_Mem_Write+0x180>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008894:	2b00      	cmp	r3, #0
 8008896:	d017      	beq.n	80088c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800889c:	781a      	ldrb	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088b2:	3b01      	subs	r3, #1
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088be:	b29b      	uxth	r3, r3
 80088c0:	3b01      	subs	r3, #1
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1aa      	bne.n	8008826 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 fcec 	bl	80092b2 <I2C_WaitOnBTFFlagUntilTimeout>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00d      	beq.n	80088fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d107      	bne.n	80088f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e016      	b.n	800892a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800890a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2220      	movs	r2, #32
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	e000      	b.n	800892a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008928:	2302      	movs	r3, #2
  }
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	00100002 	.word	0x00100002
 8008938:	ffff0000 	.word	0xffff0000

0800893c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b08c      	sub	sp, #48	@ 0x30
 8008940:	af02      	add	r7, sp, #8
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	4608      	mov	r0, r1
 8008946:	4611      	mov	r1, r2
 8008948:	461a      	mov	r2, r3
 800894a:	4603      	mov	r3, r0
 800894c:	817b      	strh	r3, [r7, #10]
 800894e:	460b      	mov	r3, r1
 8008950:	813b      	strh	r3, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008956:	f7fe fcf1 	bl	800733c <HAL_GetTick>
 800895a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b20      	cmp	r3, #32
 8008966:	f040 8208 	bne.w	8008d7a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	2319      	movs	r3, #25
 8008970:	2201      	movs	r2, #1
 8008972:	497b      	ldr	r1, [pc, #492]	@ (8008b60 <HAL_I2C_Mem_Read+0x224>)
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 fb85 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008980:	2302      	movs	r3, #2
 8008982:	e1fb      	b.n	8008d7c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800898a:	2b01      	cmp	r3, #1
 800898c:	d101      	bne.n	8008992 <HAL_I2C_Mem_Read+0x56>
 800898e:	2302      	movs	r3, #2
 8008990:	e1f4      	b.n	8008d7c <HAL_I2C_Mem_Read+0x440>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d007      	beq.n	80089b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0201 	orr.w	r2, r2, #1
 80089b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80089c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2222      	movs	r2, #34	@ 0x22
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2240      	movs	r2, #64	@ 0x40
 80089d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80089e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4a5b      	ldr	r2, [pc, #364]	@ (8008b64 <HAL_I2C_Mem_Read+0x228>)
 80089f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089fa:	88f8      	ldrh	r0, [r7, #6]
 80089fc:	893a      	ldrh	r2, [r7, #8]
 80089fe:	8979      	ldrh	r1, [r7, #10]
 8008a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a02:	9301      	str	r3, [sp, #4]
 8008a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	4603      	mov	r3, r0
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 fa52 	bl	8008eb4 <I2C_RequestMemoryRead>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e1b0      	b.n	8008d7c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d113      	bne.n	8008a4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a22:	2300      	movs	r3, #0
 8008a24:	623b      	str	r3, [r7, #32]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	623b      	str	r3, [r7, #32]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	623b      	str	r3, [r7, #32]
 8008a36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	e184      	b.n	8008d54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d11b      	bne.n	8008a8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	61fb      	str	r3, [r7, #28]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	e164      	b.n	8008d54 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d11b      	bne.n	8008aca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008aa0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ab0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	61bb      	str	r3, [r7, #24]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	61bb      	str	r3, [r7, #24]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	61bb      	str	r3, [r7, #24]
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	e144      	b.n	8008d54 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aca:	2300      	movs	r3, #0
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	617b      	str	r3, [r7, #20]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	617b      	str	r3, [r7, #20]
 8008ade:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008ae0:	e138      	b.n	8008d54 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	f200 80f1 	bhi.w	8008cce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d123      	bne.n	8008b3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 fc1b 	bl	8009334 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e139      	b.n	8008d7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691a      	ldr	r2, [r3, #16]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008b3a:	e10b      	b.n	8008d54 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d14e      	bne.n	8008be2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	4906      	ldr	r1, [pc, #24]	@ (8008b68 <HAL_I2C_Mem_Read+0x22c>)
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 fa98 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d008      	beq.n	8008b6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e10e      	b.n	8008d7c <HAL_I2C_Mem_Read+0x440>
 8008b5e:	bf00      	nop
 8008b60:	00100002 	.word	0x00100002
 8008b64:	ffff0000 	.word	0xffff0000
 8008b68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691a      	ldr	r2, [r3, #16]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b86:	b2d2      	uxtb	r2, r2
 8008b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb8:	b2d2      	uxtb	r2, r2
 8008bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008be0:	e0b8      	b.n	8008d54 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be8:	2200      	movs	r2, #0
 8008bea:	4966      	ldr	r1, [pc, #408]	@ (8008d84 <HAL_I2C_Mem_Read+0x448>)
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 fa49 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e0bf      	b.n	8008d7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691a      	ldr	r2, [r3, #16]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c16:	b2d2      	uxtb	r2, r2
 8008c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c44:	2200      	movs	r2, #0
 8008c46:	494f      	ldr	r1, [pc, #316]	@ (8008d84 <HAL_I2C_Mem_Read+0x448>)
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 fa1b 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e091      	b.n	8008d7c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691a      	ldr	r2, [r3, #16]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c84:	3b01      	subs	r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	691a      	ldr	r2, [r3, #16]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cac:	1c5a      	adds	r2, r3, #1
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008ccc:	e042      	b.n	8008d54 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 fb2e 	bl	8009334 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e04c      	b.n	8008d7c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	691a      	ldr	r2, [r3, #16]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cec:	b2d2      	uxtb	r2, r2
 8008cee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	f003 0304 	and.w	r3, r3, #4
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d118      	bne.n	8008d54 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	691a      	ldr	r2, [r3, #16]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2c:	b2d2      	uxtb	r2, r2
 8008d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d34:	1c5a      	adds	r2, r3, #1
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f47f aec2 	bne.w	8008ae2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2220      	movs	r2, #32
 8008d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	e000      	b.n	8008d7c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008d7a:	2302      	movs	r3, #2
  }
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3728      	adds	r7, #40	@ 0x28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	00010004 	.word	0x00010004

08008d88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b088      	sub	sp, #32
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	4608      	mov	r0, r1
 8008d92:	4611      	mov	r1, r2
 8008d94:	461a      	mov	r2, r3
 8008d96:	4603      	mov	r3, r0
 8008d98:	817b      	strh	r3, [r7, #10]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	813b      	strh	r3, [r7, #8]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008db0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 f960 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00d      	beq.n	8008de6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dd8:	d103      	bne.n	8008de2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008de0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e05f      	b.n	8008ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008de6:	897b      	ldrh	r3, [r7, #10]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	461a      	mov	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008df4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df8:	6a3a      	ldr	r2, [r7, #32]
 8008dfa:	492d      	ldr	r1, [pc, #180]	@ (8008eb0 <I2C_RequestMemoryWrite+0x128>)
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 f998 	bl	8009132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e04c      	b.n	8008ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	617b      	str	r3, [r7, #20]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	617b      	str	r3, [r7, #20]
 8008e20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e24:	6a39      	ldr	r1, [r7, #32]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 fa02 	bl	8009230 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00d      	beq.n	8008e4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d107      	bne.n	8008e4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e02b      	b.n	8008ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e4e:	88fb      	ldrh	r3, [r7, #6]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d105      	bne.n	8008e60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e54:	893b      	ldrh	r3, [r7, #8]
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	611a      	str	r2, [r3, #16]
 8008e5e:	e021      	b.n	8008ea4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008e60:	893b      	ldrh	r3, [r7, #8]
 8008e62:	0a1b      	lsrs	r3, r3, #8
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e70:	6a39      	ldr	r1, [r7, #32]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f9dc 	bl	8009230 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00d      	beq.n	8008e9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d107      	bne.n	8008e96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e005      	b.n	8008ea6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e9a:	893b      	ldrh	r3, [r7, #8]
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	00010002 	.word	0x00010002

08008eb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af02      	add	r7, sp, #8
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	817b      	strh	r3, [r7, #10]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	813b      	strh	r3, [r7, #8]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008edc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008eec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 f8c2 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00d      	beq.n	8008f22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f14:	d103      	bne.n	8008f1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e0aa      	b.n	8009078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f22:	897b      	ldrh	r3, [r7, #10]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	461a      	mov	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008f30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f34:	6a3a      	ldr	r2, [r7, #32]
 8008f36:	4952      	ldr	r1, [pc, #328]	@ (8009080 <I2C_RequestMemoryRead+0x1cc>)
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f8fa 	bl	8009132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e097      	b.n	8009078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f48:	2300      	movs	r3, #0
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	617b      	str	r3, [r7, #20]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f60:	6a39      	ldr	r1, [r7, #32]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 f964 	bl	8009230 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00d      	beq.n	8008f8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f72:	2b04      	cmp	r3, #4
 8008f74:	d107      	bne.n	8008f86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e076      	b.n	8009078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f8a:	88fb      	ldrh	r3, [r7, #6]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d105      	bne.n	8008f9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f90:	893b      	ldrh	r3, [r7, #8]
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	611a      	str	r2, [r3, #16]
 8008f9a:	e021      	b.n	8008fe0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008f9c:	893b      	ldrh	r3, [r7, #8]
 8008f9e:	0a1b      	lsrs	r3, r3, #8
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fac:	6a39      	ldr	r1, [r7, #32]
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 f93e 	bl	8009230 <I2C_WaitOnTXEFlagUntilTimeout>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00d      	beq.n	8008fd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	d107      	bne.n	8008fd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e050      	b.n	8009078 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008fd6:	893b      	ldrh	r3, [r7, #8]
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fe2:	6a39      	ldr	r1, [r7, #32]
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 f923 	bl	8009230 <I2C_WaitOnTXEFlagUntilTimeout>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00d      	beq.n	800900c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d107      	bne.n	8009008 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009006:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e035      	b.n	8009078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800901a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	2200      	movs	r2, #0
 8009024:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f82b 	bl	8009084 <I2C_WaitOnFlagUntilTimeout>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00d      	beq.n	8009050 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800903e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009042:	d103      	bne.n	800904c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800904a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e013      	b.n	8009078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009050:	897b      	ldrh	r3, [r7, #10]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f043 0301 	orr.w	r3, r3, #1
 8009058:	b2da      	uxtb	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009062:	6a3a      	ldr	r2, [r7, #32]
 8009064:	4906      	ldr	r1, [pc, #24]	@ (8009080 <I2C_RequestMemoryRead+0x1cc>)
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 f863 	bl	8009132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	00010002 	.word	0x00010002

08009084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	4613      	mov	r3, r2
 8009092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009094:	e025      	b.n	80090e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800909c:	d021      	beq.n	80090e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800909e:	f7fe f94d 	bl	800733c <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d302      	bcc.n	80090b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d116      	bne.n	80090e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2220      	movs	r2, #32
 80090be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ce:	f043 0220 	orr.w	r2, r3, #32
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e023      	b.n	800912a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	0c1b      	lsrs	r3, r3, #16
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d10d      	bne.n	8009108 <I2C_WaitOnFlagUntilTimeout+0x84>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	43da      	mvns	r2, r3
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4013      	ands	r3, r2
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bf0c      	ite	eq
 80090fe:	2301      	moveq	r3, #1
 8009100:	2300      	movne	r3, #0
 8009102:	b2db      	uxtb	r3, r3
 8009104:	461a      	mov	r2, r3
 8009106:	e00c      	b.n	8009122 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	43da      	mvns	r2, r3
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4013      	ands	r3, r2
 8009114:	b29b      	uxth	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	bf0c      	ite	eq
 800911a:	2301      	moveq	r3, #1
 800911c:	2300      	movne	r3, #0
 800911e:	b2db      	uxtb	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	79fb      	ldrb	r3, [r7, #7]
 8009124:	429a      	cmp	r2, r3
 8009126:	d0b6      	beq.n	8009096 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	607a      	str	r2, [r7, #4]
 800913e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009140:	e051      	b.n	80091e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800914c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009150:	d123      	bne.n	800919a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009160:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800916a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2220      	movs	r2, #32
 8009176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009186:	f043 0204 	orr.w	r2, r3, #4
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e046      	b.n	8009228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091a0:	d021      	beq.n	80091e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a2:	f7fe f8cb 	bl	800733c <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d302      	bcc.n	80091b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d116      	bne.n	80091e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d2:	f043 0220 	orr.w	r2, r3, #32
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e020      	b.n	8009228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	0c1b      	lsrs	r3, r3, #16
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d10c      	bne.n	800920a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	43da      	mvns	r2, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	4013      	ands	r3, r2
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	bf14      	ite	ne
 8009202:	2301      	movne	r3, #1
 8009204:	2300      	moveq	r3, #0
 8009206:	b2db      	uxtb	r3, r3
 8009208:	e00b      	b.n	8009222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	43da      	mvns	r2, r3
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	4013      	ands	r3, r2
 8009216:	b29b      	uxth	r3, r3
 8009218:	2b00      	cmp	r3, #0
 800921a:	bf14      	ite	ne
 800921c:	2301      	movne	r3, #1
 800921e:	2300      	moveq	r3, #0
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d18d      	bne.n	8009142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800923c:	e02d      	b.n	800929a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 f8ce 	bl	80093e0 <I2C_IsAcknowledgeFailed>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e02d      	b.n	80092aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009254:	d021      	beq.n	800929a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009256:	f7fe f871 	bl	800733c <HAL_GetTick>
 800925a:	4602      	mov	r2, r0
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	429a      	cmp	r2, r3
 8009264:	d302      	bcc.n	800926c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d116      	bne.n	800929a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2220      	movs	r2, #32
 8009276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009286:	f043 0220 	orr.w	r2, r3, #32
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e007      	b.n	80092aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092a4:	2b80      	cmp	r3, #128	@ 0x80
 80092a6:	d1ca      	bne.n	800923e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80092be:	e02d      	b.n	800931c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 f88d 	bl	80093e0 <I2C_IsAcknowledgeFailed>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e02d      	b.n	800932c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092d6:	d021      	beq.n	800931c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092d8:	f7fe f830 	bl	800733c <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d302      	bcc.n	80092ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d116      	bne.n	800931c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2220      	movs	r2, #32
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009308:	f043 0220 	orr.w	r2, r3, #32
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e007      	b.n	800932c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	f003 0304 	and.w	r3, r3, #4
 8009326:	2b04      	cmp	r3, #4
 8009328:	d1ca      	bne.n	80092c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009340:	e042      	b.n	80093c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b10      	cmp	r3, #16
 800934e:	d119      	bne.n	8009384 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f06f 0210 	mvn.w	r2, #16
 8009358:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2220      	movs	r2, #32
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e029      	b.n	80093d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009384:	f7fd ffda 	bl	800733c <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	429a      	cmp	r2, r3
 8009392:	d302      	bcc.n	800939a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d116      	bne.n	80093c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b4:	f043 0220 	orr.w	r2, r3, #32
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e007      	b.n	80093d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d2:	2b40      	cmp	r3, #64	@ 0x40
 80093d4:	d1b5      	bne.n	8009342 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093f6:	d11b      	bne.n	8009430 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009400:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2220      	movs	r2, #32
 800940c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800941c:	f043 0204 	orr.w	r2, r3, #4
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e000      	b.n	8009432 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
	...

08009440 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009446:	4b06      	ldr	r3, [pc, #24]	@ (8009460 <HAL_PWR_EnableBkUpAccess+0x20>)
 8009448:	2201      	movs	r2, #1
 800944a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800944c:	4b05      	ldr	r3, [pc, #20]	@ (8009464 <HAL_PWR_EnableBkUpAccess+0x24>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009452:	687b      	ldr	r3, [r7, #4]
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	420e0020 	.word	0x420e0020
 8009464:	40007000 	.word	0x40007000

08009468 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800946e:	4b06      	ldr	r3, [pc, #24]	@ (8009488 <HAL_PWR_DisableBkUpAccess+0x20>)
 8009470:	2200      	movs	r2, #0
 8009472:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009474:	4b05      	ldr	r3, [pc, #20]	@ (800948c <HAL_PWR_DisableBkUpAccess+0x24>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800947a:	687b      	ldr	r3, [r7, #4]
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	420e0020 	.word	0x420e0020
 800948c:	40007000 	.word	0x40007000

08009490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e267      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d075      	beq.n	800959a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80094ae:	4b88      	ldr	r3, [pc, #544]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f003 030c 	and.w	r3, r3, #12
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d00c      	beq.n	80094d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094ba:	4b85      	ldr	r3, [pc, #532]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80094c2:	2b08      	cmp	r3, #8
 80094c4:	d112      	bne.n	80094ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094c6:	4b82      	ldr	r3, [pc, #520]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094d2:	d10b      	bne.n	80094ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094d4:	4b7e      	ldr	r3, [pc, #504]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d05b      	beq.n	8009598 <HAL_RCC_OscConfig+0x108>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d157      	bne.n	8009598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e242      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094f4:	d106      	bne.n	8009504 <HAL_RCC_OscConfig+0x74>
 80094f6:	4b76      	ldr	r3, [pc, #472]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a75      	ldr	r2, [pc, #468]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80094fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	e01d      	b.n	8009540 <HAL_RCC_OscConfig+0xb0>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800950c:	d10c      	bne.n	8009528 <HAL_RCC_OscConfig+0x98>
 800950e:	4b70      	ldr	r3, [pc, #448]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a6f      	ldr	r2, [pc, #444]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 8009514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	4b6d      	ldr	r3, [pc, #436]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a6c      	ldr	r2, [pc, #432]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 8009520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	e00b      	b.n	8009540 <HAL_RCC_OscConfig+0xb0>
 8009528:	4b69      	ldr	r3, [pc, #420]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a68      	ldr	r2, [pc, #416]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 800952e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009532:	6013      	str	r3, [r2, #0]
 8009534:	4b66      	ldr	r3, [pc, #408]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a65      	ldr	r2, [pc, #404]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 800953a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800953e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d013      	beq.n	8009570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009548:	f7fd fef8 	bl	800733c <HAL_GetTick>
 800954c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800954e:	e008      	b.n	8009562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009550:	f7fd fef4 	bl	800733c <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b64      	cmp	r3, #100	@ 0x64
 800955c:	d901      	bls.n	8009562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e207      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009562:	4b5b      	ldr	r3, [pc, #364]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0f0      	beq.n	8009550 <HAL_RCC_OscConfig+0xc0>
 800956e:	e014      	b.n	800959a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009570:	f7fd fee4 	bl	800733c <HAL_GetTick>
 8009574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009576:	e008      	b.n	800958a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009578:	f7fd fee0 	bl	800733c <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	2b64      	cmp	r3, #100	@ 0x64
 8009584:	d901      	bls.n	800958a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e1f3      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800958a:	4b51      	ldr	r3, [pc, #324]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1f0      	bne.n	8009578 <HAL_RCC_OscConfig+0xe8>
 8009596:	e000      	b.n	800959a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d063      	beq.n	800966e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80095a6:	4b4a      	ldr	r3, [pc, #296]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f003 030c 	and.w	r3, r3, #12
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00b      	beq.n	80095ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095b2:	4b47      	ldr	r3, [pc, #284]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80095ba:	2b08      	cmp	r3, #8
 80095bc:	d11c      	bne.n	80095f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095be:	4b44      	ldr	r3, [pc, #272]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d116      	bne.n	80095f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095ca:	4b41      	ldr	r3, [pc, #260]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d005      	beq.n	80095e2 <HAL_RCC_OscConfig+0x152>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d001      	beq.n	80095e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e1c7      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095e2:	4b3b      	ldr	r3, [pc, #236]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	4937      	ldr	r1, [pc, #220]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095f6:	e03a      	b.n	800966e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d020      	beq.n	8009642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009600:	4b34      	ldr	r3, [pc, #208]	@ (80096d4 <HAL_RCC_OscConfig+0x244>)
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009606:	f7fd fe99 	bl	800733c <HAL_GetTick>
 800960a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800960c:	e008      	b.n	8009620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800960e:	f7fd fe95 	bl	800733c <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	2b02      	cmp	r3, #2
 800961a:	d901      	bls.n	8009620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e1a8      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009620:	4b2b      	ldr	r3, [pc, #172]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0302 	and.w	r3, r3, #2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0f0      	beq.n	800960e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800962c:	4b28      	ldr	r3, [pc, #160]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	4925      	ldr	r1, [pc, #148]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 800963c:	4313      	orrs	r3, r2
 800963e:	600b      	str	r3, [r1, #0]
 8009640:	e015      	b.n	800966e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009642:	4b24      	ldr	r3, [pc, #144]	@ (80096d4 <HAL_RCC_OscConfig+0x244>)
 8009644:	2200      	movs	r2, #0
 8009646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009648:	f7fd fe78 	bl	800733c <HAL_GetTick>
 800964c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800964e:	e008      	b.n	8009662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009650:	f7fd fe74 	bl	800733c <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	2b02      	cmp	r3, #2
 800965c:	d901      	bls.n	8009662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e187      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009662:	4b1b      	ldr	r3, [pc, #108]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1f0      	bne.n	8009650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0308 	and.w	r3, r3, #8
 8009676:	2b00      	cmp	r3, #0
 8009678:	d036      	beq.n	80096e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d016      	beq.n	80096b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009682:	4b15      	ldr	r3, [pc, #84]	@ (80096d8 <HAL_RCC_OscConfig+0x248>)
 8009684:	2201      	movs	r2, #1
 8009686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009688:	f7fd fe58 	bl	800733c <HAL_GetTick>
 800968c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800968e:	e008      	b.n	80096a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009690:	f7fd fe54 	bl	800733c <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	2b02      	cmp	r3, #2
 800969c:	d901      	bls.n	80096a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e167      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096a2:	4b0b      	ldr	r3, [pc, #44]	@ (80096d0 <HAL_RCC_OscConfig+0x240>)
 80096a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d0f0      	beq.n	8009690 <HAL_RCC_OscConfig+0x200>
 80096ae:	e01b      	b.n	80096e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096b0:	4b09      	ldr	r3, [pc, #36]	@ (80096d8 <HAL_RCC_OscConfig+0x248>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096b6:	f7fd fe41 	bl	800733c <HAL_GetTick>
 80096ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096bc:	e00e      	b.n	80096dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096be:	f7fd fe3d 	bl	800733c <HAL_GetTick>
 80096c2:	4602      	mov	r2, r0
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d907      	bls.n	80096dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e150      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
 80096d0:	40023800 	.word	0x40023800
 80096d4:	42470000 	.word	0x42470000
 80096d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096dc:	4b88      	ldr	r3, [pc, #544]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 80096de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1ea      	bne.n	80096be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 8097 	beq.w	8009824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096f6:	2300      	movs	r3, #0
 80096f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096fa:	4b81      	ldr	r3, [pc, #516]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 80096fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10f      	bne.n	8009726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009706:	2300      	movs	r3, #0
 8009708:	60bb      	str	r3, [r7, #8]
 800970a:	4b7d      	ldr	r3, [pc, #500]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 800970c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800970e:	4a7c      	ldr	r2, [pc, #496]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 8009710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009714:	6413      	str	r3, [r2, #64]	@ 0x40
 8009716:	4b7a      	ldr	r3, [pc, #488]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 8009718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800971a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800971e:	60bb      	str	r3, [r7, #8]
 8009720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009722:	2301      	movs	r3, #1
 8009724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009726:	4b77      	ldr	r3, [pc, #476]	@ (8009904 <HAL_RCC_OscConfig+0x474>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800972e:	2b00      	cmp	r3, #0
 8009730:	d118      	bne.n	8009764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009732:	4b74      	ldr	r3, [pc, #464]	@ (8009904 <HAL_RCC_OscConfig+0x474>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a73      	ldr	r2, [pc, #460]	@ (8009904 <HAL_RCC_OscConfig+0x474>)
 8009738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800973c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800973e:	f7fd fdfd 	bl	800733c <HAL_GetTick>
 8009742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009744:	e008      	b.n	8009758 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009746:	f7fd fdf9 	bl	800733c <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	2b02      	cmp	r3, #2
 8009752:	d901      	bls.n	8009758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e10c      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009758:	4b6a      	ldr	r3, [pc, #424]	@ (8009904 <HAL_RCC_OscConfig+0x474>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009760:	2b00      	cmp	r3, #0
 8009762:	d0f0      	beq.n	8009746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d106      	bne.n	800977a <HAL_RCC_OscConfig+0x2ea>
 800976c:	4b64      	ldr	r3, [pc, #400]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 800976e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009770:	4a63      	ldr	r2, [pc, #396]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 8009772:	f043 0301 	orr.w	r3, r3, #1
 8009776:	6713      	str	r3, [r2, #112]	@ 0x70
 8009778:	e01c      	b.n	80097b4 <HAL_RCC_OscConfig+0x324>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	2b05      	cmp	r3, #5
 8009780:	d10c      	bne.n	800979c <HAL_RCC_OscConfig+0x30c>
 8009782:	4b5f      	ldr	r3, [pc, #380]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 8009784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009786:	4a5e      	ldr	r2, [pc, #376]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 8009788:	f043 0304 	orr.w	r3, r3, #4
 800978c:	6713      	str	r3, [r2, #112]	@ 0x70
 800978e:	4b5c      	ldr	r3, [pc, #368]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 8009790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009792:	4a5b      	ldr	r2, [pc, #364]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 8009794:	f043 0301 	orr.w	r3, r3, #1
 8009798:	6713      	str	r3, [r2, #112]	@ 0x70
 800979a:	e00b      	b.n	80097b4 <HAL_RCC_OscConfig+0x324>
 800979c:	4b58      	ldr	r3, [pc, #352]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 800979e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097a0:	4a57      	ldr	r2, [pc, #348]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 80097a2:	f023 0301 	bic.w	r3, r3, #1
 80097a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80097a8:	4b55      	ldr	r3, [pc, #340]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 80097aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ac:	4a54      	ldr	r2, [pc, #336]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 80097ae:	f023 0304 	bic.w	r3, r3, #4
 80097b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d015      	beq.n	80097e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097bc:	f7fd fdbe 	bl	800733c <HAL_GetTick>
 80097c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097c2:	e00a      	b.n	80097da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097c4:	f7fd fdba 	bl	800733c <HAL_GetTick>
 80097c8:	4602      	mov	r2, r0
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d901      	bls.n	80097da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e0cb      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097da:	4b49      	ldr	r3, [pc, #292]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 80097dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097de:	f003 0302 	and.w	r3, r3, #2
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0ee      	beq.n	80097c4 <HAL_RCC_OscConfig+0x334>
 80097e6:	e014      	b.n	8009812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097e8:	f7fd fda8 	bl	800733c <HAL_GetTick>
 80097ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097ee:	e00a      	b.n	8009806 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097f0:	f7fd fda4 	bl	800733c <HAL_GetTick>
 80097f4:	4602      	mov	r2, r0
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097fe:	4293      	cmp	r3, r2
 8009800:	d901      	bls.n	8009806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	e0b5      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009806:	4b3e      	ldr	r3, [pc, #248]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 8009808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800980a:	f003 0302 	and.w	r3, r3, #2
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1ee      	bne.n	80097f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d105      	bne.n	8009824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009818:	4b39      	ldr	r3, [pc, #228]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 800981a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800981c:	4a38      	ldr	r2, [pc, #224]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 800981e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009822:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 80a1 	beq.w	8009970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800982e:	4b34      	ldr	r3, [pc, #208]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f003 030c 	and.w	r3, r3, #12
 8009836:	2b08      	cmp	r3, #8
 8009838:	d05c      	beq.n	80098f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	2b02      	cmp	r3, #2
 8009840:	d141      	bne.n	80098c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009842:	4b31      	ldr	r3, [pc, #196]	@ (8009908 <HAL_RCC_OscConfig+0x478>)
 8009844:	2200      	movs	r2, #0
 8009846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009848:	f7fd fd78 	bl	800733c <HAL_GetTick>
 800984c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800984e:	e008      	b.n	8009862 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009850:	f7fd fd74 	bl	800733c <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	2b02      	cmp	r3, #2
 800985c:	d901      	bls.n	8009862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e087      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009862:	4b27      	ldr	r3, [pc, #156]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1f0      	bne.n	8009850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	69da      	ldr	r2, [r3, #28]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987c:	019b      	lsls	r3, r3, #6
 800987e:	431a      	orrs	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009884:	085b      	lsrs	r3, r3, #1
 8009886:	3b01      	subs	r3, #1
 8009888:	041b      	lsls	r3, r3, #16
 800988a:	431a      	orrs	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009890:	061b      	lsls	r3, r3, #24
 8009892:	491b      	ldr	r1, [pc, #108]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 8009894:	4313      	orrs	r3, r2
 8009896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009898:	4b1b      	ldr	r3, [pc, #108]	@ (8009908 <HAL_RCC_OscConfig+0x478>)
 800989a:	2201      	movs	r2, #1
 800989c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800989e:	f7fd fd4d 	bl	800733c <HAL_GetTick>
 80098a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098a4:	e008      	b.n	80098b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098a6:	f7fd fd49 	bl	800733c <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d901      	bls.n	80098b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e05c      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098b8:	4b11      	ldr	r3, [pc, #68]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d0f0      	beq.n	80098a6 <HAL_RCC_OscConfig+0x416>
 80098c4:	e054      	b.n	8009970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098c6:	4b10      	ldr	r3, [pc, #64]	@ (8009908 <HAL_RCC_OscConfig+0x478>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098cc:	f7fd fd36 	bl	800733c <HAL_GetTick>
 80098d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098d2:	e008      	b.n	80098e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098d4:	f7fd fd32 	bl	800733c <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d901      	bls.n	80098e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e045      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098e6:	4b06      	ldr	r3, [pc, #24]	@ (8009900 <HAL_RCC_OscConfig+0x470>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1f0      	bne.n	80098d4 <HAL_RCC_OscConfig+0x444>
 80098f2:	e03d      	b.n	8009970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d107      	bne.n	800990c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e038      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
 8009900:	40023800 	.word	0x40023800
 8009904:	40007000 	.word	0x40007000
 8009908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800990c:	4b1b      	ldr	r3, [pc, #108]	@ (800997c <HAL_RCC_OscConfig+0x4ec>)
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d028      	beq.n	800996c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009924:	429a      	cmp	r2, r3
 8009926:	d121      	bne.n	800996c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009932:	429a      	cmp	r2, r3
 8009934:	d11a      	bne.n	800996c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800993c:	4013      	ands	r3, r2
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009944:	4293      	cmp	r3, r2
 8009946:	d111      	bne.n	800996c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009952:	085b      	lsrs	r3, r3, #1
 8009954:	3b01      	subs	r3, #1
 8009956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009958:	429a      	cmp	r2, r3
 800995a:	d107      	bne.n	800996c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009968:	429a      	cmp	r2, r3
 800996a:	d001      	beq.n	8009970 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e000      	b.n	8009972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	40023800 	.word	0x40023800

08009980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e0cc      	b.n	8009b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009994:	4b68      	ldr	r3, [pc, #416]	@ (8009b38 <HAL_RCC_ClockConfig+0x1b8>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0307 	and.w	r3, r3, #7
 800999c:	683a      	ldr	r2, [r7, #0]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d90c      	bls.n	80099bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099a2:	4b65      	ldr	r3, [pc, #404]	@ (8009b38 <HAL_RCC_ClockConfig+0x1b8>)
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	b2d2      	uxtb	r2, r2
 80099a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099aa:	4b63      	ldr	r3, [pc, #396]	@ (8009b38 <HAL_RCC_ClockConfig+0x1b8>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0307 	and.w	r3, r3, #7
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d001      	beq.n	80099bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e0b8      	b.n	8009b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d020      	beq.n	8009a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0304 	and.w	r3, r3, #4
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d005      	beq.n	80099e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80099d4:	4b59      	ldr	r3, [pc, #356]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	4a58      	ldr	r2, [pc, #352]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 80099da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80099de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0308 	and.w	r3, r3, #8
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d005      	beq.n	80099f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80099ec:	4b53      	ldr	r3, [pc, #332]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	4a52      	ldr	r2, [pc, #328]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 80099f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80099f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099f8:	4b50      	ldr	r3, [pc, #320]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	494d      	ldr	r1, [pc, #308]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d044      	beq.n	8009aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d107      	bne.n	8009a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a1e:	4b47      	ldr	r3, [pc, #284]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d119      	bne.n	8009a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e07f      	b.n	8009b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d003      	beq.n	8009a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d107      	bne.n	8009a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d109      	bne.n	8009a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e06f      	b.n	8009b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e067      	b.n	8009b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a5e:	4b37      	ldr	r3, [pc, #220]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	f023 0203 	bic.w	r2, r3, #3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	4934      	ldr	r1, [pc, #208]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a70:	f7fd fc64 	bl	800733c <HAL_GetTick>
 8009a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a76:	e00a      	b.n	8009a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a78:	f7fd fc60 	bl	800733c <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d901      	bls.n	8009a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e04f      	b.n	8009b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	f003 020c 	and.w	r2, r3, #12
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d1eb      	bne.n	8009a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009aa0:	4b25      	ldr	r3, [pc, #148]	@ (8009b38 <HAL_RCC_ClockConfig+0x1b8>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0307 	and.w	r3, r3, #7
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d20c      	bcs.n	8009ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009aae:	4b22      	ldr	r3, [pc, #136]	@ (8009b38 <HAL_RCC_ClockConfig+0x1b8>)
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	b2d2      	uxtb	r2, r2
 8009ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ab6:	4b20      	ldr	r3, [pc, #128]	@ (8009b38 <HAL_RCC_ClockConfig+0x1b8>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0307 	and.w	r3, r3, #7
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d001      	beq.n	8009ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e032      	b.n	8009b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0304 	and.w	r3, r3, #4
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d008      	beq.n	8009ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ad4:	4b19      	ldr	r3, [pc, #100]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	4916      	ldr	r1, [pc, #88]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0308 	and.w	r3, r3, #8
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d009      	beq.n	8009b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009af2:	4b12      	ldr	r3, [pc, #72]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	00db      	lsls	r3, r3, #3
 8009b00:	490e      	ldr	r1, [pc, #56]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009b06:	f000 f821 	bl	8009b4c <HAL_RCC_GetSysClockFreq>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009b3c <HAL_RCC_ClockConfig+0x1bc>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	091b      	lsrs	r3, r3, #4
 8009b12:	f003 030f 	and.w	r3, r3, #15
 8009b16:	490a      	ldr	r1, [pc, #40]	@ (8009b40 <HAL_RCC_ClockConfig+0x1c0>)
 8009b18:	5ccb      	ldrb	r3, [r1, r3]
 8009b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b1e:	4a09      	ldr	r2, [pc, #36]	@ (8009b44 <HAL_RCC_ClockConfig+0x1c4>)
 8009b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009b22:	4b09      	ldr	r3, [pc, #36]	@ (8009b48 <HAL_RCC_ClockConfig+0x1c8>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fd fbc4 	bl	80072b4 <HAL_InitTick>

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	40023c00 	.word	0x40023c00
 8009b3c:	40023800 	.word	0x40023800
 8009b40:	08013df8 	.word	0x08013df8
 8009b44:	20000148 	.word	0x20000148
 8009b48:	2000014c 	.word	0x2000014c

08009b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b50:	b090      	sub	sp, #64	@ 0x40
 8009b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b58:	2300      	movs	r3, #0
 8009b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b64:	4b59      	ldr	r3, [pc, #356]	@ (8009ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f003 030c 	and.w	r3, r3, #12
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d00d      	beq.n	8009b8c <HAL_RCC_GetSysClockFreq+0x40>
 8009b70:	2b08      	cmp	r3, #8
 8009b72:	f200 80a1 	bhi.w	8009cb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d002      	beq.n	8009b80 <HAL_RCC_GetSysClockFreq+0x34>
 8009b7a:	2b04      	cmp	r3, #4
 8009b7c:	d003      	beq.n	8009b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8009b7e:	e09b      	b.n	8009cb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b80:	4b53      	ldr	r3, [pc, #332]	@ (8009cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8009b82:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8009b84:	e09b      	b.n	8009cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b86:	4b53      	ldr	r3, [pc, #332]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009b88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009b8a:	e098      	b.n	8009cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8009ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b94:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b96:	4b4d      	ldr	r3, [pc, #308]	@ (8009ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d028      	beq.n	8009bf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8009ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	099b      	lsrs	r3, r3, #6
 8009ba8:	2200      	movs	r2, #0
 8009baa:	623b      	str	r3, [r7, #32]
 8009bac:	627a      	str	r2, [r7, #36]	@ 0x24
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	4b47      	ldr	r3, [pc, #284]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009bb8:	fb03 f201 	mul.w	r2, r3, r1
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	fb00 f303 	mul.w	r3, r0, r3
 8009bc2:	4413      	add	r3, r2
 8009bc4:	4a43      	ldr	r2, [pc, #268]	@ (8009cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009bc6:	fba0 1202 	umull	r1, r2, r0, r2
 8009bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bcc:	460a      	mov	r2, r1
 8009bce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009bd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bd2:	4413      	add	r3, r2
 8009bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd8:	2200      	movs	r2, #0
 8009bda:	61bb      	str	r3, [r7, #24]
 8009bdc:	61fa      	str	r2, [r7, #28]
 8009bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009be2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009be6:	f7f7 f84f 	bl	8000c88 <__aeabi_uldivmod>
 8009bea:	4602      	mov	r2, r0
 8009bec:	460b      	mov	r3, r1
 8009bee:	4613      	mov	r3, r2
 8009bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bf2:	e053      	b.n	8009c9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bf4:	4b35      	ldr	r3, [pc, #212]	@ (8009ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	099b      	lsrs	r3, r3, #6
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	613b      	str	r3, [r7, #16]
 8009bfe:	617a      	str	r2, [r7, #20]
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009c06:	f04f 0b00 	mov.w	fp, #0
 8009c0a:	4652      	mov	r2, sl
 8009c0c:	465b      	mov	r3, fp
 8009c0e:	f04f 0000 	mov.w	r0, #0
 8009c12:	f04f 0100 	mov.w	r1, #0
 8009c16:	0159      	lsls	r1, r3, #5
 8009c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c1c:	0150      	lsls	r0, r2, #5
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	ebb2 080a 	subs.w	r8, r2, sl
 8009c26:	eb63 090b 	sbc.w	r9, r3, fp
 8009c2a:	f04f 0200 	mov.w	r2, #0
 8009c2e:	f04f 0300 	mov.w	r3, #0
 8009c32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009c36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009c3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009c3e:	ebb2 0408 	subs.w	r4, r2, r8
 8009c42:	eb63 0509 	sbc.w	r5, r3, r9
 8009c46:	f04f 0200 	mov.w	r2, #0
 8009c4a:	f04f 0300 	mov.w	r3, #0
 8009c4e:	00eb      	lsls	r3, r5, #3
 8009c50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c54:	00e2      	lsls	r2, r4, #3
 8009c56:	4614      	mov	r4, r2
 8009c58:	461d      	mov	r5, r3
 8009c5a:	eb14 030a 	adds.w	r3, r4, sl
 8009c5e:	603b      	str	r3, [r7, #0]
 8009c60:	eb45 030b 	adc.w	r3, r5, fp
 8009c64:	607b      	str	r3, [r7, #4]
 8009c66:	f04f 0200 	mov.w	r2, #0
 8009c6a:	f04f 0300 	mov.w	r3, #0
 8009c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009c72:	4629      	mov	r1, r5
 8009c74:	028b      	lsls	r3, r1, #10
 8009c76:	4621      	mov	r1, r4
 8009c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	028a      	lsls	r2, r1, #10
 8009c80:	4610      	mov	r0, r2
 8009c82:	4619      	mov	r1, r3
 8009c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c86:	2200      	movs	r2, #0
 8009c88:	60bb      	str	r3, [r7, #8]
 8009c8a:	60fa      	str	r2, [r7, #12]
 8009c8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c90:	f7f6 fffa 	bl	8000c88 <__aeabi_uldivmod>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4613      	mov	r3, r2
 8009c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	0c1b      	lsrs	r3, r3, #16
 8009ca2:	f003 0303 	and.w	r3, r3, #3
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8009cac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009cb6:	e002      	b.n	8009cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009cb8:	4b05      	ldr	r3, [pc, #20]	@ (8009cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8009cba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3740      	adds	r7, #64	@ 0x40
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cca:	bf00      	nop
 8009ccc:	40023800 	.word	0x40023800
 8009cd0:	00f42400 	.word	0x00f42400
 8009cd4:	017d7840 	.word	0x017d7840

08009cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009cdc:	4b03      	ldr	r3, [pc, #12]	@ (8009cec <HAL_RCC_GetHCLKFreq+0x14>)
 8009cde:	681b      	ldr	r3, [r3, #0]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	20000148 	.word	0x20000148

08009cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009cf4:	f7ff fff0 	bl	8009cd8 <HAL_RCC_GetHCLKFreq>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	4b05      	ldr	r3, [pc, #20]	@ (8009d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	0a9b      	lsrs	r3, r3, #10
 8009d00:	f003 0307 	and.w	r3, r3, #7
 8009d04:	4903      	ldr	r1, [pc, #12]	@ (8009d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d06:	5ccb      	ldrb	r3, [r1, r3]
 8009d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	40023800 	.word	0x40023800
 8009d14:	08013e08 	.word	0x08013e08

08009d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009d1c:	f7ff ffdc 	bl	8009cd8 <HAL_RCC_GetHCLKFreq>
 8009d20:	4602      	mov	r2, r0
 8009d22:	4b05      	ldr	r3, [pc, #20]	@ (8009d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	0b5b      	lsrs	r3, r3, #13
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	4903      	ldr	r1, [pc, #12]	@ (8009d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d2e:	5ccb      	ldrb	r3, [r1, r3]
 8009d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	40023800 	.word	0x40023800
 8009d3c:	08013e08 	.word	0x08013e08

08009d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e041      	b.n	8009dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d106      	bne.n	8009d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f7fc ff14 	bl	8006b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4610      	mov	r0, r2
 8009d80:	f001 f842 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e041      	b.n	8009e74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d106      	bne.n	8009e0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f839 	bl	8009e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2202      	movs	r2, #2
 8009e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f000 fff3 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d109      	bne.n	8009eb4 <HAL_TIM_PWM_Start+0x24>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	bf14      	ite	ne
 8009eac:	2301      	movne	r3, #1
 8009eae:	2300      	moveq	r3, #0
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	e022      	b.n	8009efa <HAL_TIM_PWM_Start+0x6a>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d109      	bne.n	8009ece <HAL_TIM_PWM_Start+0x3e>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	bf14      	ite	ne
 8009ec6:	2301      	movne	r3, #1
 8009ec8:	2300      	moveq	r3, #0
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	e015      	b.n	8009efa <HAL_TIM_PWM_Start+0x6a>
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b08      	cmp	r3, #8
 8009ed2:	d109      	bne.n	8009ee8 <HAL_TIM_PWM_Start+0x58>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	bf14      	ite	ne
 8009ee0:	2301      	movne	r3, #1
 8009ee2:	2300      	moveq	r3, #0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	e008      	b.n	8009efa <HAL_TIM_PWM_Start+0x6a>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	bf14      	ite	ne
 8009ef4:	2301      	movne	r3, #1
 8009ef6:	2300      	moveq	r3, #0
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e07c      	b.n	8009ffc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d104      	bne.n	8009f12 <HAL_TIM_PWM_Start+0x82>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f10:	e013      	b.n	8009f3a <HAL_TIM_PWM_Start+0xaa>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d104      	bne.n	8009f22 <HAL_TIM_PWM_Start+0x92>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f20:	e00b      	b.n	8009f3a <HAL_TIM_PWM_Start+0xaa>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b08      	cmp	r3, #8
 8009f26:	d104      	bne.n	8009f32 <HAL_TIM_PWM_Start+0xa2>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f30:	e003      	b.n	8009f3a <HAL_TIM_PWM_Start+0xaa>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2202      	movs	r2, #2
 8009f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f001 fb74 	bl	800b630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a2d      	ldr	r2, [pc, #180]	@ (800a004 <HAL_TIM_PWM_Start+0x174>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d004      	beq.n	8009f5c <HAL_TIM_PWM_Start+0xcc>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a2c      	ldr	r2, [pc, #176]	@ (800a008 <HAL_TIM_PWM_Start+0x178>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d101      	bne.n	8009f60 <HAL_TIM_PWM_Start+0xd0>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e000      	b.n	8009f62 <HAL_TIM_PWM_Start+0xd2>
 8009f60:	2300      	movs	r3, #0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d007      	beq.n	8009f76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a22      	ldr	r2, [pc, #136]	@ (800a004 <HAL_TIM_PWM_Start+0x174>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d022      	beq.n	8009fc6 <HAL_TIM_PWM_Start+0x136>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f88:	d01d      	beq.n	8009fc6 <HAL_TIM_PWM_Start+0x136>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800a00c <HAL_TIM_PWM_Start+0x17c>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d018      	beq.n	8009fc6 <HAL_TIM_PWM_Start+0x136>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a1d      	ldr	r2, [pc, #116]	@ (800a010 <HAL_TIM_PWM_Start+0x180>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d013      	beq.n	8009fc6 <HAL_TIM_PWM_Start+0x136>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a1c      	ldr	r2, [pc, #112]	@ (800a014 <HAL_TIM_PWM_Start+0x184>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d00e      	beq.n	8009fc6 <HAL_TIM_PWM_Start+0x136>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a16      	ldr	r2, [pc, #88]	@ (800a008 <HAL_TIM_PWM_Start+0x178>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d009      	beq.n	8009fc6 <HAL_TIM_PWM_Start+0x136>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a18      	ldr	r2, [pc, #96]	@ (800a018 <HAL_TIM_PWM_Start+0x188>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d004      	beq.n	8009fc6 <HAL_TIM_PWM_Start+0x136>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a16      	ldr	r2, [pc, #88]	@ (800a01c <HAL_TIM_PWM_Start+0x18c>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d111      	bne.n	8009fea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f003 0307 	and.w	r3, r3, #7
 8009fd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b06      	cmp	r3, #6
 8009fd6:	d010      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f042 0201 	orr.w	r2, r2, #1
 8009fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fe8:	e007      	b.n	8009ffa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f042 0201 	orr.w	r2, r2, #1
 8009ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	40010000 	.word	0x40010000
 800a008:	40010400 	.word	0x40010400
 800a00c:	40000400 	.word	0x40000400
 800a010:	40000800 	.word	0x40000800
 800a014:	40000c00 	.word	0x40000c00
 800a018:	40014000 	.word	0x40014000
 800a01c:	40001800 	.word	0x40001800

0800a020 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e041      	b.n	800a0b6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d106      	bne.n	800a04c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7fc feda 	bl	8006e00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2202      	movs	r2, #2
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3304      	adds	r3, #4
 800a05c:	4619      	mov	r1, r3
 800a05e:	4610      	mov	r0, r2
 800a060:	f000 fed2 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d104      	bne.n	800a0de <HAL_TIM_IC_Start_IT+0x1e>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	e013      	b.n	800a106 <HAL_TIM_IC_Start_IT+0x46>
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d104      	bne.n	800a0ee <HAL_TIM_IC_Start_IT+0x2e>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	e00b      	b.n	800a106 <HAL_TIM_IC_Start_IT+0x46>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d104      	bne.n	800a0fe <HAL_TIM_IC_Start_IT+0x3e>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	e003      	b.n	800a106 <HAL_TIM_IC_Start_IT+0x46>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a104:	b2db      	uxtb	r3, r3
 800a106:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d104      	bne.n	800a118 <HAL_TIM_IC_Start_IT+0x58>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a114:	b2db      	uxtb	r3, r3
 800a116:	e013      	b.n	800a140 <HAL_TIM_IC_Start_IT+0x80>
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b04      	cmp	r3, #4
 800a11c:	d104      	bne.n	800a128 <HAL_TIM_IC_Start_IT+0x68>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a124:	b2db      	uxtb	r3, r3
 800a126:	e00b      	b.n	800a140 <HAL_TIM_IC_Start_IT+0x80>
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	2b08      	cmp	r3, #8
 800a12c:	d104      	bne.n	800a138 <HAL_TIM_IC_Start_IT+0x78>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a134:	b2db      	uxtb	r3, r3
 800a136:	e003      	b.n	800a140 <HAL_TIM_IC_Start_IT+0x80>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d102      	bne.n	800a14e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a148:	7b7b      	ldrb	r3, [r7, #13]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d001      	beq.n	800a152 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e0cc      	b.n	800a2ec <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d104      	bne.n	800a162 <HAL_TIM_IC_Start_IT+0xa2>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a160:	e013      	b.n	800a18a <HAL_TIM_IC_Start_IT+0xca>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b04      	cmp	r3, #4
 800a166:	d104      	bne.n	800a172 <HAL_TIM_IC_Start_IT+0xb2>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a170:	e00b      	b.n	800a18a <HAL_TIM_IC_Start_IT+0xca>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b08      	cmp	r3, #8
 800a176:	d104      	bne.n	800a182 <HAL_TIM_IC_Start_IT+0xc2>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2202      	movs	r2, #2
 800a17c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a180:	e003      	b.n	800a18a <HAL_TIM_IC_Start_IT+0xca>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2202      	movs	r2, #2
 800a186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d104      	bne.n	800a19a <HAL_TIM_IC_Start_IT+0xda>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a198:	e013      	b.n	800a1c2 <HAL_TIM_IC_Start_IT+0x102>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b04      	cmp	r3, #4
 800a19e:	d104      	bne.n	800a1aa <HAL_TIM_IC_Start_IT+0xea>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a1a8:	e00b      	b.n	800a1c2 <HAL_TIM_IC_Start_IT+0x102>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b08      	cmp	r3, #8
 800a1ae:	d104      	bne.n	800a1ba <HAL_TIM_IC_Start_IT+0xfa>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1b8:	e003      	b.n	800a1c2 <HAL_TIM_IC_Start_IT+0x102>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2202      	movs	r2, #2
 800a1be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	2b0c      	cmp	r3, #12
 800a1c6:	d841      	bhi.n	800a24c <HAL_TIM_IC_Start_IT+0x18c>
 800a1c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d0 <HAL_TIM_IC_Start_IT+0x110>)
 800a1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ce:	bf00      	nop
 800a1d0:	0800a205 	.word	0x0800a205
 800a1d4:	0800a24d 	.word	0x0800a24d
 800a1d8:	0800a24d 	.word	0x0800a24d
 800a1dc:	0800a24d 	.word	0x0800a24d
 800a1e0:	0800a217 	.word	0x0800a217
 800a1e4:	0800a24d 	.word	0x0800a24d
 800a1e8:	0800a24d 	.word	0x0800a24d
 800a1ec:	0800a24d 	.word	0x0800a24d
 800a1f0:	0800a229 	.word	0x0800a229
 800a1f4:	0800a24d 	.word	0x0800a24d
 800a1f8:	0800a24d 	.word	0x0800a24d
 800a1fc:	0800a24d 	.word	0x0800a24d
 800a200:	0800a23b 	.word	0x0800a23b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68da      	ldr	r2, [r3, #12]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0202 	orr.w	r2, r2, #2
 800a212:	60da      	str	r2, [r3, #12]
      break;
 800a214:	e01d      	b.n	800a252 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68da      	ldr	r2, [r3, #12]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f042 0204 	orr.w	r2, r2, #4
 800a224:	60da      	str	r2, [r3, #12]
      break;
 800a226:	e014      	b.n	800a252 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68da      	ldr	r2, [r3, #12]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f042 0208 	orr.w	r2, r2, #8
 800a236:	60da      	str	r2, [r3, #12]
      break;
 800a238:	e00b      	b.n	800a252 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f042 0210 	orr.w	r2, r2, #16
 800a248:	60da      	str	r2, [r3, #12]
      break;
 800a24a:	e002      	b.n	800a252 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	73fb      	strb	r3, [r7, #15]
      break;
 800a250:	bf00      	nop
  }

  if (status == HAL_OK)
 800a252:	7bfb      	ldrb	r3, [r7, #15]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d148      	bne.n	800a2ea <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2201      	movs	r2, #1
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	4618      	mov	r0, r3
 800a262:	f001 f9e5 	bl	800b630 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a22      	ldr	r2, [pc, #136]	@ (800a2f4 <HAL_TIM_IC_Start_IT+0x234>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d022      	beq.n	800a2b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a278:	d01d      	beq.n	800a2b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a1e      	ldr	r2, [pc, #120]	@ (800a2f8 <HAL_TIM_IC_Start_IT+0x238>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d018      	beq.n	800a2b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a1c      	ldr	r2, [pc, #112]	@ (800a2fc <HAL_TIM_IC_Start_IT+0x23c>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d013      	beq.n	800a2b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a1b      	ldr	r2, [pc, #108]	@ (800a300 <HAL_TIM_IC_Start_IT+0x240>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d00e      	beq.n	800a2b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a19      	ldr	r2, [pc, #100]	@ (800a304 <HAL_TIM_IC_Start_IT+0x244>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d009      	beq.n	800a2b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a18      	ldr	r2, [pc, #96]	@ (800a308 <HAL_TIM_IC_Start_IT+0x248>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d004      	beq.n	800a2b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a16      	ldr	r2, [pc, #88]	@ (800a30c <HAL_TIM_IC_Start_IT+0x24c>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d111      	bne.n	800a2da <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	f003 0307 	and.w	r3, r3, #7
 800a2c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2b06      	cmp	r3, #6
 800a2c6:	d010      	beq.n	800a2ea <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f042 0201 	orr.w	r2, r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2d8:	e007      	b.n	800a2ea <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f042 0201 	orr.w	r2, r2, #1
 800a2e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	40010000 	.word	0x40010000
 800a2f8:	40000400 	.word	0x40000400
 800a2fc:	40000800 	.word	0x40000800
 800a300:	40000c00 	.word	0x40000c00
 800a304:	40010400 	.word	0x40010400
 800a308:	40014000 	.word	0x40014000
 800a30c:	40001800 	.word	0x40001800

0800a310 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b0c      	cmp	r3, #12
 800a322:	d841      	bhi.n	800a3a8 <HAL_TIM_IC_Stop_IT+0x98>
 800a324:	a201      	add	r2, pc, #4	@ (adr r2, 800a32c <HAL_TIM_IC_Stop_IT+0x1c>)
 800a326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32a:	bf00      	nop
 800a32c:	0800a361 	.word	0x0800a361
 800a330:	0800a3a9 	.word	0x0800a3a9
 800a334:	0800a3a9 	.word	0x0800a3a9
 800a338:	0800a3a9 	.word	0x0800a3a9
 800a33c:	0800a373 	.word	0x0800a373
 800a340:	0800a3a9 	.word	0x0800a3a9
 800a344:	0800a3a9 	.word	0x0800a3a9
 800a348:	0800a3a9 	.word	0x0800a3a9
 800a34c:	0800a385 	.word	0x0800a385
 800a350:	0800a3a9 	.word	0x0800a3a9
 800a354:	0800a3a9 	.word	0x0800a3a9
 800a358:	0800a3a9 	.word	0x0800a3a9
 800a35c:	0800a397 	.word	0x0800a397
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68da      	ldr	r2, [r3, #12]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 0202 	bic.w	r2, r2, #2
 800a36e:	60da      	str	r2, [r3, #12]
      break;
 800a370:	e01d      	b.n	800a3ae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f022 0204 	bic.w	r2, r2, #4
 800a380:	60da      	str	r2, [r3, #12]
      break;
 800a382:	e014      	b.n	800a3ae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f022 0208 	bic.w	r2, r2, #8
 800a392:	60da      	str	r2, [r3, #12]
      break;
 800a394:	e00b      	b.n	800a3ae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f022 0210 	bic.w	r2, r2, #16
 800a3a4:	60da      	str	r2, [r3, #12]
      break;
 800a3a6:	e002      	b.n	800a3ae <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ac:	bf00      	nop
  }

  if (status == HAL_OK)
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d156      	bne.n	800a462 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f001 f937 	bl	800b630 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6a1a      	ldr	r2, [r3, #32]
 800a3c8:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10f      	bne.n	800a3f2 <HAL_TIM_IC_Stop_IT+0xe2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6a1a      	ldr	r2, [r3, #32]
 800a3d8:	f240 4344 	movw	r3, #1092	@ 0x444
 800a3dc:	4013      	ands	r3, r2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d107      	bne.n	800a3f2 <HAL_TIM_IC_Stop_IT+0xe2>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0201 	bic.w	r2, r2, #1
 800a3f0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d104      	bne.n	800a402 <HAL_TIM_IC_Stop_IT+0xf2>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a400:	e013      	b.n	800a42a <HAL_TIM_IC_Stop_IT+0x11a>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b04      	cmp	r3, #4
 800a406:	d104      	bne.n	800a412 <HAL_TIM_IC_Stop_IT+0x102>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a410:	e00b      	b.n	800a42a <HAL_TIM_IC_Stop_IT+0x11a>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b08      	cmp	r3, #8
 800a416:	d104      	bne.n	800a422 <HAL_TIM_IC_Stop_IT+0x112>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a420:	e003      	b.n	800a42a <HAL_TIM_IC_Stop_IT+0x11a>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d104      	bne.n	800a43a <HAL_TIM_IC_Stop_IT+0x12a>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a438:	e013      	b.n	800a462 <HAL_TIM_IC_Stop_IT+0x152>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d104      	bne.n	800a44a <HAL_TIM_IC_Stop_IT+0x13a>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a448:	e00b      	b.n	800a462 <HAL_TIM_IC_Stop_IT+0x152>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d104      	bne.n	800a45a <HAL_TIM_IC_Stop_IT+0x14a>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a458:	e003      	b.n	800a462 <HAL_TIM_IC_Stop_IT+0x152>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e097      	b.n	800a5b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d106      	bne.n	800a49a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7fc fc19 	bl	8006ccc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2202      	movs	r2, #2
 800a49e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4b0:	f023 0307 	bic.w	r3, r3, #7
 800a4b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4619      	mov	r1, r3
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	f000 fca1 	bl	800ae08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6a1b      	ldr	r3, [r3, #32]
 800a4dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4ee:	f023 0303 	bic.w	r3, r3, #3
 800a4f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	021b      	lsls	r3, r3, #8
 800a4fe:	4313      	orrs	r3, r2
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	4313      	orrs	r3, r2
 800a504:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a50c:	f023 030c 	bic.w	r3, r3, #12
 800a510:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a518:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a51c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	021b      	lsls	r3, r3, #8
 800a528:	4313      	orrs	r3, r2
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	011a      	lsls	r2, r3, #4
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	031b      	lsls	r3, r3, #12
 800a53c:	4313      	orrs	r3, r2
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	4313      	orrs	r3, r2
 800a542:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a54a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a552:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	695b      	ldr	r3, [r3, #20]
 800a55c:	011b      	lsls	r3, r3, #4
 800a55e:	4313      	orrs	r3, r2
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4313      	orrs	r3, r2
 800a564:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a5c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a5d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a5d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a5e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d110      	bne.n	800a60a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d102      	bne.n	800a5f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a5ee:	7b7b      	ldrb	r3, [r7, #13]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d001      	beq.n	800a5f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e069      	b.n	800a6cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2202      	movs	r2, #2
 800a604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a608:	e031      	b.n	800a66e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2b04      	cmp	r3, #4
 800a60e:	d110      	bne.n	800a632 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d102      	bne.n	800a61c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a616:	7b3b      	ldrb	r3, [r7, #12]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d001      	beq.n	800a620 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e055      	b.n	800a6cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2202      	movs	r2, #2
 800a62c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a630:	e01d      	b.n	800a66e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d108      	bne.n	800a64a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d105      	bne.n	800a64a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a63e:	7b7b      	ldrb	r3, [r7, #13]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d102      	bne.n	800a64a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a644:	7b3b      	ldrb	r3, [r7, #12]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d001      	beq.n	800a64e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e03e      	b.n	800a6cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2202      	movs	r2, #2
 800a652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2202      	movs	r2, #2
 800a65a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2202      	movs	r2, #2
 800a662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2202      	movs	r2, #2
 800a66a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d003      	beq.n	800a67c <HAL_TIM_Encoder_Start+0xc4>
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2b04      	cmp	r3, #4
 800a678:	d008      	beq.n	800a68c <HAL_TIM_Encoder_Start+0xd4>
 800a67a:	e00f      	b.n	800a69c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2201      	movs	r2, #1
 800a682:	2100      	movs	r1, #0
 800a684:	4618      	mov	r0, r3
 800a686:	f000 ffd3 	bl	800b630 <TIM_CCxChannelCmd>
      break;
 800a68a:	e016      	b.n	800a6ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2201      	movs	r2, #1
 800a692:	2104      	movs	r1, #4
 800a694:	4618      	mov	r0, r3
 800a696:	f000 ffcb 	bl	800b630 <TIM_CCxChannelCmd>
      break;
 800a69a:	e00e      	b.n	800a6ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 ffc3 	bl	800b630 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	2104      	movs	r1, #4
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 ffbc 	bl	800b630 <TIM_CCxChannelCmd>
      break;
 800a6b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f042 0201 	orr.w	r2, r2, #1
 800a6c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	f003 0302 	and.w	r3, r3, #2
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d122      	bne.n	800a730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d11b      	bne.n	800a730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f06f 0202 	mvn.w	r2, #2
 800a700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	f003 0303 	and.w	r3, r3, #3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7fb fd2a 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 800a71c:	e005      	b.n	800a72a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fb54 	bl	800adcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fb5b 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	f003 0304 	and.w	r3, r3, #4
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d122      	bne.n	800a784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	f003 0304 	and.w	r3, r3, #4
 800a748:	2b04      	cmp	r3, #4
 800a74a:	d11b      	bne.n	800a784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f06f 0204 	mvn.w	r2, #4
 800a754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2202      	movs	r2, #2
 800a75a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7fb fd00 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 800a770:	e005      	b.n	800a77e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fb2a 	bl	800adcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fb31 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	f003 0308 	and.w	r3, r3, #8
 800a78e:	2b08      	cmp	r3, #8
 800a790:	d122      	bne.n	800a7d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	f003 0308 	and.w	r3, r3, #8
 800a79c:	2b08      	cmp	r3, #8
 800a79e:	d11b      	bne.n	800a7d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f06f 0208 	mvn.w	r2, #8
 800a7a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2204      	movs	r2, #4
 800a7ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	f003 0303 	and.w	r3, r3, #3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7fb fcd6 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 800a7c4:	e005      	b.n	800a7d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fb00 	bl	800adcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fb07 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	f003 0310 	and.w	r3, r3, #16
 800a7e2:	2b10      	cmp	r3, #16
 800a7e4:	d122      	bne.n	800a82c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f003 0310 	and.w	r3, r3, #16
 800a7f0:	2b10      	cmp	r3, #16
 800a7f2:	d11b      	bne.n	800a82c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f06f 0210 	mvn.w	r2, #16
 800a7fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2208      	movs	r2, #8
 800a802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7fb fcac 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 800a818:	e005      	b.n	800a826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fad6 	bl	800adcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fadd 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b01      	cmp	r3, #1
 800a838:	d10e      	bne.n	800a858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f003 0301 	and.w	r3, r3, #1
 800a844:	2b01      	cmp	r3, #1
 800a846:	d107      	bne.n	800a858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f06f 0201 	mvn.w	r2, #1
 800a850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fab0 	bl	800adb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a862:	2b80      	cmp	r3, #128	@ 0x80
 800a864:	d10e      	bne.n	800a884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a870:	2b80      	cmp	r3, #128	@ 0x80
 800a872:	d107      	bne.n	800a884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a87c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 ffd4 	bl	800b82c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a88e:	2b40      	cmp	r3, #64	@ 0x40
 800a890:	d10e      	bne.n	800a8b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a89c:	2b40      	cmp	r3, #64	@ 0x40
 800a89e:	d107      	bne.n	800a8b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a8a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 faa2 	bl	800adf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	f003 0320 	and.w	r3, r3, #32
 800a8ba:	2b20      	cmp	r3, #32
 800a8bc:	d10e      	bne.n	800a8dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	f003 0320 	and.w	r3, r3, #32
 800a8c8:	2b20      	cmp	r3, #32
 800a8ca:	d107      	bne.n	800a8dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f06f 0220 	mvn.w	r2, #32
 800a8d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 ff9e 	bl	800b818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8dc:	bf00      	nop
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d101      	bne.n	800a902 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a8fe:	2302      	movs	r3, #2
 800a900:	e088      	b.n	800aa14 <HAL_TIM_IC_ConfigChannel+0x130>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d11b      	bne.n	800a948 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6818      	ldr	r0, [r3, #0]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	6819      	ldr	r1, [r3, #0]
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f000 fcc2 	bl	800b2a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	699a      	ldr	r2, [r3, #24]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f022 020c 	bic.w	r2, r2, #12
 800a932:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6999      	ldr	r1, [r3, #24]
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	689a      	ldr	r2, [r3, #8]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	430a      	orrs	r2, r1
 800a944:	619a      	str	r2, [r3, #24]
 800a946:	e060      	b.n	800aa0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b04      	cmp	r3, #4
 800a94c:	d11c      	bne.n	800a988 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6818      	ldr	r0, [r3, #0]
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	6819      	ldr	r1, [r3, #0]
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	685a      	ldr	r2, [r3, #4]
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	f000 fd46 	bl	800b3ee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	699a      	ldr	r2, [r3, #24]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a970:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6999      	ldr	r1, [r3, #24]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	021a      	lsls	r2, r3, #8
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	619a      	str	r2, [r3, #24]
 800a986:	e040      	b.n	800aa0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b08      	cmp	r3, #8
 800a98c:	d11b      	bne.n	800a9c6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6818      	ldr	r0, [r3, #0]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	6819      	ldr	r1, [r3, #0]
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	f000 fd93 	bl	800b4c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	69da      	ldr	r2, [r3, #28]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 020c 	bic.w	r2, r2, #12
 800a9b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69d9      	ldr	r1, [r3, #28]
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	689a      	ldr	r2, [r3, #8]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	61da      	str	r2, [r3, #28]
 800a9c4:	e021      	b.n	800aa0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b0c      	cmp	r3, #12
 800a9ca:	d11c      	bne.n	800aa06 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f000 fdb0 	bl	800b540 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	69da      	ldr	r2, [r3, #28]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a9ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	69d9      	ldr	r1, [r3, #28]
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	021a      	lsls	r2, r3, #8
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	430a      	orrs	r2, r1
 800aa02:	61da      	str	r2, [r3, #28]
 800aa04:	e001      	b.n	800aa0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d101      	bne.n	800aa3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa36:	2302      	movs	r3, #2
 800aa38:	e0ae      	b.n	800ab98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b0c      	cmp	r3, #12
 800aa46:	f200 809f 	bhi.w	800ab88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aa4a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aa4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa50:	0800aa85 	.word	0x0800aa85
 800aa54:	0800ab89 	.word	0x0800ab89
 800aa58:	0800ab89 	.word	0x0800ab89
 800aa5c:	0800ab89 	.word	0x0800ab89
 800aa60:	0800aac5 	.word	0x0800aac5
 800aa64:	0800ab89 	.word	0x0800ab89
 800aa68:	0800ab89 	.word	0x0800ab89
 800aa6c:	0800ab89 	.word	0x0800ab89
 800aa70:	0800ab07 	.word	0x0800ab07
 800aa74:	0800ab89 	.word	0x0800ab89
 800aa78:	0800ab89 	.word	0x0800ab89
 800aa7c:	0800ab89 	.word	0x0800ab89
 800aa80:	0800ab47 	.word	0x0800ab47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68b9      	ldr	r1, [r7, #8]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fa5c 	bl	800af48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	699a      	ldr	r2, [r3, #24]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f042 0208 	orr.w	r2, r2, #8
 800aa9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	699a      	ldr	r2, [r3, #24]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f022 0204 	bic.w	r2, r2, #4
 800aaae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6999      	ldr	r1, [r3, #24]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	691a      	ldr	r2, [r3, #16]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	430a      	orrs	r2, r1
 800aac0:	619a      	str	r2, [r3, #24]
      break;
 800aac2:	e064      	b.n	800ab8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 faac 	bl	800b028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	699a      	ldr	r2, [r3, #24]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	699a      	ldr	r2, [r3, #24]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aaee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	6999      	ldr	r1, [r3, #24]
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	021a      	lsls	r2, r3, #8
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	430a      	orrs	r2, r1
 800ab02:	619a      	str	r2, [r3, #24]
      break;
 800ab04:	e043      	b.n	800ab8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 fb01 	bl	800b114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	69da      	ldr	r2, [r3, #28]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f042 0208 	orr.w	r2, r2, #8
 800ab20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	69da      	ldr	r2, [r3, #28]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f022 0204 	bic.w	r2, r2, #4
 800ab30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	69d9      	ldr	r1, [r3, #28]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	691a      	ldr	r2, [r3, #16]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	430a      	orrs	r2, r1
 800ab42:	61da      	str	r2, [r3, #28]
      break;
 800ab44:	e023      	b.n	800ab8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68b9      	ldr	r1, [r7, #8]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 fb55 	bl	800b1fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	69da      	ldr	r2, [r3, #28]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69da      	ldr	r2, [r3, #28]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	69d9      	ldr	r1, [r3, #28]
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	021a      	lsls	r2, r3, #8
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	430a      	orrs	r2, r1
 800ab84:	61da      	str	r2, [r3, #28]
      break;
 800ab86:	e002      	b.n	800ab8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d101      	bne.n	800abbc <HAL_TIM_ConfigClockSource+0x1c>
 800abb8:	2302      	movs	r3, #2
 800abba:	e0b4      	b.n	800ad26 <HAL_TIM_ConfigClockSource+0x186>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2202      	movs	r2, #2
 800abc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800abda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800abe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abf4:	d03e      	beq.n	800ac74 <HAL_TIM_ConfigClockSource+0xd4>
 800abf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abfa:	f200 8087 	bhi.w	800ad0c <HAL_TIM_ConfigClockSource+0x16c>
 800abfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac02:	f000 8086 	beq.w	800ad12 <HAL_TIM_ConfigClockSource+0x172>
 800ac06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac0a:	d87f      	bhi.n	800ad0c <HAL_TIM_ConfigClockSource+0x16c>
 800ac0c:	2b70      	cmp	r3, #112	@ 0x70
 800ac0e:	d01a      	beq.n	800ac46 <HAL_TIM_ConfigClockSource+0xa6>
 800ac10:	2b70      	cmp	r3, #112	@ 0x70
 800ac12:	d87b      	bhi.n	800ad0c <HAL_TIM_ConfigClockSource+0x16c>
 800ac14:	2b60      	cmp	r3, #96	@ 0x60
 800ac16:	d050      	beq.n	800acba <HAL_TIM_ConfigClockSource+0x11a>
 800ac18:	2b60      	cmp	r3, #96	@ 0x60
 800ac1a:	d877      	bhi.n	800ad0c <HAL_TIM_ConfigClockSource+0x16c>
 800ac1c:	2b50      	cmp	r3, #80	@ 0x50
 800ac1e:	d03c      	beq.n	800ac9a <HAL_TIM_ConfigClockSource+0xfa>
 800ac20:	2b50      	cmp	r3, #80	@ 0x50
 800ac22:	d873      	bhi.n	800ad0c <HAL_TIM_ConfigClockSource+0x16c>
 800ac24:	2b40      	cmp	r3, #64	@ 0x40
 800ac26:	d058      	beq.n	800acda <HAL_TIM_ConfigClockSource+0x13a>
 800ac28:	2b40      	cmp	r3, #64	@ 0x40
 800ac2a:	d86f      	bhi.n	800ad0c <HAL_TIM_ConfigClockSource+0x16c>
 800ac2c:	2b30      	cmp	r3, #48	@ 0x30
 800ac2e:	d064      	beq.n	800acfa <HAL_TIM_ConfigClockSource+0x15a>
 800ac30:	2b30      	cmp	r3, #48	@ 0x30
 800ac32:	d86b      	bhi.n	800ad0c <HAL_TIM_ConfigClockSource+0x16c>
 800ac34:	2b20      	cmp	r3, #32
 800ac36:	d060      	beq.n	800acfa <HAL_TIM_ConfigClockSource+0x15a>
 800ac38:	2b20      	cmp	r3, #32
 800ac3a:	d867      	bhi.n	800ad0c <HAL_TIM_ConfigClockSource+0x16c>
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d05c      	beq.n	800acfa <HAL_TIM_ConfigClockSource+0x15a>
 800ac40:	2b10      	cmp	r3, #16
 800ac42:	d05a      	beq.n	800acfa <HAL_TIM_ConfigClockSource+0x15a>
 800ac44:	e062      	b.n	800ad0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	6899      	ldr	r1, [r3, #8]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	685a      	ldr	r2, [r3, #4]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	f000 fccb 	bl	800b5f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ac68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	609a      	str	r2, [r3, #8]
      break;
 800ac72:	e04f      	b.n	800ad14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	6899      	ldr	r1, [r3, #8]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	f000 fcb4 	bl	800b5f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	689a      	ldr	r2, [r3, #8]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ac96:	609a      	str	r2, [r3, #8]
      break;
 800ac98:	e03c      	b.n	800ad14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6818      	ldr	r0, [r3, #0]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	6859      	ldr	r1, [r3, #4]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	461a      	mov	r2, r3
 800aca8:	f000 fb72 	bl	800b390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2150      	movs	r1, #80	@ 0x50
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fc81 	bl	800b5ba <TIM_ITRx_SetConfig>
      break;
 800acb8:	e02c      	b.n	800ad14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	6859      	ldr	r1, [r3, #4]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	461a      	mov	r2, r3
 800acc8:	f000 fbce 	bl	800b468 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2160      	movs	r1, #96	@ 0x60
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 fc71 	bl	800b5ba <TIM_ITRx_SetConfig>
      break;
 800acd8:	e01c      	b.n	800ad14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6818      	ldr	r0, [r3, #0]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	6859      	ldr	r1, [r3, #4]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	461a      	mov	r2, r3
 800ace8:	f000 fb52 	bl	800b390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2140      	movs	r1, #64	@ 0x40
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 fc61 	bl	800b5ba <TIM_ITRx_SetConfig>
      break;
 800acf8:	e00c      	b.n	800ad14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4619      	mov	r1, r3
 800ad04:	4610      	mov	r0, r2
 800ad06:	f000 fc58 	bl	800b5ba <TIM_ITRx_SetConfig>
      break;
 800ad0a:	e003      	b.n	800ad14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad10:	e000      	b.n	800ad14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ad12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b0c      	cmp	r3, #12
 800ad42:	d831      	bhi.n	800ada8 <HAL_TIM_ReadCapturedValue+0x78>
 800ad44:	a201      	add	r2, pc, #4	@ (adr r2, 800ad4c <HAL_TIM_ReadCapturedValue+0x1c>)
 800ad46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4a:	bf00      	nop
 800ad4c:	0800ad81 	.word	0x0800ad81
 800ad50:	0800ada9 	.word	0x0800ada9
 800ad54:	0800ada9 	.word	0x0800ada9
 800ad58:	0800ada9 	.word	0x0800ada9
 800ad5c:	0800ad8b 	.word	0x0800ad8b
 800ad60:	0800ada9 	.word	0x0800ada9
 800ad64:	0800ada9 	.word	0x0800ada9
 800ad68:	0800ada9 	.word	0x0800ada9
 800ad6c:	0800ad95 	.word	0x0800ad95
 800ad70:	0800ada9 	.word	0x0800ada9
 800ad74:	0800ada9 	.word	0x0800ada9
 800ad78:	0800ada9 	.word	0x0800ada9
 800ad7c:	0800ad9f 	.word	0x0800ad9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad86:	60fb      	str	r3, [r7, #12]

      break;
 800ad88:	e00f      	b.n	800adaa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad90:	60fb      	str	r3, [r7, #12]

      break;
 800ad92:	e00a      	b.n	800adaa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad9a:	60fb      	str	r3, [r7, #12]

      break;
 800ad9c:	e005      	b.n	800adaa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ada4:	60fb      	str	r3, [r7, #12]

      break;
 800ada6:	e000      	b.n	800adaa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800ada8:	bf00      	nop
  }

  return tmpreg;
 800adaa:	68fb      	ldr	r3, [r7, #12]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a40      	ldr	r2, [pc, #256]	@ (800af1c <TIM_Base_SetConfig+0x114>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d013      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae26:	d00f      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a3d      	ldr	r2, [pc, #244]	@ (800af20 <TIM_Base_SetConfig+0x118>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d00b      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a3c      	ldr	r2, [pc, #240]	@ (800af24 <TIM_Base_SetConfig+0x11c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d007      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a3b      	ldr	r2, [pc, #236]	@ (800af28 <TIM_Base_SetConfig+0x120>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d003      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a3a      	ldr	r2, [pc, #232]	@ (800af2c <TIM_Base_SetConfig+0x124>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d108      	bne.n	800ae5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a2f      	ldr	r2, [pc, #188]	@ (800af1c <TIM_Base_SetConfig+0x114>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d02b      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae68:	d027      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a2c      	ldr	r2, [pc, #176]	@ (800af20 <TIM_Base_SetConfig+0x118>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d023      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a2b      	ldr	r2, [pc, #172]	@ (800af24 <TIM_Base_SetConfig+0x11c>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d01f      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a2a      	ldr	r2, [pc, #168]	@ (800af28 <TIM_Base_SetConfig+0x120>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d01b      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a29      	ldr	r2, [pc, #164]	@ (800af2c <TIM_Base_SetConfig+0x124>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d017      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a28      	ldr	r2, [pc, #160]	@ (800af30 <TIM_Base_SetConfig+0x128>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d013      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a27      	ldr	r2, [pc, #156]	@ (800af34 <TIM_Base_SetConfig+0x12c>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d00f      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a26      	ldr	r2, [pc, #152]	@ (800af38 <TIM_Base_SetConfig+0x130>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d00b      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a25      	ldr	r2, [pc, #148]	@ (800af3c <TIM_Base_SetConfig+0x134>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d007      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a24      	ldr	r2, [pc, #144]	@ (800af40 <TIM_Base_SetConfig+0x138>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d003      	beq.n	800aeba <TIM_Base_SetConfig+0xb2>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a23      	ldr	r2, [pc, #140]	@ (800af44 <TIM_Base_SetConfig+0x13c>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d108      	bne.n	800aecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	689a      	ldr	r2, [r3, #8]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a0a      	ldr	r2, [pc, #40]	@ (800af1c <TIM_Base_SetConfig+0x114>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d003      	beq.n	800af00 <TIM_Base_SetConfig+0xf8>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a0c      	ldr	r2, [pc, #48]	@ (800af2c <TIM_Base_SetConfig+0x124>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d103      	bne.n	800af08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	691a      	ldr	r2, [r3, #16]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	615a      	str	r2, [r3, #20]
}
 800af0e:	bf00      	nop
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	40010000 	.word	0x40010000
 800af20:	40000400 	.word	0x40000400
 800af24:	40000800 	.word	0x40000800
 800af28:	40000c00 	.word	0x40000c00
 800af2c:	40010400 	.word	0x40010400
 800af30:	40014000 	.word	0x40014000
 800af34:	40014400 	.word	0x40014400
 800af38:	40014800 	.word	0x40014800
 800af3c:	40001800 	.word	0x40001800
 800af40:	40001c00 	.word	0x40001c00
 800af44:	40002000 	.word	0x40002000

0800af48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	f023 0201 	bic.w	r2, r3, #1
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 0303 	bic.w	r3, r3, #3
 800af7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	4313      	orrs	r3, r2
 800af88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f023 0302 	bic.w	r3, r3, #2
 800af90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	4313      	orrs	r3, r2
 800af9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a20      	ldr	r2, [pc, #128]	@ (800b020 <TIM_OC1_SetConfig+0xd8>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d003      	beq.n	800afac <TIM_OC1_SetConfig+0x64>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a1f      	ldr	r2, [pc, #124]	@ (800b024 <TIM_OC1_SetConfig+0xdc>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d10c      	bne.n	800afc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	f023 0308 	bic.w	r3, r3, #8
 800afb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	4313      	orrs	r3, r2
 800afbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f023 0304 	bic.w	r3, r3, #4
 800afc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a15      	ldr	r2, [pc, #84]	@ (800b020 <TIM_OC1_SetConfig+0xd8>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d003      	beq.n	800afd6 <TIM_OC1_SetConfig+0x8e>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a14      	ldr	r2, [pc, #80]	@ (800b024 <TIM_OC1_SetConfig+0xdc>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d111      	bne.n	800affa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800afe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	4313      	orrs	r3, r2
 800afee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	699b      	ldr	r3, [r3, #24]
 800aff4:	693a      	ldr	r2, [r7, #16]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	621a      	str	r2, [r3, #32]
}
 800b014:	bf00      	nop
 800b016:	371c      	adds	r7, #28
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	40010000 	.word	0x40010000
 800b024:	40010400 	.word	0x40010400

0800b028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b028:	b480      	push	{r7}
 800b02a:	b087      	sub	sp, #28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	f023 0210 	bic.w	r2, r3, #16
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	021b      	lsls	r3, r3, #8
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	4313      	orrs	r3, r2
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f023 0320 	bic.w	r3, r3, #32
 800b072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	011b      	lsls	r3, r3, #4
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a22      	ldr	r2, [pc, #136]	@ (800b10c <TIM_OC2_SetConfig+0xe4>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d003      	beq.n	800b090 <TIM_OC2_SetConfig+0x68>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a21      	ldr	r2, [pc, #132]	@ (800b110 <TIM_OC2_SetConfig+0xe8>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d10d      	bne.n	800b0ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	011b      	lsls	r3, r3, #4
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a17      	ldr	r2, [pc, #92]	@ (800b10c <TIM_OC2_SetConfig+0xe4>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d003      	beq.n	800b0bc <TIM_OC2_SetConfig+0x94>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a16      	ldr	r2, [pc, #88]	@ (800b110 <TIM_OC2_SetConfig+0xe8>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d113      	bne.n	800b0e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b0c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b0ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	695b      	ldr	r3, [r3, #20]
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	685a      	ldr	r2, [r3, #4]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	621a      	str	r2, [r3, #32]
}
 800b0fe:	bf00      	nop
 800b100:	371c      	adds	r7, #28
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	40010000 	.word	0x40010000
 800b110:	40010400 	.word	0x40010400

0800b114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b114:	b480      	push	{r7}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	69db      	ldr	r3, [r3, #28]
 800b13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f023 0303 	bic.w	r3, r3, #3
 800b14a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	4313      	orrs	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b15c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	021b      	lsls	r3, r3, #8
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	4313      	orrs	r3, r2
 800b168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a21      	ldr	r2, [pc, #132]	@ (800b1f4 <TIM_OC3_SetConfig+0xe0>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d003      	beq.n	800b17a <TIM_OC3_SetConfig+0x66>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a20      	ldr	r2, [pc, #128]	@ (800b1f8 <TIM_OC3_SetConfig+0xe4>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d10d      	bne.n	800b196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	021b      	lsls	r3, r3, #8
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a16      	ldr	r2, [pc, #88]	@ (800b1f4 <TIM_OC3_SetConfig+0xe0>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d003      	beq.n	800b1a6 <TIM_OC3_SetConfig+0x92>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a15      	ldr	r2, [pc, #84]	@ (800b1f8 <TIM_OC3_SetConfig+0xe4>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d113      	bne.n	800b1ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b1b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	699b      	ldr	r3, [r3, #24]
 800b1c6:	011b      	lsls	r3, r3, #4
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	621a      	str	r2, [r3, #32]
}
 800b1e8:	bf00      	nop
 800b1ea:	371c      	adds	r7, #28
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr
 800b1f4:	40010000 	.word	0x40010000
 800b1f8:	40010400 	.word	0x40010400

0800b1fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b087      	sub	sp, #28
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b22a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	021b      	lsls	r3, r3, #8
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	031b      	lsls	r3, r3, #12
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	4313      	orrs	r3, r2
 800b252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a12      	ldr	r2, [pc, #72]	@ (800b2a0 <TIM_OC4_SetConfig+0xa4>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d003      	beq.n	800b264 <TIM_OC4_SetConfig+0x68>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a11      	ldr	r2, [pc, #68]	@ (800b2a4 <TIM_OC4_SetConfig+0xa8>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d109      	bne.n	800b278 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b26a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	019b      	lsls	r3, r3, #6
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	4313      	orrs	r3, r2
 800b276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	697a      	ldr	r2, [r7, #20]
 800b27c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	621a      	str	r2, [r3, #32]
}
 800b292:	bf00      	nop
 800b294:	371c      	adds	r7, #28
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	40010000 	.word	0x40010000
 800b2a4:	40010400 	.word	0x40010400

0800b2a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	f023 0201 	bic.w	r2, r3, #1
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	4a28      	ldr	r2, [pc, #160]	@ (800b374 <TIM_TI1_SetConfig+0xcc>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d01b      	beq.n	800b30e <TIM_TI1_SetConfig+0x66>
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2dc:	d017      	beq.n	800b30e <TIM_TI1_SetConfig+0x66>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	4a25      	ldr	r2, [pc, #148]	@ (800b378 <TIM_TI1_SetConfig+0xd0>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d013      	beq.n	800b30e <TIM_TI1_SetConfig+0x66>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	4a24      	ldr	r2, [pc, #144]	@ (800b37c <TIM_TI1_SetConfig+0xd4>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d00f      	beq.n	800b30e <TIM_TI1_SetConfig+0x66>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	4a23      	ldr	r2, [pc, #140]	@ (800b380 <TIM_TI1_SetConfig+0xd8>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d00b      	beq.n	800b30e <TIM_TI1_SetConfig+0x66>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	4a22      	ldr	r2, [pc, #136]	@ (800b384 <TIM_TI1_SetConfig+0xdc>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d007      	beq.n	800b30e <TIM_TI1_SetConfig+0x66>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	4a21      	ldr	r2, [pc, #132]	@ (800b388 <TIM_TI1_SetConfig+0xe0>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d003      	beq.n	800b30e <TIM_TI1_SetConfig+0x66>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	4a20      	ldr	r2, [pc, #128]	@ (800b38c <TIM_TI1_SetConfig+0xe4>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d101      	bne.n	800b312 <TIM_TI1_SetConfig+0x6a>
 800b30e:	2301      	movs	r3, #1
 800b310:	e000      	b.n	800b314 <TIM_TI1_SetConfig+0x6c>
 800b312:	2300      	movs	r3, #0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d008      	beq.n	800b32a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	f023 0303 	bic.w	r3, r3, #3
 800b31e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4313      	orrs	r3, r2
 800b326:	617b      	str	r3, [r7, #20]
 800b328:	e003      	b.n	800b332 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f043 0301 	orr.w	r3, r3, #1
 800b330:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	011b      	lsls	r3, r3, #4
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	4313      	orrs	r3, r2
 800b344:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	f023 030a 	bic.w	r3, r3, #10
 800b34c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	f003 030a 	and.w	r3, r3, #10
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	4313      	orrs	r3, r2
 800b358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	621a      	str	r2, [r3, #32]
}
 800b366:	bf00      	nop
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	40010000 	.word	0x40010000
 800b378:	40000400 	.word	0x40000400
 800b37c:	40000800 	.word	0x40000800
 800b380:	40000c00 	.word	0x40000c00
 800b384:	40010400 	.word	0x40010400
 800b388:	40014000 	.word	0x40014000
 800b38c:	40001800 	.word	0x40001800

0800b390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b390:	b480      	push	{r7}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6a1b      	ldr	r3, [r3, #32]
 800b3a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	f023 0201 	bic.w	r2, r3, #1
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b3ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	011b      	lsls	r3, r3, #4
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f023 030a 	bic.w	r3, r3, #10
 800b3cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	621a      	str	r2, [r3, #32]
}
 800b3e2:	bf00      	nop
 800b3e4:	371c      	adds	r7, #28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b087      	sub	sp, #28
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	60f8      	str	r0, [r7, #12]
 800b3f6:	60b9      	str	r1, [r7, #8]
 800b3f8:	607a      	str	r2, [r7, #4]
 800b3fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6a1b      	ldr	r3, [r3, #32]
 800b400:	f023 0210 	bic.w	r2, r3, #16
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	699b      	ldr	r3, [r3, #24]
 800b40c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b41a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	021b      	lsls	r3, r3, #8
 800b420:	697a      	ldr	r2, [r7, #20]
 800b422:	4313      	orrs	r3, r2
 800b424:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b42c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	031b      	lsls	r3, r3, #12
 800b432:	b29b      	uxth	r3, r3
 800b434:	697a      	ldr	r2, [r7, #20]
 800b436:	4313      	orrs	r3, r2
 800b438:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b440:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	011b      	lsls	r3, r3, #4
 800b446:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	621a      	str	r2, [r3, #32]
}
 800b45c:	bf00      	nop
 800b45e:	371c      	adds	r7, #28
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b468:	b480      	push	{r7}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6a1b      	ldr	r3, [r3, #32]
 800b478:	f023 0210 	bic.w	r2, r3, #16
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b492:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	031b      	lsls	r3, r3, #12
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b4a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	011b      	lsls	r3, r3, #4
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	621a      	str	r2, [r3, #32]
}
 800b4bc:	bf00      	nop
 800b4be:	371c      	adds	r7, #28
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
 800b4d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	69db      	ldr	r3, [r3, #28]
 800b4e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f023 0303 	bic.w	r3, r3, #3
 800b4f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b504:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	011b      	lsls	r3, r3, #4
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	697a      	ldr	r2, [r7, #20]
 800b50e:	4313      	orrs	r3, r2
 800b510:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800b518:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	021b      	lsls	r3, r3, #8
 800b51e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800b522:	693a      	ldr	r2, [r7, #16]
 800b524:	4313      	orrs	r3, r2
 800b526:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	621a      	str	r2, [r3, #32]
}
 800b534:	bf00      	nop
 800b536:	371c      	adds	r7, #28
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b540:	b480      	push	{r7}
 800b542:	b087      	sub	sp, #28
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6a1b      	ldr	r3, [r3, #32]
 800b552:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6a1b      	ldr	r3, [r3, #32]
 800b564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b56c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	021b      	lsls	r3, r3, #8
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	4313      	orrs	r3, r2
 800b576:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b57e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	031b      	lsls	r3, r3, #12
 800b584:	b29b      	uxth	r3, r3
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	4313      	orrs	r3, r2
 800b58a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800b592:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	031b      	lsls	r3, r3, #12
 800b598:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	621a      	str	r2, [r3, #32]
}
 800b5ae:	bf00      	nop
 800b5b0:	371c      	adds	r7, #28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b085      	sub	sp, #20
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	f043 0307 	orr.w	r3, r3, #7
 800b5dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	609a      	str	r2, [r3, #8]
}
 800b5e4:	bf00      	nop
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
 800b5fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b60a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	021a      	lsls	r2, r3, #8
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	431a      	orrs	r2, r3
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	4313      	orrs	r3, r2
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	697a      	ldr	r2, [r7, #20]
 800b622:	609a      	str	r2, [r3, #8]
}
 800b624:	bf00      	nop
 800b626:	371c      	adds	r7, #28
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	f003 031f 	and.w	r3, r3, #31
 800b642:	2201      	movs	r2, #1
 800b644:	fa02 f303 	lsl.w	r3, r2, r3
 800b648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a1a      	ldr	r2, [r3, #32]
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	43db      	mvns	r3, r3
 800b652:	401a      	ands	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6a1a      	ldr	r2, [r3, #32]
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	f003 031f 	and.w	r3, r3, #31
 800b662:	6879      	ldr	r1, [r7, #4]
 800b664:	fa01 f303 	lsl.w	r3, r1, r3
 800b668:	431a      	orrs	r2, r3
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	621a      	str	r2, [r3, #32]
}
 800b66e:	bf00      	nop
 800b670:	371c      	adds	r7, #28
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
	...

0800b67c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b690:	2302      	movs	r3, #2
 800b692:	e05a      	b.n	800b74a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a21      	ldr	r2, [pc, #132]	@ (800b758 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d022      	beq.n	800b71e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6e0:	d01d      	beq.n	800b71e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a1d      	ldr	r2, [pc, #116]	@ (800b75c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d018      	beq.n	800b71e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b760 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d013      	beq.n	800b71e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a1a      	ldr	r2, [pc, #104]	@ (800b764 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d00e      	beq.n	800b71e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a18      	ldr	r2, [pc, #96]	@ (800b768 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d009      	beq.n	800b71e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a17      	ldr	r2, [pc, #92]	@ (800b76c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d004      	beq.n	800b71e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a15      	ldr	r2, [pc, #84]	@ (800b770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d10c      	bne.n	800b738 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	40010000 	.word	0x40010000
 800b75c:	40000400 	.word	0x40000400
 800b760:	40000800 	.word	0x40000800
 800b764:	40000c00 	.word	0x40000c00
 800b768:	40010400 	.word	0x40010400
 800b76c:	40014000 	.word	0x40014000
 800b770:	40001800 	.word	0x40001800

0800b774 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b77e:	2300      	movs	r3, #0
 800b780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d101      	bne.n	800b790 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b78c:	2302      	movs	r3, #2
 800b78e:	e03d      	b.n	800b80c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	69db      	ldr	r3, [r3, #28]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3714      	adds	r7, #20
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b834:	bf00      	nop
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d101      	bne.n	800b852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	e03f      	b.n	800b8d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7fb fb54 	bl	8006f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2224      	movs	r2, #36	@ 0x24
 800b870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68da      	ldr	r2, [r3, #12]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 fddf 	bl	800c448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	691a      	ldr	r2, [r3, #16]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	695a      	ldr	r2, [r3, #20]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b8a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68da      	ldr	r2, [r3, #12]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b8b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2220      	movs	r2, #32
 800b8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b08a      	sub	sp, #40	@ 0x28
 800b8de:	af02      	add	r7, sp, #8
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	603b      	str	r3, [r7, #0]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b20      	cmp	r3, #32
 800b8f8:	d17c      	bne.n	800b9f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <HAL_UART_Transmit+0x2c>
 800b900:	88fb      	ldrh	r3, [r7, #6]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e075      	b.n	800b9f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b910:	2b01      	cmp	r3, #1
 800b912:	d101      	bne.n	800b918 <HAL_UART_Transmit+0x3e>
 800b914:	2302      	movs	r3, #2
 800b916:	e06e      	b.n	800b9f6 <HAL_UART_Transmit+0x11c>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2221      	movs	r2, #33	@ 0x21
 800b92a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b92e:	f7fb fd05 	bl	800733c <HAL_GetTick>
 800b932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	88fa      	ldrh	r2, [r7, #6]
 800b938:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	88fa      	ldrh	r2, [r7, #6]
 800b93e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b948:	d108      	bne.n	800b95c <HAL_UART_Transmit+0x82>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d104      	bne.n	800b95c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b952:	2300      	movs	r3, #0
 800b954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	61bb      	str	r3, [r7, #24]
 800b95a:	e003      	b.n	800b964 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b960:	2300      	movs	r3, #0
 800b962:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2200      	movs	r2, #0
 800b968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800b96c:	e02a      	b.n	800b9c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2200      	movs	r2, #0
 800b976:	2180      	movs	r1, #128	@ 0x80
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f000 fb1f 	bl	800bfbc <UART_WaitOnFlagUntilTimeout>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e036      	b.n	800b9f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10b      	bne.n	800b9a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b99c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	3302      	adds	r3, #2
 800b9a2:	61bb      	str	r3, [r7, #24]
 800b9a4:	e007      	b.n	800b9b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	781a      	ldrb	r2, [r3, #0]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1cf      	bne.n	800b96e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	2140      	movs	r1, #64	@ 0x40
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f000 faef 	bl	800bfbc <UART_WaitOnFlagUntilTimeout>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e006      	b.n	800b9f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	e000      	b.n	800b9f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b9f4:	2302      	movs	r3, #2
  }
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3720      	adds	r7, #32
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b084      	sub	sp, #16
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	60f8      	str	r0, [r7, #12]
 800ba06:	60b9      	str	r1, [r7, #8]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	2b20      	cmp	r3, #32
 800ba16:	d11d      	bne.n	800ba54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <HAL_UART_Receive_IT+0x26>
 800ba1e:	88fb      	ldrh	r3, [r7, #6]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e016      	b.n	800ba56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d101      	bne.n	800ba36 <HAL_UART_Receive_IT+0x38>
 800ba32:	2302      	movs	r3, #2
 800ba34:	e00f      	b.n	800ba56 <HAL_UART_Receive_IT+0x58>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ba44:	88fb      	ldrh	r3, [r7, #6]
 800ba46:	461a      	mov	r2, r3
 800ba48:	68b9      	ldr	r1, [r7, #8]
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f000 fb24 	bl	800c098 <UART_Start_Receive_IT>
 800ba50:	4603      	mov	r3, r0
 800ba52:	e000      	b.n	800ba56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ba54:	2302      	movs	r3, #2
  }
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
	...

0800ba60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b0ba      	sub	sp, #232	@ 0xe8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba96:	f003 030f 	and.w	r3, r3, #15
 800ba9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ba9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10f      	bne.n	800bac6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800baa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baaa:	f003 0320 	and.w	r3, r3, #32
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d009      	beq.n	800bac6 <HAL_UART_IRQHandler+0x66>
 800bab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fc07 	bl	800c2d2 <UART_Receive_IT>
      return;
 800bac4:	e256      	b.n	800bf74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f000 80de 	beq.w	800bc8c <HAL_UART_IRQHandler+0x22c>
 800bad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bad4:	f003 0301 	and.w	r3, r3, #1
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d106      	bne.n	800baea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800badc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bae0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f000 80d1 	beq.w	800bc8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800baea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00b      	beq.n	800bb0e <HAL_UART_IRQHandler+0xae>
 800baf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bafa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d005      	beq.n	800bb0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb06:	f043 0201 	orr.w	r2, r3, #1
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb12:	f003 0304 	and.w	r3, r3, #4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00b      	beq.n	800bb32 <HAL_UART_IRQHandler+0xd2>
 800bb1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d005      	beq.n	800bb32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb2a:	f043 0202 	orr.w	r2, r3, #2
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb36:	f003 0302 	and.w	r3, r3, #2
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00b      	beq.n	800bb56 <HAL_UART_IRQHandler+0xf6>
 800bb3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d005      	beq.n	800bb56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb4e:	f043 0204 	orr.w	r2, r3, #4
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb5a:	f003 0308 	and.w	r3, r3, #8
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d011      	beq.n	800bb86 <HAL_UART_IRQHandler+0x126>
 800bb62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb66:	f003 0320 	and.w	r3, r3, #32
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d105      	bne.n	800bb7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d005      	beq.n	800bb86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb7e:	f043 0208 	orr.w	r2, r3, #8
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 81ed 	beq.w	800bf6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb94:	f003 0320 	and.w	r3, r3, #32
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d008      	beq.n	800bbae <HAL_UART_IRQHandler+0x14e>
 800bb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bba0:	f003 0320 	and.w	r3, r3, #32
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fb92 	bl	800c2d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbb8:	2b40      	cmp	r3, #64	@ 0x40
 800bbba:	bf0c      	ite	eq
 800bbbc:	2301      	moveq	r3, #1
 800bbbe:	2300      	movne	r3, #0
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbca:	f003 0308 	and.w	r3, r3, #8
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d103      	bne.n	800bbda <HAL_UART_IRQHandler+0x17a>
 800bbd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d04f      	beq.n	800bc7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fa9a 	bl	800c114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbea:	2b40      	cmp	r3, #64	@ 0x40
 800bbec:	d141      	bne.n	800bc72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3314      	adds	r3, #20
 800bbf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bbfc:	e853 3f00 	ldrex	r3, [r3]
 800bc00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bc04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	3314      	adds	r3, #20
 800bc16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bc1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bc1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc2a:	e841 2300 	strex	r3, r2, [r1]
 800bc2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bc32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1d9      	bne.n	800bbee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d013      	beq.n	800bc6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc46:	4a7d      	ldr	r2, [pc, #500]	@ (800be3c <HAL_UART_IRQHandler+0x3dc>)
 800bc48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fc fa5d 	bl	800810e <HAL_DMA_Abort_IT>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d016      	beq.n	800bc88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800bc64:	4610      	mov	r0, r2
 800bc66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc68:	e00e      	b.n	800bc88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f990 	bl	800bf90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc70:	e00a      	b.n	800bc88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f98c 	bl	800bf90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc78:	e006      	b.n	800bc88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f988 	bl	800bf90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800bc86:	e170      	b.n	800bf6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc88:	bf00      	nop
    return;
 800bc8a:	e16e      	b.n	800bf6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	f040 814a 	bne.w	800bf2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc9a:	f003 0310 	and.w	r3, r3, #16
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f000 8143 	beq.w	800bf2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bca8:	f003 0310 	and.w	r3, r3, #16
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 813c 	beq.w	800bf2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60bb      	str	r3, [r7, #8]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60bb      	str	r3, [r7, #8]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	60bb      	str	r3, [r7, #8]
 800bcc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	695b      	ldr	r3, [r3, #20]
 800bcce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcd2:	2b40      	cmp	r3, #64	@ 0x40
 800bcd4:	f040 80b4 	bne.w	800be40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bce4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 8140 	beq.w	800bf6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bcf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	f080 8139 	bcs.w	800bf6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bd02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd08:	69db      	ldr	r3, [r3, #28]
 800bd0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd0e:	f000 8088 	beq.w	800be22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	330c      	adds	r3, #12
 800bd18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bd20:	e853 3f00 	ldrex	r3, [r3]
 800bd24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bd28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	330c      	adds	r3, #12
 800bd3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bd3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bd42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bd4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bd4e:	e841 2300 	strex	r3, r2, [r1]
 800bd52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bd56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1d9      	bne.n	800bd12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	3314      	adds	r3, #20
 800bd64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd68:	e853 3f00 	ldrex	r3, [r3]
 800bd6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bd6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd70:	f023 0301 	bic.w	r3, r3, #1
 800bd74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	3314      	adds	r3, #20
 800bd7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bd82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bd86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bd8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bd8e:	e841 2300 	strex	r3, r2, [r1]
 800bd92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bd94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1e1      	bne.n	800bd5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3314      	adds	r3, #20
 800bda0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bda4:	e853 3f00 	ldrex	r3, [r3]
 800bda8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bdaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3314      	adds	r3, #20
 800bdba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bdbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bdc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bdc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bdc6:	e841 2300 	strex	r3, r2, [r1]
 800bdca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bdcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1e3      	bne.n	800bd9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2220      	movs	r2, #32
 800bdd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	330c      	adds	r3, #12
 800bde6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdea:	e853 3f00 	ldrex	r3, [r3]
 800bdee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bdf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdf2:	f023 0310 	bic.w	r3, r3, #16
 800bdf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	330c      	adds	r3, #12
 800be00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800be04:	65ba      	str	r2, [r7, #88]	@ 0x58
 800be06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800be0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be0c:	e841 2300 	strex	r3, r2, [r1]
 800be10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800be12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1e3      	bne.n	800bde0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fc f906 	bl	800802e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	b29b      	uxth	r3, r3
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 f8b6 	bl	800bfa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be38:	e099      	b.n	800bf6e <HAL_UART_IRQHandler+0x50e>
 800be3a:	bf00      	nop
 800be3c:	0800c1db 	.word	0x0800c1db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be48:	b29b      	uxth	r3, r3
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be54:	b29b      	uxth	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	f000 808b 	beq.w	800bf72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800be5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be60:	2b00      	cmp	r3, #0
 800be62:	f000 8086 	beq.w	800bf72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	330c      	adds	r3, #12
 800be6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be70:	e853 3f00 	ldrex	r3, [r3]
 800be74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	330c      	adds	r3, #12
 800be86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800be8a:	647a      	str	r2, [r7, #68]	@ 0x44
 800be8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be92:	e841 2300 	strex	r3, r2, [r1]
 800be96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1e3      	bne.n	800be66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	3314      	adds	r3, #20
 800bea4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea8:	e853 3f00 	ldrex	r3, [r3]
 800beac:	623b      	str	r3, [r7, #32]
   return(result);
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	f023 0301 	bic.w	r3, r3, #1
 800beb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3314      	adds	r3, #20
 800bebe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bec2:	633a      	str	r2, [r7, #48]	@ 0x30
 800bec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beca:	e841 2300 	strex	r3, r2, [r1]
 800bece:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1e3      	bne.n	800be9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2220      	movs	r2, #32
 800beda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	330c      	adds	r3, #12
 800beea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	e853 3f00 	ldrex	r3, [r3]
 800bef2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f023 0310 	bic.w	r3, r3, #16
 800befa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	330c      	adds	r3, #12
 800bf04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800bf08:	61fa      	str	r2, [r7, #28]
 800bf0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0c:	69b9      	ldr	r1, [r7, #24]
 800bf0e:	69fa      	ldr	r2, [r7, #28]
 800bf10:	e841 2300 	strex	r3, r2, [r1]
 800bf14:	617b      	str	r3, [r7, #20]
   return(result);
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1e3      	bne.n	800bee4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f83e 	bl	800bfa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bf28:	e023      	b.n	800bf72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bf2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d009      	beq.n	800bf4a <HAL_UART_IRQHandler+0x4ea>
 800bf36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f95d 	bl	800c202 <UART_Transmit_IT>
    return;
 800bf48:	e014      	b.n	800bf74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00e      	beq.n	800bf74 <HAL_UART_IRQHandler+0x514>
 800bf56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d008      	beq.n	800bf74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 f99d 	bl	800c2a2 <UART_EndTransmit_IT>
    return;
 800bf68:	e004      	b.n	800bf74 <HAL_UART_IRQHandler+0x514>
    return;
 800bf6a:	bf00      	nop
 800bf6c:	e002      	b.n	800bf74 <HAL_UART_IRQHandler+0x514>
      return;
 800bf6e:	bf00      	nop
 800bf70:	e000      	b.n	800bf74 <HAL_UART_IRQHandler+0x514>
      return;
 800bf72:	bf00      	nop
  }
}
 800bf74:	37e8      	adds	r7, #232	@ 0xe8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop

0800bf7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf84:	bf00      	nop
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf98:	bf00      	nop
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b090      	sub	sp, #64	@ 0x40
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	603b      	str	r3, [r7, #0]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfcc:	e050      	b.n	800c070 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfd4:	d04c      	beq.n	800c070 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bfd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d007      	beq.n	800bfec <UART_WaitOnFlagUntilTimeout+0x30>
 800bfdc:	f7fb f9ae 	bl	800733c <HAL_GetTick>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	1ad3      	subs	r3, r2, r3
 800bfe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d241      	bcs.n	800c070 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	330c      	adds	r3, #12
 800bff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff6:	e853 3f00 	ldrex	r3, [r3]
 800bffa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800c002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	330c      	adds	r3, #12
 800c00a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c00c:	637a      	str	r2, [r7, #52]	@ 0x34
 800c00e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c010:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c012:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c014:	e841 2300 	strex	r3, r2, [r1]
 800c018:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1e5      	bne.n	800bfec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	3314      	adds	r3, #20
 800c026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	e853 3f00 	ldrex	r3, [r3]
 800c02e:	613b      	str	r3, [r7, #16]
   return(result);
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	f023 0301 	bic.w	r3, r3, #1
 800c036:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	3314      	adds	r3, #20
 800c03e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c040:	623a      	str	r2, [r7, #32]
 800c042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c044:	69f9      	ldr	r1, [r7, #28]
 800c046:	6a3a      	ldr	r2, [r7, #32]
 800c048:	e841 2300 	strex	r3, r2, [r1]
 800c04c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1e5      	bne.n	800c020 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2220      	movs	r2, #32
 800c058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2220      	movs	r2, #32
 800c060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800c06c:	2303      	movs	r3, #3
 800c06e:	e00f      	b.n	800c090 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	4013      	ands	r3, r2
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	bf0c      	ite	eq
 800c080:	2301      	moveq	r3, #1
 800c082:	2300      	movne	r3, #0
 800c084:	b2db      	uxtb	r3, r3
 800c086:	461a      	mov	r2, r3
 800c088:	79fb      	ldrb	r3, [r7, #7]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d09f      	beq.n	800bfce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3740      	adds	r7, #64	@ 0x40
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	68ba      	ldr	r2, [r7, #8]
 800c0aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	88fa      	ldrh	r2, [r7, #6]
 800c0b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	88fa      	ldrh	r2, [r7, #6]
 800c0b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2222      	movs	r2, #34	@ 0x22
 800c0c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	691b      	ldr	r3, [r3, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d007      	beq.n	800c0e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68da      	ldr	r2, [r3, #12]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c0e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	695a      	ldr	r2, [r3, #20]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f042 0201 	orr.w	r2, r2, #1
 800c0f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68da      	ldr	r2, [r3, #12]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f042 0220 	orr.w	r2, r2, #32
 800c104:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c114:	b480      	push	{r7}
 800c116:	b095      	sub	sp, #84	@ 0x54
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	330c      	adds	r3, #12
 800c122:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c126:	e853 3f00 	ldrex	r3, [r3]
 800c12a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c12e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	330c      	adds	r3, #12
 800c13a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c13c:	643a      	str	r2, [r7, #64]	@ 0x40
 800c13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c140:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c144:	e841 2300 	strex	r3, r2, [r1]
 800c148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1e5      	bne.n	800c11c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	3314      	adds	r3, #20
 800c156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c158:	6a3b      	ldr	r3, [r7, #32]
 800c15a:	e853 3f00 	ldrex	r3, [r3]
 800c15e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	f023 0301 	bic.w	r3, r3, #1
 800c166:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3314      	adds	r3, #20
 800c16e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c170:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c172:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c174:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c178:	e841 2300 	strex	r3, r2, [r1]
 800c17c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e5      	bne.n	800c150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d119      	bne.n	800c1c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	330c      	adds	r3, #12
 800c192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	e853 3f00 	ldrex	r3, [r3]
 800c19a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	f023 0310 	bic.w	r3, r3, #16
 800c1a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	330c      	adds	r3, #12
 800c1aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1ac:	61ba      	str	r2, [r7, #24]
 800c1ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b0:	6979      	ldr	r1, [r7, #20]
 800c1b2:	69ba      	ldr	r2, [r7, #24]
 800c1b4:	e841 2300 	strex	r3, r2, [r1]
 800c1b8:	613b      	str	r3, [r7, #16]
   return(result);
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1e5      	bne.n	800c18c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2220      	movs	r2, #32
 800c1c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c1ce:	bf00      	nop
 800c1d0:	3754      	adds	r7, #84	@ 0x54
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f7ff fecb 	bl	800bf90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1fa:	bf00      	nop
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c202:	b480      	push	{r7}
 800c204:	b085      	sub	sp, #20
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b21      	cmp	r3, #33	@ 0x21
 800c214:	d13e      	bne.n	800c294 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c21e:	d114      	bne.n	800c24a <UART_Transmit_IT+0x48>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d110      	bne.n	800c24a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a1b      	ldr	r3, [r3, #32]
 800c22c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	461a      	mov	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c23c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	1c9a      	adds	r2, r3, #2
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	621a      	str	r2, [r3, #32]
 800c248:	e008      	b.n	800c25c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a1b      	ldr	r3, [r3, #32]
 800c24e:	1c59      	adds	r1, r3, #1
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	6211      	str	r1, [r2, #32]
 800c254:	781a      	ldrb	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c260:	b29b      	uxth	r3, r3
 800c262:	3b01      	subs	r3, #1
 800c264:	b29b      	uxth	r3, r3
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	4619      	mov	r1, r3
 800c26a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10f      	bne.n	800c290 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	68da      	ldr	r2, [r3, #12]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c27e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68da      	ldr	r2, [r3, #12]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c28e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	e000      	b.n	800c296 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c294:	2302      	movs	r3, #2
  }
}
 800c296:	4618      	mov	r0, r3
 800c298:	3714      	adds	r7, #20
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b082      	sub	sp, #8
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68da      	ldr	r2, [r3, #12]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c2b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2220      	movs	r2, #32
 800c2be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7ff fe5a 	bl	800bf7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b08c      	sub	sp, #48	@ 0x30
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2b22      	cmp	r3, #34	@ 0x22
 800c2e4:	f040 80ab 	bne.w	800c43e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2f0:	d117      	bne.n	800c322 <UART_Receive_IT+0x50>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d113      	bne.n	800c322 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c302:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c310:	b29a      	uxth	r2, r3
 800c312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c314:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c31a:	1c9a      	adds	r2, r3, #2
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	629a      	str	r2, [r3, #40]	@ 0x28
 800c320:	e026      	b.n	800c370 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c326:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c328:	2300      	movs	r3, #0
 800c32a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c334:	d007      	beq.n	800c346 <UART_Receive_IT+0x74>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10a      	bne.n	800c354 <UART_Receive_IT+0x82>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	691b      	ldr	r3, [r3, #16]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d106      	bne.n	800c354 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c350:	701a      	strb	r2, [r3, #0]
 800c352:	e008      	b.n	800c366 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c360:	b2da      	uxtb	r2, r3
 800c362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c364:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c36a:	1c5a      	adds	r2, r3, #1
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c374:	b29b      	uxth	r3, r3
 800c376:	3b01      	subs	r3, #1
 800c378:	b29b      	uxth	r3, r3
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	4619      	mov	r1, r3
 800c37e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c380:	2b00      	cmp	r3, #0
 800c382:	d15a      	bne.n	800c43a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68da      	ldr	r2, [r3, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f022 0220 	bic.w	r2, r2, #32
 800c392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68da      	ldr	r2, [r3, #12]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c3a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	695a      	ldr	r2, [r3, #20]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f022 0201 	bic.w	r2, r2, #1
 800c3b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2220      	movs	r2, #32
 800c3b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d135      	bne.n	800c430 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	330c      	adds	r3, #12
 800c3d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	e853 3f00 	ldrex	r3, [r3]
 800c3d8:	613b      	str	r3, [r7, #16]
   return(result);
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	f023 0310 	bic.w	r3, r3, #16
 800c3e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	330c      	adds	r3, #12
 800c3e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3ea:	623a      	str	r2, [r7, #32]
 800c3ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ee:	69f9      	ldr	r1, [r7, #28]
 800c3f0:	6a3a      	ldr	r2, [r7, #32]
 800c3f2:	e841 2300 	strex	r3, r2, [r1]
 800c3f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1e5      	bne.n	800c3ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 0310 	and.w	r3, r3, #16
 800c408:	2b10      	cmp	r3, #16
 800c40a:	d10a      	bne.n	800c422 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c40c:	2300      	movs	r3, #0
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	60fb      	str	r3, [r7, #12]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c426:	4619      	mov	r1, r3
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff fdbb 	bl	800bfa4 <HAL_UARTEx_RxEventCallback>
 800c42e:	e002      	b.n	800c436 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7f5 fc81 	bl	8001d38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	e002      	b.n	800c440 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	e000      	b.n	800c440 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c43e:	2302      	movs	r3, #2
  }
}
 800c440:	4618      	mov	r0, r3
 800c442:	3730      	adds	r7, #48	@ 0x30
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c44c:	b0c0      	sub	sp, #256	@ 0x100
 800c44e:	af00      	add	r7, sp, #0
 800c450:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c464:	68d9      	ldr	r1, [r3, #12]
 800c466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	ea40 0301 	orr.w	r3, r0, r1
 800c470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c476:	689a      	ldr	r2, [r3, #8]
 800c478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	431a      	orrs	r2, r3
 800c480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	431a      	orrs	r2, r3
 800c488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c48c:	69db      	ldr	r3, [r3, #28]
 800c48e:	4313      	orrs	r3, r2
 800c490:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c4a0:	f021 010c 	bic.w	r1, r1, #12
 800c4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c4ae:	430b      	orrs	r3, r1
 800c4b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c4b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c4be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4c2:	6999      	ldr	r1, [r3, #24]
 800c4c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	ea40 0301 	orr.w	r3, r0, r1
 800c4ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c4d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	4b8f      	ldr	r3, [pc, #572]	@ (800c714 <UART_SetConfig+0x2cc>)
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d005      	beq.n	800c4e8 <UART_SetConfig+0xa0>
 800c4dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	4b8d      	ldr	r3, [pc, #564]	@ (800c718 <UART_SetConfig+0x2d0>)
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d104      	bne.n	800c4f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c4e8:	f7fd fc16 	bl	8009d18 <HAL_RCC_GetPCLK2Freq>
 800c4ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c4f0:	e003      	b.n	800c4fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c4f2:	f7fd fbfd 	bl	8009cf0 <HAL_RCC_GetPCLK1Freq>
 800c4f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c504:	f040 810c 	bne.w	800c720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c50c:	2200      	movs	r2, #0
 800c50e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c512:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c51a:	4622      	mov	r2, r4
 800c51c:	462b      	mov	r3, r5
 800c51e:	1891      	adds	r1, r2, r2
 800c520:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c522:	415b      	adcs	r3, r3
 800c524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c52a:	4621      	mov	r1, r4
 800c52c:	eb12 0801 	adds.w	r8, r2, r1
 800c530:	4629      	mov	r1, r5
 800c532:	eb43 0901 	adc.w	r9, r3, r1
 800c536:	f04f 0200 	mov.w	r2, #0
 800c53a:	f04f 0300 	mov.w	r3, #0
 800c53e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c54a:	4690      	mov	r8, r2
 800c54c:	4699      	mov	r9, r3
 800c54e:	4623      	mov	r3, r4
 800c550:	eb18 0303 	adds.w	r3, r8, r3
 800c554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c558:	462b      	mov	r3, r5
 800c55a:	eb49 0303 	adc.w	r3, r9, r3
 800c55e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c56e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c576:	460b      	mov	r3, r1
 800c578:	18db      	adds	r3, r3, r3
 800c57a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c57c:	4613      	mov	r3, r2
 800c57e:	eb42 0303 	adc.w	r3, r2, r3
 800c582:	657b      	str	r3, [r7, #84]	@ 0x54
 800c584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c58c:	f7f4 fb7c 	bl	8000c88 <__aeabi_uldivmod>
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	4b61      	ldr	r3, [pc, #388]	@ (800c71c <UART_SetConfig+0x2d4>)
 800c596:	fba3 2302 	umull	r2, r3, r3, r2
 800c59a:	095b      	lsrs	r3, r3, #5
 800c59c:	011c      	lsls	r4, r3, #4
 800c59e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c5a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c5ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c5b0:	4642      	mov	r2, r8
 800c5b2:	464b      	mov	r3, r9
 800c5b4:	1891      	adds	r1, r2, r2
 800c5b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c5b8:	415b      	adcs	r3, r3
 800c5ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c5c0:	4641      	mov	r1, r8
 800c5c2:	eb12 0a01 	adds.w	sl, r2, r1
 800c5c6:	4649      	mov	r1, r9
 800c5c8:	eb43 0b01 	adc.w	fp, r3, r1
 800c5cc:	f04f 0200 	mov.w	r2, #0
 800c5d0:	f04f 0300 	mov.w	r3, #0
 800c5d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c5d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c5dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c5e0:	4692      	mov	sl, r2
 800c5e2:	469b      	mov	fp, r3
 800c5e4:	4643      	mov	r3, r8
 800c5e6:	eb1a 0303 	adds.w	r3, sl, r3
 800c5ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c5ee:	464b      	mov	r3, r9
 800c5f0:	eb4b 0303 	adc.w	r3, fp, r3
 800c5f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c604:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c60c:	460b      	mov	r3, r1
 800c60e:	18db      	adds	r3, r3, r3
 800c610:	643b      	str	r3, [r7, #64]	@ 0x40
 800c612:	4613      	mov	r3, r2
 800c614:	eb42 0303 	adc.w	r3, r2, r3
 800c618:	647b      	str	r3, [r7, #68]	@ 0x44
 800c61a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c61e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c622:	f7f4 fb31 	bl	8000c88 <__aeabi_uldivmod>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	4611      	mov	r1, r2
 800c62c:	4b3b      	ldr	r3, [pc, #236]	@ (800c71c <UART_SetConfig+0x2d4>)
 800c62e:	fba3 2301 	umull	r2, r3, r3, r1
 800c632:	095b      	lsrs	r3, r3, #5
 800c634:	2264      	movs	r2, #100	@ 0x64
 800c636:	fb02 f303 	mul.w	r3, r2, r3
 800c63a:	1acb      	subs	r3, r1, r3
 800c63c:	00db      	lsls	r3, r3, #3
 800c63e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c642:	4b36      	ldr	r3, [pc, #216]	@ (800c71c <UART_SetConfig+0x2d4>)
 800c644:	fba3 2302 	umull	r2, r3, r3, r2
 800c648:	095b      	lsrs	r3, r3, #5
 800c64a:	005b      	lsls	r3, r3, #1
 800c64c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c650:	441c      	add	r4, r3
 800c652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c656:	2200      	movs	r2, #0
 800c658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c65c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c664:	4642      	mov	r2, r8
 800c666:	464b      	mov	r3, r9
 800c668:	1891      	adds	r1, r2, r2
 800c66a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c66c:	415b      	adcs	r3, r3
 800c66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c674:	4641      	mov	r1, r8
 800c676:	1851      	adds	r1, r2, r1
 800c678:	6339      	str	r1, [r7, #48]	@ 0x30
 800c67a:	4649      	mov	r1, r9
 800c67c:	414b      	adcs	r3, r1
 800c67e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c680:	f04f 0200 	mov.w	r2, #0
 800c684:	f04f 0300 	mov.w	r3, #0
 800c688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c68c:	4659      	mov	r1, fp
 800c68e:	00cb      	lsls	r3, r1, #3
 800c690:	4651      	mov	r1, sl
 800c692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c696:	4651      	mov	r1, sl
 800c698:	00ca      	lsls	r2, r1, #3
 800c69a:	4610      	mov	r0, r2
 800c69c:	4619      	mov	r1, r3
 800c69e:	4603      	mov	r3, r0
 800c6a0:	4642      	mov	r2, r8
 800c6a2:	189b      	adds	r3, r3, r2
 800c6a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c6a8:	464b      	mov	r3, r9
 800c6aa:	460a      	mov	r2, r1
 800c6ac:	eb42 0303 	adc.w	r3, r2, r3
 800c6b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c6c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c6c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	18db      	adds	r3, r3, r3
 800c6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	eb42 0303 	adc.w	r3, r2, r3
 800c6d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c6da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c6de:	f7f4 fad3 	bl	8000c88 <__aeabi_uldivmod>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c71c <UART_SetConfig+0x2d4>)
 800c6e8:	fba3 1302 	umull	r1, r3, r3, r2
 800c6ec:	095b      	lsrs	r3, r3, #5
 800c6ee:	2164      	movs	r1, #100	@ 0x64
 800c6f0:	fb01 f303 	mul.w	r3, r1, r3
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	00db      	lsls	r3, r3, #3
 800c6f8:	3332      	adds	r3, #50	@ 0x32
 800c6fa:	4a08      	ldr	r2, [pc, #32]	@ (800c71c <UART_SetConfig+0x2d4>)
 800c6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c700:	095b      	lsrs	r3, r3, #5
 800c702:	f003 0207 	and.w	r2, r3, #7
 800c706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4422      	add	r2, r4
 800c70e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c710:	e106      	b.n	800c920 <UART_SetConfig+0x4d8>
 800c712:	bf00      	nop
 800c714:	40011000 	.word	0x40011000
 800c718:	40011400 	.word	0x40011400
 800c71c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c724:	2200      	movs	r2, #0
 800c726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c72a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c72e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c732:	4642      	mov	r2, r8
 800c734:	464b      	mov	r3, r9
 800c736:	1891      	adds	r1, r2, r2
 800c738:	6239      	str	r1, [r7, #32]
 800c73a:	415b      	adcs	r3, r3
 800c73c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c73e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c742:	4641      	mov	r1, r8
 800c744:	1854      	adds	r4, r2, r1
 800c746:	4649      	mov	r1, r9
 800c748:	eb43 0501 	adc.w	r5, r3, r1
 800c74c:	f04f 0200 	mov.w	r2, #0
 800c750:	f04f 0300 	mov.w	r3, #0
 800c754:	00eb      	lsls	r3, r5, #3
 800c756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c75a:	00e2      	lsls	r2, r4, #3
 800c75c:	4614      	mov	r4, r2
 800c75e:	461d      	mov	r5, r3
 800c760:	4643      	mov	r3, r8
 800c762:	18e3      	adds	r3, r4, r3
 800c764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c768:	464b      	mov	r3, r9
 800c76a:	eb45 0303 	adc.w	r3, r5, r3
 800c76e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c77e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c782:	f04f 0200 	mov.w	r2, #0
 800c786:	f04f 0300 	mov.w	r3, #0
 800c78a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c78e:	4629      	mov	r1, r5
 800c790:	008b      	lsls	r3, r1, #2
 800c792:	4621      	mov	r1, r4
 800c794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c798:	4621      	mov	r1, r4
 800c79a:	008a      	lsls	r2, r1, #2
 800c79c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c7a0:	f7f4 fa72 	bl	8000c88 <__aeabi_uldivmod>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4b60      	ldr	r3, [pc, #384]	@ (800c92c <UART_SetConfig+0x4e4>)
 800c7aa:	fba3 2302 	umull	r2, r3, r3, r2
 800c7ae:	095b      	lsrs	r3, r3, #5
 800c7b0:	011c      	lsls	r4, r3, #4
 800c7b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c7bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c7c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c7c4:	4642      	mov	r2, r8
 800c7c6:	464b      	mov	r3, r9
 800c7c8:	1891      	adds	r1, r2, r2
 800c7ca:	61b9      	str	r1, [r7, #24]
 800c7cc:	415b      	adcs	r3, r3
 800c7ce:	61fb      	str	r3, [r7, #28]
 800c7d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7d4:	4641      	mov	r1, r8
 800c7d6:	1851      	adds	r1, r2, r1
 800c7d8:	6139      	str	r1, [r7, #16]
 800c7da:	4649      	mov	r1, r9
 800c7dc:	414b      	adcs	r3, r1
 800c7de:	617b      	str	r3, [r7, #20]
 800c7e0:	f04f 0200 	mov.w	r2, #0
 800c7e4:	f04f 0300 	mov.w	r3, #0
 800c7e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c7ec:	4659      	mov	r1, fp
 800c7ee:	00cb      	lsls	r3, r1, #3
 800c7f0:	4651      	mov	r1, sl
 800c7f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c7f6:	4651      	mov	r1, sl
 800c7f8:	00ca      	lsls	r2, r1, #3
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	4603      	mov	r3, r0
 800c800:	4642      	mov	r2, r8
 800c802:	189b      	adds	r3, r3, r2
 800c804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c808:	464b      	mov	r3, r9
 800c80a:	460a      	mov	r2, r1
 800c80c:	eb42 0303 	adc.w	r3, r2, r3
 800c810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c81e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c820:	f04f 0200 	mov.w	r2, #0
 800c824:	f04f 0300 	mov.w	r3, #0
 800c828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c82c:	4649      	mov	r1, r9
 800c82e:	008b      	lsls	r3, r1, #2
 800c830:	4641      	mov	r1, r8
 800c832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c836:	4641      	mov	r1, r8
 800c838:	008a      	lsls	r2, r1, #2
 800c83a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c83e:	f7f4 fa23 	bl	8000c88 <__aeabi_uldivmod>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4611      	mov	r1, r2
 800c848:	4b38      	ldr	r3, [pc, #224]	@ (800c92c <UART_SetConfig+0x4e4>)
 800c84a:	fba3 2301 	umull	r2, r3, r3, r1
 800c84e:	095b      	lsrs	r3, r3, #5
 800c850:	2264      	movs	r2, #100	@ 0x64
 800c852:	fb02 f303 	mul.w	r3, r2, r3
 800c856:	1acb      	subs	r3, r1, r3
 800c858:	011b      	lsls	r3, r3, #4
 800c85a:	3332      	adds	r3, #50	@ 0x32
 800c85c:	4a33      	ldr	r2, [pc, #204]	@ (800c92c <UART_SetConfig+0x4e4>)
 800c85e:	fba2 2303 	umull	r2, r3, r2, r3
 800c862:	095b      	lsrs	r3, r3, #5
 800c864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c868:	441c      	add	r4, r3
 800c86a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c86e:	2200      	movs	r2, #0
 800c870:	673b      	str	r3, [r7, #112]	@ 0x70
 800c872:	677a      	str	r2, [r7, #116]	@ 0x74
 800c874:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c878:	4642      	mov	r2, r8
 800c87a:	464b      	mov	r3, r9
 800c87c:	1891      	adds	r1, r2, r2
 800c87e:	60b9      	str	r1, [r7, #8]
 800c880:	415b      	adcs	r3, r3
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c888:	4641      	mov	r1, r8
 800c88a:	1851      	adds	r1, r2, r1
 800c88c:	6039      	str	r1, [r7, #0]
 800c88e:	4649      	mov	r1, r9
 800c890:	414b      	adcs	r3, r1
 800c892:	607b      	str	r3, [r7, #4]
 800c894:	f04f 0200 	mov.w	r2, #0
 800c898:	f04f 0300 	mov.w	r3, #0
 800c89c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c8a0:	4659      	mov	r1, fp
 800c8a2:	00cb      	lsls	r3, r1, #3
 800c8a4:	4651      	mov	r1, sl
 800c8a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c8aa:	4651      	mov	r1, sl
 800c8ac:	00ca      	lsls	r2, r1, #3
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	4642      	mov	r2, r8
 800c8b6:	189b      	adds	r3, r3, r2
 800c8b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c8ba:	464b      	mov	r3, r9
 800c8bc:	460a      	mov	r2, r1
 800c8be:	eb42 0303 	adc.w	r3, r2, r3
 800c8c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800c8ce:	667a      	str	r2, [r7, #100]	@ 0x64
 800c8d0:	f04f 0200 	mov.w	r2, #0
 800c8d4:	f04f 0300 	mov.w	r3, #0
 800c8d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c8dc:	4649      	mov	r1, r9
 800c8de:	008b      	lsls	r3, r1, #2
 800c8e0:	4641      	mov	r1, r8
 800c8e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c8e6:	4641      	mov	r1, r8
 800c8e8:	008a      	lsls	r2, r1, #2
 800c8ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c8ee:	f7f4 f9cb 	bl	8000c88 <__aeabi_uldivmod>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c92c <UART_SetConfig+0x4e4>)
 800c8f8:	fba3 1302 	umull	r1, r3, r3, r2
 800c8fc:	095b      	lsrs	r3, r3, #5
 800c8fe:	2164      	movs	r1, #100	@ 0x64
 800c900:	fb01 f303 	mul.w	r3, r1, r3
 800c904:	1ad3      	subs	r3, r2, r3
 800c906:	011b      	lsls	r3, r3, #4
 800c908:	3332      	adds	r3, #50	@ 0x32
 800c90a:	4a08      	ldr	r2, [pc, #32]	@ (800c92c <UART_SetConfig+0x4e4>)
 800c90c:	fba2 2303 	umull	r2, r3, r2, r3
 800c910:	095b      	lsrs	r3, r3, #5
 800c912:	f003 020f 	and.w	r2, r3, #15
 800c916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4422      	add	r2, r4
 800c91e:	609a      	str	r2, [r3, #8]
}
 800c920:	bf00      	nop
 800c922:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c926:	46bd      	mov	sp, r7
 800c928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c92c:	51eb851f 	.word	0x51eb851f

0800c930 <__NVIC_SetPriority>:
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	4603      	mov	r3, r0
 800c938:	6039      	str	r1, [r7, #0]
 800c93a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c93c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c940:	2b00      	cmp	r3, #0
 800c942:	db0a      	blt.n	800c95a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	b2da      	uxtb	r2, r3
 800c948:	490c      	ldr	r1, [pc, #48]	@ (800c97c <__NVIC_SetPriority+0x4c>)
 800c94a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c94e:	0112      	lsls	r2, r2, #4
 800c950:	b2d2      	uxtb	r2, r2
 800c952:	440b      	add	r3, r1
 800c954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c958:	e00a      	b.n	800c970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	4908      	ldr	r1, [pc, #32]	@ (800c980 <__NVIC_SetPriority+0x50>)
 800c960:	79fb      	ldrb	r3, [r7, #7]
 800c962:	f003 030f 	and.w	r3, r3, #15
 800c966:	3b04      	subs	r3, #4
 800c968:	0112      	lsls	r2, r2, #4
 800c96a:	b2d2      	uxtb	r2, r2
 800c96c:	440b      	add	r3, r1
 800c96e:	761a      	strb	r2, [r3, #24]
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr
 800c97c:	e000e100 	.word	0xe000e100
 800c980:	e000ed00 	.word	0xe000ed00

0800c984 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c984:	b580      	push	{r7, lr}
 800c986:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c988:	2100      	movs	r1, #0
 800c98a:	f06f 0004 	mvn.w	r0, #4
 800c98e:	f7ff ffcf 	bl	800c930 <__NVIC_SetPriority>
#endif
}
 800c992:	bf00      	nop
 800c994:	bd80      	pop	{r7, pc}
	...

0800c998 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c99e:	f3ef 8305 	mrs	r3, IPSR
 800c9a2:	603b      	str	r3, [r7, #0]
  return(result);
 800c9a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d003      	beq.n	800c9b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c9aa:	f06f 0305 	mvn.w	r3, #5
 800c9ae:	607b      	str	r3, [r7, #4]
 800c9b0:	e00c      	b.n	800c9cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c9b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9dc <osKernelInitialize+0x44>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d105      	bne.n	800c9c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c9ba:	4b08      	ldr	r3, [pc, #32]	@ (800c9dc <osKernelInitialize+0x44>)
 800c9bc:	2201      	movs	r2, #1
 800c9be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	607b      	str	r3, [r7, #4]
 800c9c4:	e002      	b.n	800c9cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c9c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c9cc:	687b      	ldr	r3, [r7, #4]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	370c      	adds	r7, #12
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	20000b68 	.word	0x20000b68

0800c9e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9e6:	f3ef 8305 	mrs	r3, IPSR
 800c9ea:	603b      	str	r3, [r7, #0]
  return(result);
 800c9ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d003      	beq.n	800c9fa <osKernelStart+0x1a>
    stat = osErrorISR;
 800c9f2:	f06f 0305 	mvn.w	r3, #5
 800c9f6:	607b      	str	r3, [r7, #4]
 800c9f8:	e010      	b.n	800ca1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c9fa:	4b0b      	ldr	r3, [pc, #44]	@ (800ca28 <osKernelStart+0x48>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d109      	bne.n	800ca16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ca02:	f7ff ffbf 	bl	800c984 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ca06:	4b08      	ldr	r3, [pc, #32]	@ (800ca28 <osKernelStart+0x48>)
 800ca08:	2202      	movs	r2, #2
 800ca0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ca0c:	f001 f8f0 	bl	800dbf0 <vTaskStartScheduler>
      stat = osOK;
 800ca10:	2300      	movs	r3, #0
 800ca12:	607b      	str	r3, [r7, #4]
 800ca14:	e002      	b.n	800ca1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ca16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ca1c:	687b      	ldr	r3, [r7, #4]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	20000b68 	.word	0x20000b68

0800ca2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08e      	sub	sp, #56	@ 0x38
 800ca30:	af04      	add	r7, sp, #16
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca3c:	f3ef 8305 	mrs	r3, IPSR
 800ca40:	617b      	str	r3, [r7, #20]
  return(result);
 800ca42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d17e      	bne.n	800cb46 <osThreadNew+0x11a>
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d07b      	beq.n	800cb46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ca4e:	2380      	movs	r3, #128	@ 0x80
 800ca50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ca52:	2318      	movs	r3, #24
 800ca54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ca56:	2300      	movs	r3, #0
 800ca58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ca5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d045      	beq.n	800caf2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d002      	beq.n	800ca74 <osThreadNew+0x48>
        name = attr->name;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	699b      	ldr	r3, [r3, #24]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d002      	beq.n	800ca82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	699b      	ldr	r3, [r3, #24]
 800ca80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d008      	beq.n	800ca9a <osThreadNew+0x6e>
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	2b38      	cmp	r3, #56	@ 0x38
 800ca8c:	d805      	bhi.n	800ca9a <osThreadNew+0x6e>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	f003 0301 	and.w	r3, r3, #1
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <osThreadNew+0x72>
        return (NULL);
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	e054      	b.n	800cb48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	695b      	ldr	r3, [r3, #20]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d003      	beq.n	800caae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	695b      	ldr	r3, [r3, #20]
 800caaa:	089b      	lsrs	r3, r3, #2
 800caac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00e      	beq.n	800cad4 <osThreadNew+0xa8>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	2b5b      	cmp	r3, #91	@ 0x5b
 800cabc:	d90a      	bls.n	800cad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d006      	beq.n	800cad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	695b      	ldr	r3, [r3, #20]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d002      	beq.n	800cad4 <osThreadNew+0xa8>
        mem = 1;
 800cace:	2301      	movs	r3, #1
 800cad0:	61bb      	str	r3, [r7, #24]
 800cad2:	e010      	b.n	800caf6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d10c      	bne.n	800caf6 <osThreadNew+0xca>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d108      	bne.n	800caf6 <osThreadNew+0xca>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	691b      	ldr	r3, [r3, #16]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d104      	bne.n	800caf6 <osThreadNew+0xca>
          mem = 0;
 800caec:	2300      	movs	r3, #0
 800caee:	61bb      	str	r3, [r7, #24]
 800caf0:	e001      	b.n	800caf6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d110      	bne.n	800cb1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cb04:	9202      	str	r2, [sp, #8]
 800cb06:	9301      	str	r3, [sp, #4]
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	6a3a      	ldr	r2, [r7, #32]
 800cb10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f000 fe1a 	bl	800d74c <xTaskCreateStatic>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	613b      	str	r3, [r7, #16]
 800cb1c:	e013      	b.n	800cb46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d110      	bne.n	800cb46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	b29a      	uxth	r2, r3
 800cb28:	f107 0310 	add.w	r3, r7, #16
 800cb2c:	9301      	str	r3, [sp, #4]
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f000 fe68 	bl	800d80c <xTaskCreate>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d001      	beq.n	800cb46 <osThreadNew+0x11a>
            hTask = NULL;
 800cb42:	2300      	movs	r3, #0
 800cb44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cb46:	693b      	ldr	r3, [r7, #16]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3728      	adds	r7, #40	@ 0x28
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb58:	f3ef 8305 	mrs	r3, IPSR
 800cb5c:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d003      	beq.n	800cb6c <osDelay+0x1c>
    stat = osErrorISR;
 800cb64:	f06f 0305 	mvn.w	r3, #5
 800cb68:	60fb      	str	r3, [r7, #12]
 800cb6a:	e007      	b.n	800cb7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d002      	beq.n	800cb7c <osDelay+0x2c>
      vTaskDelay(ticks);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 ff8e 	bl	800da98 <vTaskDelay>
    }
  }

  return (stat);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
	...

0800cb88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	4a07      	ldr	r2, [pc, #28]	@ (800cbb4 <vApplicationGetIdleTaskMemory+0x2c>)
 800cb98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	4a06      	ldr	r2, [pc, #24]	@ (800cbb8 <vApplicationGetIdleTaskMemory+0x30>)
 800cb9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2280      	movs	r2, #128	@ 0x80
 800cba4:	601a      	str	r2, [r3, #0]
}
 800cba6:	bf00      	nop
 800cba8:	3714      	adds	r7, #20
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	20000b6c 	.word	0x20000b6c
 800cbb8:	20000bc8 	.word	0x20000bc8

0800cbbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	4a07      	ldr	r2, [pc, #28]	@ (800cbe8 <vApplicationGetTimerTaskMemory+0x2c>)
 800cbcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	4a06      	ldr	r2, [pc, #24]	@ (800cbec <vApplicationGetTimerTaskMemory+0x30>)
 800cbd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cbda:	601a      	str	r2, [r3, #0]
}
 800cbdc:	bf00      	nop
 800cbde:	3714      	adds	r7, #20
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	20000dc8 	.word	0x20000dc8
 800cbec:	20000e24 	.word	0x20000e24

0800cbf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f103 0208 	add.w	r2, r3, #8
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f103 0208 	add.w	r2, r3, #8
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f103 0208 	add.w	r2, r3, #8
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cc3e:	bf00      	nop
 800cc40:	370c      	adds	r7, #12
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b085      	sub	sp, #20
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	689a      	ldr	r2, [r3, #8]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	683a      	ldr	r2, [r7, #0]
 800cc6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	683a      	ldr	r2, [r7, #0]
 800cc74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	1c5a      	adds	r2, r3, #1
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	601a      	str	r2, [r3, #0]
}
 800cc86:	bf00      	nop
 800cc88:	3714      	adds	r7, #20
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr

0800cc92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc92:	b480      	push	{r7}
 800cc94:	b085      	sub	sp, #20
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
 800cc9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cca8:	d103      	bne.n	800ccb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	e00c      	b.n	800cccc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	60fb      	str	r3, [r7, #12]
 800ccb8:	e002      	b.n	800ccc0 <vListInsert+0x2e>
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	60fb      	str	r3, [r7, #12]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d2f6      	bcs.n	800ccba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	685a      	ldr	r2, [r3, #4]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	683a      	ldr	r2, [r7, #0]
 800ccda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	683a      	ldr	r2, [r7, #0]
 800cce6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	1c5a      	adds	r2, r3, #1
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	601a      	str	r2, [r3, #0]
}
 800ccf8:	bf00      	nop
 800ccfa:	3714      	adds	r7, #20
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	6892      	ldr	r2, [r2, #8]
 800cd1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	6852      	ldr	r2, [r2, #4]
 800cd24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d103      	bne.n	800cd38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	689a      	ldr	r2, [r3, #8]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	1e5a      	subs	r2, r3, #1
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3714      	adds	r7, #20
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10b      	bne.n	800cd84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cd6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd70:	f383 8811 	msr	BASEPRI, r3
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cd7e:	bf00      	nop
 800cd80:	bf00      	nop
 800cd82:	e7fd      	b.n	800cd80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cd84:	f002 f8f0 	bl	800ef68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd90:	68f9      	ldr	r1, [r7, #12]
 800cd92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cd94:	fb01 f303 	mul.w	r3, r1, r3
 800cd98:	441a      	add	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	68f9      	ldr	r1, [r7, #12]
 800cdb8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cdba:	fb01 f303 	mul.w	r3, r1, r3
 800cdbe:	441a      	add	r2, r3
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	22ff      	movs	r2, #255	@ 0xff
 800cdc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	22ff      	movs	r2, #255	@ 0xff
 800cdd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d114      	bne.n	800ce04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d01a      	beq.n	800ce18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	3310      	adds	r3, #16
 800cde6:	4618      	mov	r0, r3
 800cde8:	f001 f990 	bl	800e10c <xTaskRemoveFromEventList>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d012      	beq.n	800ce18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cdf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ce28 <xQueueGenericReset+0xd0>)
 800cdf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdf8:	601a      	str	r2, [r3, #0]
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	f3bf 8f6f 	isb	sy
 800ce02:	e009      	b.n	800ce18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	3310      	adds	r3, #16
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7ff fef1 	bl	800cbf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	3324      	adds	r3, #36	@ 0x24
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7ff feec 	bl	800cbf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce18:	f002 f8d8 	bl	800efcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce1c:	2301      	movs	r3, #1
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	e000ed04 	.word	0xe000ed04

0800ce2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b08e      	sub	sp, #56	@ 0x38
 800ce30:	af02      	add	r7, sp, #8
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
 800ce38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10b      	bne.n	800ce58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ce52:	bf00      	nop
 800ce54:	bf00      	nop
 800ce56:	e7fd      	b.n	800ce54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d10b      	bne.n	800ce76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce62:	f383 8811 	msr	BASEPRI, r3
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ce70:	bf00      	nop
 800ce72:	bf00      	nop
 800ce74:	e7fd      	b.n	800ce72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d002      	beq.n	800ce82 <xQueueGenericCreateStatic+0x56>
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <xQueueGenericCreateStatic+0x5a>
 800ce82:	2301      	movs	r3, #1
 800ce84:	e000      	b.n	800ce88 <xQueueGenericCreateStatic+0x5c>
 800ce86:	2300      	movs	r3, #0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10b      	bne.n	800cea4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ce8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce90:	f383 8811 	msr	BASEPRI, r3
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	f3bf 8f4f 	dsb	sy
 800ce9c:	623b      	str	r3, [r7, #32]
}
 800ce9e:	bf00      	nop
 800cea0:	bf00      	nop
 800cea2:	e7fd      	b.n	800cea0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d102      	bne.n	800ceb0 <xQueueGenericCreateStatic+0x84>
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d101      	bne.n	800ceb4 <xQueueGenericCreateStatic+0x88>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e000      	b.n	800ceb6 <xQueueGenericCreateStatic+0x8a>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10b      	bne.n	800ced2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	61fb      	str	r3, [r7, #28]
}
 800cecc:	bf00      	nop
 800cece:	bf00      	nop
 800ced0:	e7fd      	b.n	800cece <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ced2:	2350      	movs	r3, #80	@ 0x50
 800ced4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b50      	cmp	r3, #80	@ 0x50
 800ceda:	d00b      	beq.n	800cef4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	61bb      	str	r3, [r7, #24]
}
 800ceee:	bf00      	nop
 800cef0:	bf00      	nop
 800cef2:	e7fd      	b.n	800cef0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cef4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00d      	beq.n	800cf1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf02:	2201      	movs	r2, #1
 800cf04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf0e:	9300      	str	r3, [sp, #0]
 800cf10:	4613      	mov	r3, r2
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	68b9      	ldr	r1, [r7, #8]
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f000 f805 	bl	800cf26 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3730      	adds	r7, #48	@ 0x30
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b084      	sub	sp, #16
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	60f8      	str	r0, [r7, #12]
 800cf2e:	60b9      	str	r1, [r7, #8]
 800cf30:	607a      	str	r2, [r7, #4]
 800cf32:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d103      	bne.n	800cf42 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	69ba      	ldr	r2, [r7, #24]
 800cf3e:	601a      	str	r2, [r3, #0]
 800cf40:	e002      	b.n	800cf48 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	68ba      	ldr	r2, [r7, #8]
 800cf52:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf54:	2101      	movs	r1, #1
 800cf56:	69b8      	ldr	r0, [r7, #24]
 800cf58:	f7ff fefe 	bl	800cd58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	78fa      	ldrb	r2, [r7, #3]
 800cf60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf64:	bf00      	nop
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b08e      	sub	sp, #56	@ 0x38
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
 800cf78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10b      	bne.n	800cfa0 <xQueueGenericSend+0x34>
	__asm volatile
 800cf88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cf9a:	bf00      	nop
 800cf9c:	bf00      	nop
 800cf9e:	e7fd      	b.n	800cf9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d103      	bne.n	800cfae <xQueueGenericSend+0x42>
 800cfa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d101      	bne.n	800cfb2 <xQueueGenericSend+0x46>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e000      	b.n	800cfb4 <xQueueGenericSend+0x48>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d10b      	bne.n	800cfd0 <xQueueGenericSend+0x64>
	__asm volatile
 800cfb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfbc:	f383 8811 	msr	BASEPRI, r3
 800cfc0:	f3bf 8f6f 	isb	sy
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cfca:	bf00      	nop
 800cfcc:	bf00      	nop
 800cfce:	e7fd      	b.n	800cfcc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d103      	bne.n	800cfde <xQueueGenericSend+0x72>
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d101      	bne.n	800cfe2 <xQueueGenericSend+0x76>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e000      	b.n	800cfe4 <xQueueGenericSend+0x78>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10b      	bne.n	800d000 <xQueueGenericSend+0x94>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	623b      	str	r3, [r7, #32]
}
 800cffa:	bf00      	nop
 800cffc:	bf00      	nop
 800cffe:	e7fd      	b.n	800cffc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d000:	f001 fa44 	bl	800e48c <xTaskGetSchedulerState>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d102      	bne.n	800d010 <xQueueGenericSend+0xa4>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d101      	bne.n	800d014 <xQueueGenericSend+0xa8>
 800d010:	2301      	movs	r3, #1
 800d012:	e000      	b.n	800d016 <xQueueGenericSend+0xaa>
 800d014:	2300      	movs	r3, #0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d10b      	bne.n	800d032 <xQueueGenericSend+0xc6>
	__asm volatile
 800d01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01e:	f383 8811 	msr	BASEPRI, r3
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	61fb      	str	r3, [r7, #28]
}
 800d02c:	bf00      	nop
 800d02e:	bf00      	nop
 800d030:	e7fd      	b.n	800d02e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d032:	f001 ff99 	bl	800ef68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d03e:	429a      	cmp	r2, r3
 800d040:	d302      	bcc.n	800d048 <xQueueGenericSend+0xdc>
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	2b02      	cmp	r3, #2
 800d046:	d129      	bne.n	800d09c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d048:	683a      	ldr	r2, [r7, #0]
 800d04a:	68b9      	ldr	r1, [r7, #8]
 800d04c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d04e:	f000 fa0f 	bl	800d470 <prvCopyDataToQueue>
 800d052:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d010      	beq.n	800d07e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05e:	3324      	adds	r3, #36	@ 0x24
 800d060:	4618      	mov	r0, r3
 800d062:	f001 f853 	bl	800e10c <xTaskRemoveFromEventList>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d013      	beq.n	800d094 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d06c:	4b3f      	ldr	r3, [pc, #252]	@ (800d16c <xQueueGenericSend+0x200>)
 800d06e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d072:	601a      	str	r2, [r3, #0]
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	e00a      	b.n	800d094 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d080:	2b00      	cmp	r3, #0
 800d082:	d007      	beq.n	800d094 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d084:	4b39      	ldr	r3, [pc, #228]	@ (800d16c <xQueueGenericSend+0x200>)
 800d086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d08a:	601a      	str	r2, [r3, #0]
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d094:	f001 ff9a 	bl	800efcc <vPortExitCritical>
				return pdPASS;
 800d098:	2301      	movs	r3, #1
 800d09a:	e063      	b.n	800d164 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d103      	bne.n	800d0aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d0a2:	f001 ff93 	bl	800efcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	e05c      	b.n	800d164 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d106      	bne.n	800d0be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0b0:	f107 0314 	add.w	r3, r7, #20
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f001 f88d 	bl	800e1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0be:	f001 ff85 	bl	800efcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0c2:	f000 fdfd 	bl	800dcc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0c6:	f001 ff4f 	bl	800ef68 <vPortEnterCritical>
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d0d0:	b25b      	sxtb	r3, r3
 800d0d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0d6:	d103      	bne.n	800d0e0 <xQueueGenericSend+0x174>
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d0e6:	b25b      	sxtb	r3, r3
 800d0e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0ec:	d103      	bne.n	800d0f6 <xQueueGenericSend+0x18a>
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d0f6:	f001 ff69 	bl	800efcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0fa:	1d3a      	adds	r2, r7, #4
 800d0fc:	f107 0314 	add.w	r3, r7, #20
 800d100:	4611      	mov	r1, r2
 800d102:	4618      	mov	r0, r3
 800d104:	f001 f87c 	bl	800e200 <xTaskCheckForTimeOut>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d124      	bne.n	800d158 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d10e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d110:	f000 faa6 	bl	800d660 <prvIsQueueFull>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d018      	beq.n	800d14c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d11c:	3310      	adds	r3, #16
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	4611      	mov	r1, r2
 800d122:	4618      	mov	r0, r3
 800d124:	f000 ffa0 	bl	800e068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d12a:	f000 fa31 	bl	800d590 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d12e:	f000 fdd5 	bl	800dcdc <xTaskResumeAll>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	f47f af7c 	bne.w	800d032 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d13a:	4b0c      	ldr	r3, [pc, #48]	@ (800d16c <xQueueGenericSend+0x200>)
 800d13c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d140:	601a      	str	r2, [r3, #0]
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	e772      	b.n	800d032 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d14c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d14e:	f000 fa1f 	bl	800d590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d152:	f000 fdc3 	bl	800dcdc <xTaskResumeAll>
 800d156:	e76c      	b.n	800d032 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d15a:	f000 fa19 	bl	800d590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d15e:	f000 fdbd 	bl	800dcdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d162:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d164:	4618      	mov	r0, r3
 800d166:	3738      	adds	r7, #56	@ 0x38
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	e000ed04 	.word	0xe000ed04

0800d170 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b090      	sub	sp, #64	@ 0x40
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10b      	bne.n	800d1a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d19a:	bf00      	nop
 800d19c:	bf00      	nop
 800d19e:	e7fd      	b.n	800d19c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d103      	bne.n	800d1ae <xQueueGenericSendFromISR+0x3e>
 800d1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d101      	bne.n	800d1b2 <xQueueGenericSendFromISR+0x42>
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e000      	b.n	800d1b4 <xQueueGenericSendFromISR+0x44>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10b      	bne.n	800d1d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d1ca:	bf00      	nop
 800d1cc:	bf00      	nop
 800d1ce:	e7fd      	b.n	800d1cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d103      	bne.n	800d1de <xQueueGenericSendFromISR+0x6e>
 800d1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d101      	bne.n	800d1e2 <xQueueGenericSendFromISR+0x72>
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e000      	b.n	800d1e4 <xQueueGenericSendFromISR+0x74>
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10b      	bne.n	800d200 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ec:	f383 8811 	msr	BASEPRI, r3
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	623b      	str	r3, [r7, #32]
}
 800d1fa:	bf00      	nop
 800d1fc:	bf00      	nop
 800d1fe:	e7fd      	b.n	800d1fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d200:	f001 ff92 	bl	800f128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d204:	f3ef 8211 	mrs	r2, BASEPRI
 800d208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20c:	f383 8811 	msr	BASEPRI, r3
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	61fa      	str	r2, [r7, #28]
 800d21a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d21c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d21e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d228:	429a      	cmp	r2, r3
 800d22a:	d302      	bcc.n	800d232 <xQueueGenericSendFromISR+0xc2>
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d12f      	bne.n	800d292 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d240:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	68b9      	ldr	r1, [r7, #8]
 800d246:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d248:	f000 f912 	bl	800d470 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d24c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d254:	d112      	bne.n	800d27c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d016      	beq.n	800d28c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d260:	3324      	adds	r3, #36	@ 0x24
 800d262:	4618      	mov	r0, r3
 800d264:	f000 ff52 	bl	800e10c <xTaskRemoveFromEventList>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00e      	beq.n	800d28c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00b      	beq.n	800d28c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2201      	movs	r2, #1
 800d278:	601a      	str	r2, [r3, #0]
 800d27a:	e007      	b.n	800d28c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d27c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d280:	3301      	adds	r3, #1
 800d282:	b2db      	uxtb	r3, r3
 800d284:	b25a      	sxtb	r2, r3
 800d286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d28c:	2301      	movs	r3, #1
 800d28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d290:	e001      	b.n	800d296 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d292:	2300      	movs	r3, #0
 800d294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d298:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d2a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3740      	adds	r7, #64	@ 0x40
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b08c      	sub	sp, #48	@ 0x30
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d10b      	bne.n	800d2de <xQueueReceive+0x32>
	__asm volatile
 800d2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ca:	f383 8811 	msr	BASEPRI, r3
 800d2ce:	f3bf 8f6f 	isb	sy
 800d2d2:	f3bf 8f4f 	dsb	sy
 800d2d6:	623b      	str	r3, [r7, #32]
}
 800d2d8:	bf00      	nop
 800d2da:	bf00      	nop
 800d2dc:	e7fd      	b.n	800d2da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d103      	bne.n	800d2ec <xQueueReceive+0x40>
 800d2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d101      	bne.n	800d2f0 <xQueueReceive+0x44>
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e000      	b.n	800d2f2 <xQueueReceive+0x46>
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10b      	bne.n	800d30e <xQueueReceive+0x62>
	__asm volatile
 800d2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	61fb      	str	r3, [r7, #28]
}
 800d308:	bf00      	nop
 800d30a:	bf00      	nop
 800d30c:	e7fd      	b.n	800d30a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d30e:	f001 f8bd 	bl	800e48c <xTaskGetSchedulerState>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d102      	bne.n	800d31e <xQueueReceive+0x72>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d101      	bne.n	800d322 <xQueueReceive+0x76>
 800d31e:	2301      	movs	r3, #1
 800d320:	e000      	b.n	800d324 <xQueueReceive+0x78>
 800d322:	2300      	movs	r3, #0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10b      	bne.n	800d340 <xQueueReceive+0x94>
	__asm volatile
 800d328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d32c:	f383 8811 	msr	BASEPRI, r3
 800d330:	f3bf 8f6f 	isb	sy
 800d334:	f3bf 8f4f 	dsb	sy
 800d338:	61bb      	str	r3, [r7, #24]
}
 800d33a:	bf00      	nop
 800d33c:	bf00      	nop
 800d33e:	e7fd      	b.n	800d33c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d340:	f001 fe12 	bl	800ef68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d348:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d01f      	beq.n	800d390 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d354:	f000 f8f6 	bl	800d544 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35a:	1e5a      	subs	r2, r3, #1
 800d35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d362:	691b      	ldr	r3, [r3, #16]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00f      	beq.n	800d388 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d36a:	3310      	adds	r3, #16
 800d36c:	4618      	mov	r0, r3
 800d36e:	f000 fecd 	bl	800e10c <xTaskRemoveFromEventList>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d007      	beq.n	800d388 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d378:	4b3c      	ldr	r3, [pc, #240]	@ (800d46c <xQueueReceive+0x1c0>)
 800d37a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d37e:	601a      	str	r2, [r3, #0]
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d388:	f001 fe20 	bl	800efcc <vPortExitCritical>
				return pdPASS;
 800d38c:	2301      	movs	r3, #1
 800d38e:	e069      	b.n	800d464 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d103      	bne.n	800d39e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d396:	f001 fe19 	bl	800efcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d39a:	2300      	movs	r3, #0
 800d39c:	e062      	b.n	800d464 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d106      	bne.n	800d3b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3a4:	f107 0310 	add.w	r3, r7, #16
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 ff13 	bl	800e1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3b2:	f001 fe0b 	bl	800efcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3b6:	f000 fc83 	bl	800dcc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3ba:	f001 fdd5 	bl	800ef68 <vPortEnterCritical>
 800d3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d3c4:	b25b      	sxtb	r3, r3
 800d3c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3ca:	d103      	bne.n	800d3d4 <xQueueReceive+0x128>
 800d3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3da:	b25b      	sxtb	r3, r3
 800d3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3e0:	d103      	bne.n	800d3ea <xQueueReceive+0x13e>
 800d3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3ea:	f001 fdef 	bl	800efcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3ee:	1d3a      	adds	r2, r7, #4
 800d3f0:	f107 0310 	add.w	r3, r7, #16
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 ff02 	bl	800e200 <xTaskCheckForTimeOut>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d123      	bne.n	800d44a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d404:	f000 f916 	bl	800d634 <prvIsQueueEmpty>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d017      	beq.n	800d43e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d410:	3324      	adds	r3, #36	@ 0x24
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	4611      	mov	r1, r2
 800d416:	4618      	mov	r0, r3
 800d418:	f000 fe26 	bl	800e068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d41c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d41e:	f000 f8b7 	bl	800d590 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d422:	f000 fc5b 	bl	800dcdc <xTaskResumeAll>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d189      	bne.n	800d340 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d42c:	4b0f      	ldr	r3, [pc, #60]	@ (800d46c <xQueueReceive+0x1c0>)
 800d42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	e780      	b.n	800d340 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d43e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d440:	f000 f8a6 	bl	800d590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d444:	f000 fc4a 	bl	800dcdc <xTaskResumeAll>
 800d448:	e77a      	b.n	800d340 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d44a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d44c:	f000 f8a0 	bl	800d590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d450:	f000 fc44 	bl	800dcdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d456:	f000 f8ed 	bl	800d634 <prvIsQueueEmpty>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f43f af6f 	beq.w	800d340 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d462:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d464:	4618      	mov	r0, r3
 800d466:	3730      	adds	r7, #48	@ 0x30
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	e000ed04 	.word	0xe000ed04

0800d470 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d47c:	2300      	movs	r3, #0
 800d47e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d484:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10d      	bne.n	800d4aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d14d      	bne.n	800d532 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	4618      	mov	r0, r3
 800d49c:	f001 f814 	bl	800e4c8 <xTaskPriorityDisinherit>
 800d4a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	609a      	str	r2, [r3, #8]
 800d4a8:	e043      	b.n	800d532 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d119      	bne.n	800d4e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	6858      	ldr	r0, [r3, #4]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	68b9      	ldr	r1, [r7, #8]
 800d4bc:	f002 fe93 	bl	80101e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4c8:	441a      	add	r2, r3
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	685a      	ldr	r2, [r3, #4]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d32b      	bcc.n	800d532 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	605a      	str	r2, [r3, #4]
 800d4e2:	e026      	b.n	800d532 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	68d8      	ldr	r0, [r3, #12]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	68b9      	ldr	r1, [r7, #8]
 800d4f0:	f002 fe79 	bl	80101e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	68da      	ldr	r2, [r3, #12]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4fc:	425b      	negs	r3, r3
 800d4fe:	441a      	add	r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	68da      	ldr	r2, [r3, #12]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d207      	bcs.n	800d520 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	689a      	ldr	r2, [r3, #8]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d518:	425b      	negs	r3, r3
 800d51a:	441a      	add	r2, r3
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b02      	cmp	r3, #2
 800d524:	d105      	bne.n	800d532 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	3b01      	subs	r3, #1
 800d530:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	1c5a      	adds	r2, r3, #1
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d53a:	697b      	ldr	r3, [r7, #20]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3718      	adds	r7, #24
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d552:	2b00      	cmp	r3, #0
 800d554:	d018      	beq.n	800d588 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	68da      	ldr	r2, [r3, #12]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d55e:	441a      	add	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	68da      	ldr	r2, [r3, #12]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d303      	bcc.n	800d578 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	68d9      	ldr	r1, [r3, #12]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d580:	461a      	mov	r2, r3
 800d582:	6838      	ldr	r0, [r7, #0]
 800d584:	f002 fe2f 	bl	80101e6 <memcpy>
	}
}
 800d588:	bf00      	nop
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d598:	f001 fce6 	bl	800ef68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5a4:	e011      	b.n	800d5ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d012      	beq.n	800d5d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	3324      	adds	r3, #36	@ 0x24
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f000 fdaa 	bl	800e10c <xTaskRemoveFromEventList>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d5be:	f000 fe83 	bl	800e2c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d5c2:	7bfb      	ldrb	r3, [r7, #15]
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dce9      	bgt.n	800d5a6 <prvUnlockQueue+0x16>
 800d5d2:	e000      	b.n	800d5d6 <prvUnlockQueue+0x46>
					break;
 800d5d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	22ff      	movs	r2, #255	@ 0xff
 800d5da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d5de:	f001 fcf5 	bl	800efcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d5e2:	f001 fcc1 	bl	800ef68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5ee:	e011      	b.n	800d614 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d012      	beq.n	800d61e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	3310      	adds	r3, #16
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f000 fd85 	bl	800e10c <xTaskRemoveFromEventList>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d001      	beq.n	800d60c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d608:	f000 fe5e 	bl	800e2c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d60c:	7bbb      	ldrb	r3, [r7, #14]
 800d60e:	3b01      	subs	r3, #1
 800d610:	b2db      	uxtb	r3, r3
 800d612:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	dce9      	bgt.n	800d5f0 <prvUnlockQueue+0x60>
 800d61c:	e000      	b.n	800d620 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d61e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	22ff      	movs	r2, #255	@ 0xff
 800d624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d628:	f001 fcd0 	bl	800efcc <vPortExitCritical>
}
 800d62c:	bf00      	nop
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d63c:	f001 fc94 	bl	800ef68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d644:	2b00      	cmp	r3, #0
 800d646:	d102      	bne.n	800d64e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d648:	2301      	movs	r3, #1
 800d64a:	60fb      	str	r3, [r7, #12]
 800d64c:	e001      	b.n	800d652 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d64e:	2300      	movs	r3, #0
 800d650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d652:	f001 fcbb 	bl	800efcc <vPortExitCritical>

	return xReturn;
 800d656:	68fb      	ldr	r3, [r7, #12]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d668:	f001 fc7e 	bl	800ef68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d674:	429a      	cmp	r2, r3
 800d676:	d102      	bne.n	800d67e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d678:	2301      	movs	r3, #1
 800d67a:	60fb      	str	r3, [r7, #12]
 800d67c:	e001      	b.n	800d682 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d67e:	2300      	movs	r3, #0
 800d680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d682:	f001 fca3 	bl	800efcc <vPortExitCritical>

	return xReturn;
 800d686:	68fb      	ldr	r3, [r7, #12]
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d69a:	2300      	movs	r3, #0
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	e014      	b.n	800d6ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d6a0:	4a0f      	ldr	r2, [pc, #60]	@ (800d6e0 <vQueueAddToRegistry+0x50>)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d10b      	bne.n	800d6c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d6ac:	490c      	ldr	r1, [pc, #48]	@ (800d6e0 <vQueueAddToRegistry+0x50>)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d6b6:	4a0a      	ldr	r2, [pc, #40]	@ (800d6e0 <vQueueAddToRegistry+0x50>)
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	00db      	lsls	r3, r3, #3
 800d6bc:	4413      	add	r3, r2
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d6c2:	e006      	b.n	800d6d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	60fb      	str	r3, [r7, #12]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2b07      	cmp	r3, #7
 800d6ce:	d9e7      	bls.n	800d6a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d6d0:	bf00      	nop
 800d6d2:	bf00      	nop
 800d6d4:	3714      	adds	r7, #20
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	20001224 	.word	0x20001224

0800d6e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d6f4:	f001 fc38 	bl	800ef68 <vPortEnterCritical>
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6fe:	b25b      	sxtb	r3, r3
 800d700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d704:	d103      	bne.n	800d70e <vQueueWaitForMessageRestricted+0x2a>
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2200      	movs	r2, #0
 800d70a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d714:	b25b      	sxtb	r3, r3
 800d716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d71a:	d103      	bne.n	800d724 <vQueueWaitForMessageRestricted+0x40>
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	2200      	movs	r2, #0
 800d720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d724:	f001 fc52 	bl	800efcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d106      	bne.n	800d73e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	3324      	adds	r3, #36	@ 0x24
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	68b9      	ldr	r1, [r7, #8]
 800d738:	4618      	mov	r0, r3
 800d73a:	f000 fcbb 	bl	800e0b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d73e:	6978      	ldr	r0, [r7, #20]
 800d740:	f7ff ff26 	bl	800d590 <prvUnlockQueue>
	}
 800d744:	bf00      	nop
 800d746:	3718      	adds	r7, #24
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b08e      	sub	sp, #56	@ 0x38
 800d750:	af04      	add	r7, sp, #16
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10b      	bne.n	800d778 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d764:	f383 8811 	msr	BASEPRI, r3
 800d768:	f3bf 8f6f 	isb	sy
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	623b      	str	r3, [r7, #32]
}
 800d772:	bf00      	nop
 800d774:	bf00      	nop
 800d776:	e7fd      	b.n	800d774 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10b      	bne.n	800d796 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	61fb      	str	r3, [r7, #28]
}
 800d790:	bf00      	nop
 800d792:	bf00      	nop
 800d794:	e7fd      	b.n	800d792 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d796:	235c      	movs	r3, #92	@ 0x5c
 800d798:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d79e:	d00b      	beq.n	800d7b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	61bb      	str	r3, [r7, #24]
}
 800d7b2:	bf00      	nop
 800d7b4:	bf00      	nop
 800d7b6:	e7fd      	b.n	800d7b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d7b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d01e      	beq.n	800d7fe <xTaskCreateStatic+0xb2>
 800d7c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d01b      	beq.n	800d7fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d2:	2202      	movs	r2, #2
 800d7d4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7d8:	2300      	movs	r3, #0
 800d7da:	9303      	str	r3, [sp, #12]
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7de:	9302      	str	r3, [sp, #8]
 800d7e0:	f107 0314 	add.w	r3, r7, #20
 800d7e4:	9301      	str	r3, [sp, #4]
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	68b9      	ldr	r1, [r7, #8]
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f000 f850 	bl	800d896 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7f8:	f000 f8de 	bl	800d9b8 <prvAddNewTaskToReadyList>
 800d7fc:	e001      	b.n	800d802 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d7fe:	2300      	movs	r3, #0
 800d800:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d802:	697b      	ldr	r3, [r7, #20]
	}
 800d804:	4618      	mov	r0, r3
 800d806:	3728      	adds	r7, #40	@ 0x28
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b08c      	sub	sp, #48	@ 0x30
 800d810:	af04      	add	r7, sp, #16
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	603b      	str	r3, [r7, #0]
 800d818:	4613      	mov	r3, r2
 800d81a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d81c:	88fb      	ldrh	r3, [r7, #6]
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	4618      	mov	r0, r3
 800d822:	f001 fcc3 	bl	800f1ac <pvPortMalloc>
 800d826:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00e      	beq.n	800d84c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d82e:	205c      	movs	r0, #92	@ 0x5c
 800d830:	f001 fcbc 	bl	800f1ac <pvPortMalloc>
 800d834:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	631a      	str	r2, [r3, #48]	@ 0x30
 800d842:	e005      	b.n	800d850 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d844:	6978      	ldr	r0, [r7, #20]
 800d846:	f001 fd7f 	bl	800f348 <vPortFree>
 800d84a:	e001      	b.n	800d850 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d84c:	2300      	movs	r3, #0
 800d84e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d017      	beq.n	800d886 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	2200      	movs	r2, #0
 800d85a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d85e:	88fa      	ldrh	r2, [r7, #6]
 800d860:	2300      	movs	r3, #0
 800d862:	9303      	str	r3, [sp, #12]
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	9302      	str	r3, [sp, #8]
 800d868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86a:	9301      	str	r3, [sp, #4]
 800d86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d86e:	9300      	str	r3, [sp, #0]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	68b9      	ldr	r1, [r7, #8]
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f000 f80e 	bl	800d896 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d87a:	69f8      	ldr	r0, [r7, #28]
 800d87c:	f000 f89c 	bl	800d9b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d880:	2301      	movs	r3, #1
 800d882:	61bb      	str	r3, [r7, #24]
 800d884:	e002      	b.n	800d88c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d88a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d88c:	69bb      	ldr	r3, [r7, #24]
	}
 800d88e:	4618      	mov	r0, r3
 800d890:	3720      	adds	r7, #32
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b088      	sub	sp, #32
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	60f8      	str	r0, [r7, #12]
 800d89e:	60b9      	str	r1, [r7, #8]
 800d8a0:	607a      	str	r2, [r7, #4]
 800d8a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	21a5      	movs	r1, #165	@ 0xa5
 800d8b0:	f002 fc60 	bl	8010174 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4413      	add	r3, r2
 800d8c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	f023 0307 	bic.w	r3, r3, #7
 800d8cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	f003 0307 	and.w	r3, r3, #7
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00b      	beq.n	800d8f0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8dc:	f383 8811 	msr	BASEPRI, r3
 800d8e0:	f3bf 8f6f 	isb	sy
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	617b      	str	r3, [r7, #20]
}
 800d8ea:	bf00      	nop
 800d8ec:	bf00      	nop
 800d8ee:	e7fd      	b.n	800d8ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d01f      	beq.n	800d936 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	61fb      	str	r3, [r7, #28]
 800d8fa:	e012      	b.n	800d922 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	4413      	add	r3, r2
 800d902:	7819      	ldrb	r1, [r3, #0]
 800d904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	4413      	add	r3, r2
 800d90a:	3334      	adds	r3, #52	@ 0x34
 800d90c:	460a      	mov	r2, r1
 800d90e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	4413      	add	r3, r2
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d006      	beq.n	800d92a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	3301      	adds	r3, #1
 800d920:	61fb      	str	r3, [r7, #28]
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	2b0f      	cmp	r3, #15
 800d926:	d9e9      	bls.n	800d8fc <prvInitialiseNewTask+0x66>
 800d928:	e000      	b.n	800d92c <prvInitialiseNewTask+0x96>
			{
				break;
 800d92a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d934:	e003      	b.n	800d93e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d938:	2200      	movs	r2, #0
 800d93a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d940:	2b37      	cmp	r3, #55	@ 0x37
 800d942:	d901      	bls.n	800d948 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d944:	2337      	movs	r3, #55	@ 0x37
 800d946:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d94c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d950:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d952:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d956:	2200      	movs	r2, #0
 800d958:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95c:	3304      	adds	r3, #4
 800d95e:	4618      	mov	r0, r3
 800d960:	f7ff f966 	bl	800cc30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d966:	3318      	adds	r3, #24
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff f961 	bl	800cc30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d972:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d976:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d982:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d986:	2200      	movs	r2, #0
 800d988:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d98c:	2200      	movs	r2, #0
 800d98e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d992:	683a      	ldr	r2, [r7, #0]
 800d994:	68f9      	ldr	r1, [r7, #12]
 800d996:	69b8      	ldr	r0, [r7, #24]
 800d998:	f001 f9b4 	bl	800ed04 <pxPortInitialiseStack>
 800d99c:	4602      	mov	r2, r0
 800d99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d002      	beq.n	800d9ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9ae:	bf00      	nop
 800d9b0:	3720      	adds	r7, #32
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
	...

0800d9b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9c0:	f001 fad2 	bl	800ef68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9c4:	4b2d      	ldr	r3, [pc, #180]	@ (800da7c <prvAddNewTaskToReadyList+0xc4>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	4a2c      	ldr	r2, [pc, #176]	@ (800da7c <prvAddNewTaskToReadyList+0xc4>)
 800d9cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9ce:	4b2c      	ldr	r3, [pc, #176]	@ (800da80 <prvAddNewTaskToReadyList+0xc8>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d109      	bne.n	800d9ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d9d6:	4a2a      	ldr	r2, [pc, #168]	@ (800da80 <prvAddNewTaskToReadyList+0xc8>)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9dc:	4b27      	ldr	r3, [pc, #156]	@ (800da7c <prvAddNewTaskToReadyList+0xc4>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d110      	bne.n	800da06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d9e4:	f000 fc94 	bl	800e310 <prvInitialiseTaskLists>
 800d9e8:	e00d      	b.n	800da06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d9ea:	4b26      	ldr	r3, [pc, #152]	@ (800da84 <prvAddNewTaskToReadyList+0xcc>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d109      	bne.n	800da06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9f2:	4b23      	ldr	r3, [pc, #140]	@ (800da80 <prvAddNewTaskToReadyList+0xc8>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d802      	bhi.n	800da06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da00:	4a1f      	ldr	r2, [pc, #124]	@ (800da80 <prvAddNewTaskToReadyList+0xc8>)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da06:	4b20      	ldr	r3, [pc, #128]	@ (800da88 <prvAddNewTaskToReadyList+0xd0>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	3301      	adds	r3, #1
 800da0c:	4a1e      	ldr	r2, [pc, #120]	@ (800da88 <prvAddNewTaskToReadyList+0xd0>)
 800da0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800da10:	4b1d      	ldr	r3, [pc, #116]	@ (800da88 <prvAddNewTaskToReadyList+0xd0>)
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da1c:	4b1b      	ldr	r3, [pc, #108]	@ (800da8c <prvAddNewTaskToReadyList+0xd4>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	429a      	cmp	r2, r3
 800da22:	d903      	bls.n	800da2c <prvAddNewTaskToReadyList+0x74>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da28:	4a18      	ldr	r2, [pc, #96]	@ (800da8c <prvAddNewTaskToReadyList+0xd4>)
 800da2a:	6013      	str	r3, [r2, #0]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da30:	4613      	mov	r3, r2
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	4413      	add	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4a15      	ldr	r2, [pc, #84]	@ (800da90 <prvAddNewTaskToReadyList+0xd8>)
 800da3a:	441a      	add	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3304      	adds	r3, #4
 800da40:	4619      	mov	r1, r3
 800da42:	4610      	mov	r0, r2
 800da44:	f7ff f901 	bl	800cc4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da48:	f001 fac0 	bl	800efcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da4c:	4b0d      	ldr	r3, [pc, #52]	@ (800da84 <prvAddNewTaskToReadyList+0xcc>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d00e      	beq.n	800da72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da54:	4b0a      	ldr	r3, [pc, #40]	@ (800da80 <prvAddNewTaskToReadyList+0xc8>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da5e:	429a      	cmp	r2, r3
 800da60:	d207      	bcs.n	800da72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da62:	4b0c      	ldr	r3, [pc, #48]	@ (800da94 <prvAddNewTaskToReadyList+0xdc>)
 800da64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da72:	bf00      	nop
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	20001738 	.word	0x20001738
 800da80:	20001264 	.word	0x20001264
 800da84:	20001744 	.word	0x20001744
 800da88:	20001754 	.word	0x20001754
 800da8c:	20001740 	.word	0x20001740
 800da90:	20001268 	.word	0x20001268
 800da94:	e000ed04 	.word	0xe000ed04

0800da98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800daa0:	2300      	movs	r3, #0
 800daa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d018      	beq.n	800dadc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800daaa:	4b14      	ldr	r3, [pc, #80]	@ (800dafc <vTaskDelay+0x64>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00b      	beq.n	800daca <vTaskDelay+0x32>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	60bb      	str	r3, [r7, #8]
}
 800dac4:	bf00      	nop
 800dac6:	bf00      	nop
 800dac8:	e7fd      	b.n	800dac6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800daca:	f000 f8f9 	bl	800dcc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dace:	2100      	movs	r1, #0
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 fd69 	bl	800e5a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dad6:	f000 f901 	bl	800dcdc <xTaskResumeAll>
 800dada:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d107      	bne.n	800daf2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dae2:	4b07      	ldr	r3, [pc, #28]	@ (800db00 <vTaskDelay+0x68>)
 800dae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dae8:	601a      	str	r2, [r3, #0]
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800daf2:	bf00      	nop
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	20001760 	.word	0x20001760
 800db00:	e000ed04 	.word	0xe000ed04

0800db04 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800db0c:	f001 fa2c 	bl	800ef68 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d102      	bne.n	800db1c <vTaskSuspend+0x18>
 800db16:	4b30      	ldr	r3, [pc, #192]	@ (800dbd8 <vTaskSuspend+0xd4>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	e000      	b.n	800db1e <vTaskSuspend+0x1a>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	3304      	adds	r3, #4
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff f8ed 	bl	800cd04 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d004      	beq.n	800db3c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	3318      	adds	r3, #24
 800db36:	4618      	mov	r0, r3
 800db38:	f7ff f8e4 	bl	800cd04 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	3304      	adds	r3, #4
 800db40:	4619      	mov	r1, r3
 800db42:	4826      	ldr	r0, [pc, #152]	@ (800dbdc <vTaskSuspend+0xd8>)
 800db44:	f7ff f881 	bl	800cc4a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	2b01      	cmp	r3, #1
 800db52:	d103      	bne.n	800db5c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2200      	movs	r2, #0
 800db58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800db5c:	f001 fa36 	bl	800efcc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800db60:	4b1f      	ldr	r3, [pc, #124]	@ (800dbe0 <vTaskSuspend+0xdc>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d005      	beq.n	800db74 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800db68:	f001 f9fe 	bl	800ef68 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800db6c:	f000 fc6e 	bl	800e44c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800db70:	f001 fa2c 	bl	800efcc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800db74:	4b18      	ldr	r3, [pc, #96]	@ (800dbd8 <vTaskSuspend+0xd4>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d128      	bne.n	800dbd0 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800db7e:	4b18      	ldr	r3, [pc, #96]	@ (800dbe0 <vTaskSuspend+0xdc>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d018      	beq.n	800dbb8 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800db86:	4b17      	ldr	r3, [pc, #92]	@ (800dbe4 <vTaskSuspend+0xe0>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00b      	beq.n	800dba6 <vTaskSuspend+0xa2>
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	60bb      	str	r3, [r7, #8]
}
 800dba0:	bf00      	nop
 800dba2:	bf00      	nop
 800dba4:	e7fd      	b.n	800dba2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800dba6:	4b10      	ldr	r3, [pc, #64]	@ (800dbe8 <vTaskSuspend+0xe4>)
 800dba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbac:	601a      	str	r2, [r3, #0]
 800dbae:	f3bf 8f4f 	dsb	sy
 800dbb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbb6:	e00b      	b.n	800dbd0 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800dbb8:	4b08      	ldr	r3, [pc, #32]	@ (800dbdc <vTaskSuspend+0xd8>)
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	4b0b      	ldr	r3, [pc, #44]	@ (800dbec <vTaskSuspend+0xe8>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d103      	bne.n	800dbcc <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800dbc4:	4b04      	ldr	r3, [pc, #16]	@ (800dbd8 <vTaskSuspend+0xd4>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	601a      	str	r2, [r3, #0]
	}
 800dbca:	e001      	b.n	800dbd0 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800dbcc:	f000 f9ee 	bl	800dfac <vTaskSwitchContext>
	}
 800dbd0:	bf00      	nop
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	20001264 	.word	0x20001264
 800dbdc:	20001724 	.word	0x20001724
 800dbe0:	20001744 	.word	0x20001744
 800dbe4:	20001760 	.word	0x20001760
 800dbe8:	e000ed04 	.word	0xe000ed04
 800dbec:	20001738 	.word	0x20001738

0800dbf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b08a      	sub	sp, #40	@ 0x28
 800dbf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dbfe:	463a      	mov	r2, r7
 800dc00:	1d39      	adds	r1, r7, #4
 800dc02:	f107 0308 	add.w	r3, r7, #8
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fe ffbe 	bl	800cb88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc0c:	6839      	ldr	r1, [r7, #0]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	9202      	str	r2, [sp, #8]
 800dc14:	9301      	str	r3, [sp, #4]
 800dc16:	2300      	movs	r3, #0
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	460a      	mov	r2, r1
 800dc1e:	4922      	ldr	r1, [pc, #136]	@ (800dca8 <vTaskStartScheduler+0xb8>)
 800dc20:	4822      	ldr	r0, [pc, #136]	@ (800dcac <vTaskStartScheduler+0xbc>)
 800dc22:	f7ff fd93 	bl	800d74c <xTaskCreateStatic>
 800dc26:	4603      	mov	r3, r0
 800dc28:	4a21      	ldr	r2, [pc, #132]	@ (800dcb0 <vTaskStartScheduler+0xc0>)
 800dc2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc2c:	4b20      	ldr	r3, [pc, #128]	@ (800dcb0 <vTaskStartScheduler+0xc0>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d002      	beq.n	800dc3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc34:	2301      	movs	r3, #1
 800dc36:	617b      	str	r3, [r7, #20]
 800dc38:	e001      	b.n	800dc3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d102      	bne.n	800dc4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dc44:	f000 fd04 	bl	800e650 <xTimerCreateTimerTask>
 800dc48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d116      	bne.n	800dc7e <vTaskStartScheduler+0x8e>
	__asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	613b      	str	r3, [r7, #16]
}
 800dc62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc64:	4b13      	ldr	r3, [pc, #76]	@ (800dcb4 <vTaskStartScheduler+0xc4>)
 800dc66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc6c:	4b12      	ldr	r3, [pc, #72]	@ (800dcb8 <vTaskStartScheduler+0xc8>)
 800dc6e:	2201      	movs	r2, #1
 800dc70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc72:	4b12      	ldr	r3, [pc, #72]	@ (800dcbc <vTaskStartScheduler+0xcc>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc78:	f001 f8d2 	bl	800ee20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc7c:	e00f      	b.n	800dc9e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc84:	d10b      	bne.n	800dc9e <vTaskStartScheduler+0xae>
	__asm volatile
 800dc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	60fb      	str	r3, [r7, #12]
}
 800dc98:	bf00      	nop
 800dc9a:	bf00      	nop
 800dc9c:	e7fd      	b.n	800dc9a <vTaskStartScheduler+0xaa>
}
 800dc9e:	bf00      	nop
 800dca0:	3718      	adds	r7, #24
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	08013160 	.word	0x08013160
 800dcac:	0800e2e1 	.word	0x0800e2e1
 800dcb0:	2000175c 	.word	0x2000175c
 800dcb4:	20001758 	.word	0x20001758
 800dcb8:	20001744 	.word	0x20001744
 800dcbc:	2000173c 	.word	0x2000173c

0800dcc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dcc4:	4b04      	ldr	r3, [pc, #16]	@ (800dcd8 <vTaskSuspendAll+0x18>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	4a03      	ldr	r2, [pc, #12]	@ (800dcd8 <vTaskSuspendAll+0x18>)
 800dccc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dcce:	bf00      	nop
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	20001760 	.word	0x20001760

0800dcdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dce2:	2300      	movs	r3, #0
 800dce4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dce6:	2300      	movs	r3, #0
 800dce8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dcea:	4b42      	ldr	r3, [pc, #264]	@ (800ddf4 <xTaskResumeAll+0x118>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10b      	bne.n	800dd0a <xTaskResumeAll+0x2e>
	__asm volatile
 800dcf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf6:	f383 8811 	msr	BASEPRI, r3
 800dcfa:	f3bf 8f6f 	isb	sy
 800dcfe:	f3bf 8f4f 	dsb	sy
 800dd02:	603b      	str	r3, [r7, #0]
}
 800dd04:	bf00      	nop
 800dd06:	bf00      	nop
 800dd08:	e7fd      	b.n	800dd06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd0a:	f001 f92d 	bl	800ef68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd0e:	4b39      	ldr	r3, [pc, #228]	@ (800ddf4 <xTaskResumeAll+0x118>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	3b01      	subs	r3, #1
 800dd14:	4a37      	ldr	r2, [pc, #220]	@ (800ddf4 <xTaskResumeAll+0x118>)
 800dd16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd18:	4b36      	ldr	r3, [pc, #216]	@ (800ddf4 <xTaskResumeAll+0x118>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d162      	bne.n	800dde6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd20:	4b35      	ldr	r3, [pc, #212]	@ (800ddf8 <xTaskResumeAll+0x11c>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d05e      	beq.n	800dde6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd28:	e02f      	b.n	800dd8a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd2a:	4b34      	ldr	r3, [pc, #208]	@ (800ddfc <xTaskResumeAll+0x120>)
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	3318      	adds	r3, #24
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fe ffe4 	bl	800cd04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	3304      	adds	r3, #4
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fe ffdf 	bl	800cd04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4a:	4b2d      	ldr	r3, [pc, #180]	@ (800de00 <xTaskResumeAll+0x124>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d903      	bls.n	800dd5a <xTaskResumeAll+0x7e>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd56:	4a2a      	ldr	r2, [pc, #168]	@ (800de00 <xTaskResumeAll+0x124>)
 800dd58:	6013      	str	r3, [r2, #0]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd5e:	4613      	mov	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4413      	add	r3, r2
 800dd64:	009b      	lsls	r3, r3, #2
 800dd66:	4a27      	ldr	r2, [pc, #156]	@ (800de04 <xTaskResumeAll+0x128>)
 800dd68:	441a      	add	r2, r3
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	4619      	mov	r1, r3
 800dd70:	4610      	mov	r0, r2
 800dd72:	f7fe ff6a 	bl	800cc4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd7a:	4b23      	ldr	r3, [pc, #140]	@ (800de08 <xTaskResumeAll+0x12c>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d302      	bcc.n	800dd8a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dd84:	4b21      	ldr	r3, [pc, #132]	@ (800de0c <xTaskResumeAll+0x130>)
 800dd86:	2201      	movs	r2, #1
 800dd88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd8a:	4b1c      	ldr	r3, [pc, #112]	@ (800ddfc <xTaskResumeAll+0x120>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1cb      	bne.n	800dd2a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d001      	beq.n	800dd9c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd98:	f000 fb58 	bl	800e44c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dd9c:	4b1c      	ldr	r3, [pc, #112]	@ (800de10 <xTaskResumeAll+0x134>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d010      	beq.n	800ddca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dda8:	f000 f846 	bl	800de38 <xTaskIncrementTick>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d002      	beq.n	800ddb8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ddb2:	4b16      	ldr	r3, [pc, #88]	@ (800de0c <xTaskResumeAll+0x130>)
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d1f1      	bne.n	800dda8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ddc4:	4b12      	ldr	r3, [pc, #72]	@ (800de10 <xTaskResumeAll+0x134>)
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ddca:	4b10      	ldr	r3, [pc, #64]	@ (800de0c <xTaskResumeAll+0x130>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d009      	beq.n	800dde6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ddd6:	4b0f      	ldr	r3, [pc, #60]	@ (800de14 <xTaskResumeAll+0x138>)
 800ddd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dddc:	601a      	str	r2, [r3, #0]
 800ddde:	f3bf 8f4f 	dsb	sy
 800dde2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dde6:	f001 f8f1 	bl	800efcc <vPortExitCritical>

	return xAlreadyYielded;
 800ddea:	68bb      	ldr	r3, [r7, #8]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	20001760 	.word	0x20001760
 800ddf8:	20001738 	.word	0x20001738
 800ddfc:	200016f8 	.word	0x200016f8
 800de00:	20001740 	.word	0x20001740
 800de04:	20001268 	.word	0x20001268
 800de08:	20001264 	.word	0x20001264
 800de0c:	2000174c 	.word	0x2000174c
 800de10:	20001748 	.word	0x20001748
 800de14:	e000ed04 	.word	0xe000ed04

0800de18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de1e:	4b05      	ldr	r3, [pc, #20]	@ (800de34 <xTaskGetTickCount+0x1c>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800de24:	687b      	ldr	r3, [r7, #4]
}
 800de26:	4618      	mov	r0, r3
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	2000173c 	.word	0x2000173c

0800de38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b086      	sub	sp, #24
 800de3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de3e:	2300      	movs	r3, #0
 800de40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de42:	4b4f      	ldr	r3, [pc, #316]	@ (800df80 <xTaskIncrementTick+0x148>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	f040 8090 	bne.w	800df6c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800de4c:	4b4d      	ldr	r3, [pc, #308]	@ (800df84 <xTaskIncrementTick+0x14c>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	3301      	adds	r3, #1
 800de52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de54:	4a4b      	ldr	r2, [pc, #300]	@ (800df84 <xTaskIncrementTick+0x14c>)
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d121      	bne.n	800dea4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800de60:	4b49      	ldr	r3, [pc, #292]	@ (800df88 <xTaskIncrementTick+0x150>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00b      	beq.n	800de82 <xTaskIncrementTick+0x4a>
	__asm volatile
 800de6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de6e:	f383 8811 	msr	BASEPRI, r3
 800de72:	f3bf 8f6f 	isb	sy
 800de76:	f3bf 8f4f 	dsb	sy
 800de7a:	603b      	str	r3, [r7, #0]
}
 800de7c:	bf00      	nop
 800de7e:	bf00      	nop
 800de80:	e7fd      	b.n	800de7e <xTaskIncrementTick+0x46>
 800de82:	4b41      	ldr	r3, [pc, #260]	@ (800df88 <xTaskIncrementTick+0x150>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	60fb      	str	r3, [r7, #12]
 800de88:	4b40      	ldr	r3, [pc, #256]	@ (800df8c <xTaskIncrementTick+0x154>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a3e      	ldr	r2, [pc, #248]	@ (800df88 <xTaskIncrementTick+0x150>)
 800de8e:	6013      	str	r3, [r2, #0]
 800de90:	4a3e      	ldr	r2, [pc, #248]	@ (800df8c <xTaskIncrementTick+0x154>)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6013      	str	r3, [r2, #0]
 800de96:	4b3e      	ldr	r3, [pc, #248]	@ (800df90 <xTaskIncrementTick+0x158>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	3301      	adds	r3, #1
 800de9c:	4a3c      	ldr	r2, [pc, #240]	@ (800df90 <xTaskIncrementTick+0x158>)
 800de9e:	6013      	str	r3, [r2, #0]
 800dea0:	f000 fad4 	bl	800e44c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dea4:	4b3b      	ldr	r3, [pc, #236]	@ (800df94 <xTaskIncrementTick+0x15c>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	693a      	ldr	r2, [r7, #16]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d349      	bcc.n	800df42 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800deae:	4b36      	ldr	r3, [pc, #216]	@ (800df88 <xTaskIncrementTick+0x150>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d104      	bne.n	800dec2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deb8:	4b36      	ldr	r3, [pc, #216]	@ (800df94 <xTaskIncrementTick+0x15c>)
 800deba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800debe:	601a      	str	r2, [r3, #0]
					break;
 800dec0:	e03f      	b.n	800df42 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dec2:	4b31      	ldr	r3, [pc, #196]	@ (800df88 <xTaskIncrementTick+0x150>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ded2:	693a      	ldr	r2, [r7, #16]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d203      	bcs.n	800dee2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800deda:	4a2e      	ldr	r2, [pc, #184]	@ (800df94 <xTaskIncrementTick+0x15c>)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dee0:	e02f      	b.n	800df42 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	3304      	adds	r3, #4
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fe ff0c 	bl	800cd04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800def0:	2b00      	cmp	r3, #0
 800def2:	d004      	beq.n	800defe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	3318      	adds	r3, #24
 800def8:	4618      	mov	r0, r3
 800defa:	f7fe ff03 	bl	800cd04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df02:	4b25      	ldr	r3, [pc, #148]	@ (800df98 <xTaskIncrementTick+0x160>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	429a      	cmp	r2, r3
 800df08:	d903      	bls.n	800df12 <xTaskIncrementTick+0xda>
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df0e:	4a22      	ldr	r2, [pc, #136]	@ (800df98 <xTaskIncrementTick+0x160>)
 800df10:	6013      	str	r3, [r2, #0]
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df16:	4613      	mov	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	4413      	add	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4a1f      	ldr	r2, [pc, #124]	@ (800df9c <xTaskIncrementTick+0x164>)
 800df20:	441a      	add	r2, r3
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	3304      	adds	r3, #4
 800df26:	4619      	mov	r1, r3
 800df28:	4610      	mov	r0, r2
 800df2a:	f7fe fe8e 	bl	800cc4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df32:	4b1b      	ldr	r3, [pc, #108]	@ (800dfa0 <xTaskIncrementTick+0x168>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df38:	429a      	cmp	r2, r3
 800df3a:	d3b8      	bcc.n	800deae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800df3c:	2301      	movs	r3, #1
 800df3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df40:	e7b5      	b.n	800deae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df42:	4b17      	ldr	r3, [pc, #92]	@ (800dfa0 <xTaskIncrementTick+0x168>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df48:	4914      	ldr	r1, [pc, #80]	@ (800df9c <xTaskIncrementTick+0x164>)
 800df4a:	4613      	mov	r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	4413      	add	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	440b      	add	r3, r1
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b01      	cmp	r3, #1
 800df58:	d901      	bls.n	800df5e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800df5a:	2301      	movs	r3, #1
 800df5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800df5e:	4b11      	ldr	r3, [pc, #68]	@ (800dfa4 <xTaskIncrementTick+0x16c>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d007      	beq.n	800df76 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800df66:	2301      	movs	r3, #1
 800df68:	617b      	str	r3, [r7, #20]
 800df6a:	e004      	b.n	800df76 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800df6c:	4b0e      	ldr	r3, [pc, #56]	@ (800dfa8 <xTaskIncrementTick+0x170>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3301      	adds	r3, #1
 800df72:	4a0d      	ldr	r2, [pc, #52]	@ (800dfa8 <xTaskIncrementTick+0x170>)
 800df74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800df76:	697b      	ldr	r3, [r7, #20]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3718      	adds	r7, #24
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	20001760 	.word	0x20001760
 800df84:	2000173c 	.word	0x2000173c
 800df88:	200016f0 	.word	0x200016f0
 800df8c:	200016f4 	.word	0x200016f4
 800df90:	20001750 	.word	0x20001750
 800df94:	20001758 	.word	0x20001758
 800df98:	20001740 	.word	0x20001740
 800df9c:	20001268 	.word	0x20001268
 800dfa0:	20001264 	.word	0x20001264
 800dfa4:	2000174c 	.word	0x2000174c
 800dfa8:	20001748 	.word	0x20001748

0800dfac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dfb2:	4b28      	ldr	r3, [pc, #160]	@ (800e054 <vTaskSwitchContext+0xa8>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d003      	beq.n	800dfc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dfba:	4b27      	ldr	r3, [pc, #156]	@ (800e058 <vTaskSwitchContext+0xac>)
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dfc0:	e042      	b.n	800e048 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800dfc2:	4b25      	ldr	r3, [pc, #148]	@ (800e058 <vTaskSwitchContext+0xac>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfc8:	4b24      	ldr	r3, [pc, #144]	@ (800e05c <vTaskSwitchContext+0xb0>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	60fb      	str	r3, [r7, #12]
 800dfce:	e011      	b.n	800dff4 <vTaskSwitchContext+0x48>
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d10b      	bne.n	800dfee <vTaskSwitchContext+0x42>
	__asm volatile
 800dfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfda:	f383 8811 	msr	BASEPRI, r3
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	f3bf 8f4f 	dsb	sy
 800dfe6:	607b      	str	r3, [r7, #4]
}
 800dfe8:	bf00      	nop
 800dfea:	bf00      	nop
 800dfec:	e7fd      	b.n	800dfea <vTaskSwitchContext+0x3e>
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	3b01      	subs	r3, #1
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	491a      	ldr	r1, [pc, #104]	@ (800e060 <vTaskSwitchContext+0xb4>)
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	4613      	mov	r3, r2
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	4413      	add	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	440b      	add	r3, r1
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d0e3      	beq.n	800dfd0 <vTaskSwitchContext+0x24>
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	4613      	mov	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	4413      	add	r3, r2
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4a13      	ldr	r2, [pc, #76]	@ (800e060 <vTaskSwitchContext+0xb4>)
 800e014:	4413      	add	r3, r2
 800e016:	60bb      	str	r3, [r7, #8]
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	685a      	ldr	r2, [r3, #4]
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	605a      	str	r2, [r3, #4]
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	685a      	ldr	r2, [r3, #4]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	3308      	adds	r3, #8
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d104      	bne.n	800e038 <vTaskSwitchContext+0x8c>
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	685a      	ldr	r2, [r3, #4]
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	605a      	str	r2, [r3, #4]
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	4a09      	ldr	r2, [pc, #36]	@ (800e064 <vTaskSwitchContext+0xb8>)
 800e040:	6013      	str	r3, [r2, #0]
 800e042:	4a06      	ldr	r2, [pc, #24]	@ (800e05c <vTaskSwitchContext+0xb0>)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6013      	str	r3, [r2, #0]
}
 800e048:	bf00      	nop
 800e04a:	3714      	adds	r7, #20
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	20001760 	.word	0x20001760
 800e058:	2000174c 	.word	0x2000174c
 800e05c:	20001740 	.word	0x20001740
 800e060:	20001268 	.word	0x20001268
 800e064:	20001264 	.word	0x20001264

0800e068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d10b      	bne.n	800e090 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e07c:	f383 8811 	msr	BASEPRI, r3
 800e080:	f3bf 8f6f 	isb	sy
 800e084:	f3bf 8f4f 	dsb	sy
 800e088:	60fb      	str	r3, [r7, #12]
}
 800e08a:	bf00      	nop
 800e08c:	bf00      	nop
 800e08e:	e7fd      	b.n	800e08c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e090:	4b07      	ldr	r3, [pc, #28]	@ (800e0b0 <vTaskPlaceOnEventList+0x48>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	3318      	adds	r3, #24
 800e096:	4619      	mov	r1, r3
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7fe fdfa 	bl	800cc92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e09e:	2101      	movs	r1, #1
 800e0a0:	6838      	ldr	r0, [r7, #0]
 800e0a2:	f000 fa81 	bl	800e5a8 <prvAddCurrentTaskToDelayedList>
}
 800e0a6:	bf00      	nop
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	20001264 	.word	0x20001264

0800e0b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d10b      	bne.n	800e0de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ca:	f383 8811 	msr	BASEPRI, r3
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	617b      	str	r3, [r7, #20]
}
 800e0d8:	bf00      	nop
 800e0da:	bf00      	nop
 800e0dc:	e7fd      	b.n	800e0da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0de:	4b0a      	ldr	r3, [pc, #40]	@ (800e108 <vTaskPlaceOnEventListRestricted+0x54>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3318      	adds	r3, #24
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	68f8      	ldr	r0, [r7, #12]
 800e0e8:	f7fe fdaf 	bl	800cc4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d002      	beq.n	800e0f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e0f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e0f8:	6879      	ldr	r1, [r7, #4]
 800e0fa:	68b8      	ldr	r0, [r7, #8]
 800e0fc:	f000 fa54 	bl	800e5a8 <prvAddCurrentTaskToDelayedList>
	}
 800e100:	bf00      	nop
 800e102:	3718      	adds	r7, #24
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	20001264 	.word	0x20001264

0800e10c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b086      	sub	sp, #24
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d10b      	bne.n	800e13a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	60fb      	str	r3, [r7, #12]
}
 800e134:	bf00      	nop
 800e136:	bf00      	nop
 800e138:	e7fd      	b.n	800e136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	3318      	adds	r3, #24
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fe fde0 	bl	800cd04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e144:	4b1d      	ldr	r3, [pc, #116]	@ (800e1bc <xTaskRemoveFromEventList+0xb0>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d11d      	bne.n	800e188 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	3304      	adds	r3, #4
 800e150:	4618      	mov	r0, r3
 800e152:	f7fe fdd7 	bl	800cd04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e15a:	4b19      	ldr	r3, [pc, #100]	@ (800e1c0 <xTaskRemoveFromEventList+0xb4>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d903      	bls.n	800e16a <xTaskRemoveFromEventList+0x5e>
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e166:	4a16      	ldr	r2, [pc, #88]	@ (800e1c0 <xTaskRemoveFromEventList+0xb4>)
 800e168:	6013      	str	r3, [r2, #0]
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e16e:	4613      	mov	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4413      	add	r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	4a13      	ldr	r2, [pc, #76]	@ (800e1c4 <xTaskRemoveFromEventList+0xb8>)
 800e178:	441a      	add	r2, r3
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	3304      	adds	r3, #4
 800e17e:	4619      	mov	r1, r3
 800e180:	4610      	mov	r0, r2
 800e182:	f7fe fd62 	bl	800cc4a <vListInsertEnd>
 800e186:	e005      	b.n	800e194 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	3318      	adds	r3, #24
 800e18c:	4619      	mov	r1, r3
 800e18e:	480e      	ldr	r0, [pc, #56]	@ (800e1c8 <xTaskRemoveFromEventList+0xbc>)
 800e190:	f7fe fd5b 	bl	800cc4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e198:	4b0c      	ldr	r3, [pc, #48]	@ (800e1cc <xTaskRemoveFromEventList+0xc0>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d905      	bls.n	800e1ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e1a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e1d0 <xTaskRemoveFromEventList+0xc4>)
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	601a      	str	r2, [r3, #0]
 800e1ac:	e001      	b.n	800e1b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e1b2:	697b      	ldr	r3, [r7, #20]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3718      	adds	r7, #24
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	20001760 	.word	0x20001760
 800e1c0:	20001740 	.word	0x20001740
 800e1c4:	20001268 	.word	0x20001268
 800e1c8:	200016f8 	.word	0x200016f8
 800e1cc:	20001264 	.word	0x20001264
 800e1d0:	2000174c 	.word	0x2000174c

0800e1d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1dc:	4b06      	ldr	r3, [pc, #24]	@ (800e1f8 <vTaskInternalSetTimeOutState+0x24>)
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e1e4:	4b05      	ldr	r3, [pc, #20]	@ (800e1fc <vTaskInternalSetTimeOutState+0x28>)
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	605a      	str	r2, [r3, #4]
}
 800e1ec:	bf00      	nop
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr
 800e1f8:	20001750 	.word	0x20001750
 800e1fc:	2000173c 	.word	0x2000173c

0800e200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b088      	sub	sp, #32
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10b      	bne.n	800e228 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e214:	f383 8811 	msr	BASEPRI, r3
 800e218:	f3bf 8f6f 	isb	sy
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	613b      	str	r3, [r7, #16]
}
 800e222:	bf00      	nop
 800e224:	bf00      	nop
 800e226:	e7fd      	b.n	800e224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10b      	bne.n	800e246 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	60fb      	str	r3, [r7, #12]
}
 800e240:	bf00      	nop
 800e242:	bf00      	nop
 800e244:	e7fd      	b.n	800e242 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e246:	f000 fe8f 	bl	800ef68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e24a:	4b1d      	ldr	r3, [pc, #116]	@ (800e2c0 <xTaskCheckForTimeOut+0xc0>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	69ba      	ldr	r2, [r7, #24]
 800e256:	1ad3      	subs	r3, r2, r3
 800e258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e262:	d102      	bne.n	800e26a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e264:	2300      	movs	r3, #0
 800e266:	61fb      	str	r3, [r7, #28]
 800e268:	e023      	b.n	800e2b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	4b15      	ldr	r3, [pc, #84]	@ (800e2c4 <xTaskCheckForTimeOut+0xc4>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	429a      	cmp	r2, r3
 800e274:	d007      	beq.n	800e286 <xTaskCheckForTimeOut+0x86>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	69ba      	ldr	r2, [r7, #24]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d302      	bcc.n	800e286 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e280:	2301      	movs	r3, #1
 800e282:	61fb      	str	r3, [r7, #28]
 800e284:	e015      	b.n	800e2b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	697a      	ldr	r2, [r7, #20]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d20b      	bcs.n	800e2a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	1ad2      	subs	r2, r2, r3
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f7ff ff99 	bl	800e1d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	61fb      	str	r3, [r7, #28]
 800e2a6:	e004      	b.n	800e2b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e2b2:	f000 fe8b 	bl	800efcc <vPortExitCritical>

	return xReturn;
 800e2b6:	69fb      	ldr	r3, [r7, #28]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3720      	adds	r7, #32
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	2000173c 	.word	0x2000173c
 800e2c4:	20001750 	.word	0x20001750

0800e2c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e2cc:	4b03      	ldr	r3, [pc, #12]	@ (800e2dc <vTaskMissedYield+0x14>)
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	601a      	str	r2, [r3, #0]
}
 800e2d2:	bf00      	nop
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr
 800e2dc:	2000174c 	.word	0x2000174c

0800e2e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e2e8:	f000 f852 	bl	800e390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e2ec:	4b06      	ldr	r3, [pc, #24]	@ (800e308 <prvIdleTask+0x28>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d9f9      	bls.n	800e2e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e2f4:	4b05      	ldr	r3, [pc, #20]	@ (800e30c <prvIdleTask+0x2c>)
 800e2f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2fa:	601a      	str	r2, [r3, #0]
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e304:	e7f0      	b.n	800e2e8 <prvIdleTask+0x8>
 800e306:	bf00      	nop
 800e308:	20001268 	.word	0x20001268
 800e30c:	e000ed04 	.word	0xe000ed04

0800e310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e316:	2300      	movs	r3, #0
 800e318:	607b      	str	r3, [r7, #4]
 800e31a:	e00c      	b.n	800e336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	4613      	mov	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	4413      	add	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4a12      	ldr	r2, [pc, #72]	@ (800e370 <prvInitialiseTaskLists+0x60>)
 800e328:	4413      	add	r3, r2
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fe fc60 	bl	800cbf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	3301      	adds	r3, #1
 800e334:	607b      	str	r3, [r7, #4]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2b37      	cmp	r3, #55	@ 0x37
 800e33a:	d9ef      	bls.n	800e31c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e33c:	480d      	ldr	r0, [pc, #52]	@ (800e374 <prvInitialiseTaskLists+0x64>)
 800e33e:	f7fe fc57 	bl	800cbf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e342:	480d      	ldr	r0, [pc, #52]	@ (800e378 <prvInitialiseTaskLists+0x68>)
 800e344:	f7fe fc54 	bl	800cbf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e348:	480c      	ldr	r0, [pc, #48]	@ (800e37c <prvInitialiseTaskLists+0x6c>)
 800e34a:	f7fe fc51 	bl	800cbf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e34e:	480c      	ldr	r0, [pc, #48]	@ (800e380 <prvInitialiseTaskLists+0x70>)
 800e350:	f7fe fc4e 	bl	800cbf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e354:	480b      	ldr	r0, [pc, #44]	@ (800e384 <prvInitialiseTaskLists+0x74>)
 800e356:	f7fe fc4b 	bl	800cbf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e35a:	4b0b      	ldr	r3, [pc, #44]	@ (800e388 <prvInitialiseTaskLists+0x78>)
 800e35c:	4a05      	ldr	r2, [pc, #20]	@ (800e374 <prvInitialiseTaskLists+0x64>)
 800e35e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e360:	4b0a      	ldr	r3, [pc, #40]	@ (800e38c <prvInitialiseTaskLists+0x7c>)
 800e362:	4a05      	ldr	r2, [pc, #20]	@ (800e378 <prvInitialiseTaskLists+0x68>)
 800e364:	601a      	str	r2, [r3, #0]
}
 800e366:	bf00      	nop
 800e368:	3708      	adds	r7, #8
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	20001268 	.word	0x20001268
 800e374:	200016c8 	.word	0x200016c8
 800e378:	200016dc 	.word	0x200016dc
 800e37c:	200016f8 	.word	0x200016f8
 800e380:	2000170c 	.word	0x2000170c
 800e384:	20001724 	.word	0x20001724
 800e388:	200016f0 	.word	0x200016f0
 800e38c:	200016f4 	.word	0x200016f4

0800e390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e396:	e019      	b.n	800e3cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e398:	f000 fde6 	bl	800ef68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e39c:	4b10      	ldr	r3, [pc, #64]	@ (800e3e0 <prvCheckTasksWaitingTermination+0x50>)
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	3304      	adds	r3, #4
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7fe fcab 	bl	800cd04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e3e4 <prvCheckTasksWaitingTermination+0x54>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	3b01      	subs	r3, #1
 800e3b4:	4a0b      	ldr	r2, [pc, #44]	@ (800e3e4 <prvCheckTasksWaitingTermination+0x54>)
 800e3b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e3b8:	4b0b      	ldr	r3, [pc, #44]	@ (800e3e8 <prvCheckTasksWaitingTermination+0x58>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	4a0a      	ldr	r2, [pc, #40]	@ (800e3e8 <prvCheckTasksWaitingTermination+0x58>)
 800e3c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e3c2:	f000 fe03 	bl	800efcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 f810 	bl	800e3ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3cc:	4b06      	ldr	r3, [pc, #24]	@ (800e3e8 <prvCheckTasksWaitingTermination+0x58>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d1e1      	bne.n	800e398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e3d4:	bf00      	nop
 800e3d6:	bf00      	nop
 800e3d8:	3708      	adds	r7, #8
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	2000170c 	.word	0x2000170c
 800e3e4:	20001738 	.word	0x20001738
 800e3e8:	20001720 	.word	0x20001720

0800e3ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d108      	bne.n	800e410 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e402:	4618      	mov	r0, r3
 800e404:	f000 ffa0 	bl	800f348 <vPortFree>
				vPortFree( pxTCB );
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 ff9d 	bl	800f348 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e40e:	e019      	b.n	800e444 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e416:	2b01      	cmp	r3, #1
 800e418:	d103      	bne.n	800e422 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 ff94 	bl	800f348 <vPortFree>
	}
 800e420:	e010      	b.n	800e444 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e428:	2b02      	cmp	r3, #2
 800e42a:	d00b      	beq.n	800e444 <prvDeleteTCB+0x58>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	60fb      	str	r3, [r7, #12]
}
 800e43e:	bf00      	nop
 800e440:	bf00      	nop
 800e442:	e7fd      	b.n	800e440 <prvDeleteTCB+0x54>
	}
 800e444:	bf00      	nop
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e452:	4b0c      	ldr	r3, [pc, #48]	@ (800e484 <prvResetNextTaskUnblockTime+0x38>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d104      	bne.n	800e466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e45c:	4b0a      	ldr	r3, [pc, #40]	@ (800e488 <prvResetNextTaskUnblockTime+0x3c>)
 800e45e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e462:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e464:	e008      	b.n	800e478 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e466:	4b07      	ldr	r3, [pc, #28]	@ (800e484 <prvResetNextTaskUnblockTime+0x38>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	4a04      	ldr	r2, [pc, #16]	@ (800e488 <prvResetNextTaskUnblockTime+0x3c>)
 800e476:	6013      	str	r3, [r2, #0]
}
 800e478:	bf00      	nop
 800e47a:	370c      	adds	r7, #12
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr
 800e484:	200016f0 	.word	0x200016f0
 800e488:	20001758 	.word	0x20001758

0800e48c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e492:	4b0b      	ldr	r3, [pc, #44]	@ (800e4c0 <xTaskGetSchedulerState+0x34>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d102      	bne.n	800e4a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e49a:	2301      	movs	r3, #1
 800e49c:	607b      	str	r3, [r7, #4]
 800e49e:	e008      	b.n	800e4b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4a0:	4b08      	ldr	r3, [pc, #32]	@ (800e4c4 <xTaskGetSchedulerState+0x38>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d102      	bne.n	800e4ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e4a8:	2302      	movs	r3, #2
 800e4aa:	607b      	str	r3, [r7, #4]
 800e4ac:	e001      	b.n	800e4b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e4b2:	687b      	ldr	r3, [r7, #4]
	}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	20001744 	.word	0x20001744
 800e4c4:	20001760 	.word	0x20001760

0800e4c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b086      	sub	sp, #24
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d058      	beq.n	800e590 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e4de:	4b2f      	ldr	r3, [pc, #188]	@ (800e59c <xTaskPriorityDisinherit+0xd4>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	693a      	ldr	r2, [r7, #16]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d00b      	beq.n	800e500 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ec:	f383 8811 	msr	BASEPRI, r3
 800e4f0:	f3bf 8f6f 	isb	sy
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	60fb      	str	r3, [r7, #12]
}
 800e4fa:	bf00      	nop
 800e4fc:	bf00      	nop
 800e4fe:	e7fd      	b.n	800e4fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e504:	2b00      	cmp	r3, #0
 800e506:	d10b      	bne.n	800e520 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e50c:	f383 8811 	msr	BASEPRI, r3
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	60bb      	str	r3, [r7, #8]
}
 800e51a:	bf00      	nop
 800e51c:	bf00      	nop
 800e51e:	e7fd      	b.n	800e51c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e524:	1e5a      	subs	r2, r3, #1
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e532:	429a      	cmp	r2, r3
 800e534:	d02c      	beq.n	800e590 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d128      	bne.n	800e590 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	3304      	adds	r3, #4
 800e542:	4618      	mov	r0, r3
 800e544:	f7fe fbde 	bl	800cd04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e554:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e560:	4b0f      	ldr	r3, [pc, #60]	@ (800e5a0 <xTaskPriorityDisinherit+0xd8>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	429a      	cmp	r2, r3
 800e566:	d903      	bls.n	800e570 <xTaskPriorityDisinherit+0xa8>
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e56c:	4a0c      	ldr	r2, [pc, #48]	@ (800e5a0 <xTaskPriorityDisinherit+0xd8>)
 800e56e:	6013      	str	r3, [r2, #0]
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e574:	4613      	mov	r3, r2
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	4413      	add	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	4a09      	ldr	r2, [pc, #36]	@ (800e5a4 <xTaskPriorityDisinherit+0xdc>)
 800e57e:	441a      	add	r2, r3
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	3304      	adds	r3, #4
 800e584:	4619      	mov	r1, r3
 800e586:	4610      	mov	r0, r2
 800e588:	f7fe fb5f 	bl	800cc4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e58c:	2301      	movs	r3, #1
 800e58e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e590:	697b      	ldr	r3, [r7, #20]
	}
 800e592:	4618      	mov	r0, r3
 800e594:	3718      	adds	r7, #24
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	20001264 	.word	0x20001264
 800e5a0:	20001740 	.word	0x20001740
 800e5a4:	20001268 	.word	0x20001268

0800e5a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e5b2:	4b21      	ldr	r3, [pc, #132]	@ (800e638 <prvAddCurrentTaskToDelayedList+0x90>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5b8:	4b20      	ldr	r3, [pc, #128]	@ (800e63c <prvAddCurrentTaskToDelayedList+0x94>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	3304      	adds	r3, #4
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe fba0 	bl	800cd04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5ca:	d10a      	bne.n	800e5e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d007      	beq.n	800e5e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5d2:	4b1a      	ldr	r3, [pc, #104]	@ (800e63c <prvAddCurrentTaskToDelayedList+0x94>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	3304      	adds	r3, #4
 800e5d8:	4619      	mov	r1, r3
 800e5da:	4819      	ldr	r0, [pc, #100]	@ (800e640 <prvAddCurrentTaskToDelayedList+0x98>)
 800e5dc:	f7fe fb35 	bl	800cc4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e5e0:	e026      	b.n	800e630 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5e2:	68fa      	ldr	r2, [r7, #12]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5ea:	4b14      	ldr	r3, [pc, #80]	@ (800e63c <prvAddCurrentTaskToDelayedList+0x94>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	68ba      	ldr	r2, [r7, #8]
 800e5f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5f2:	68ba      	ldr	r2, [r7, #8]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d209      	bcs.n	800e60e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5fa:	4b12      	ldr	r3, [pc, #72]	@ (800e644 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	4b0f      	ldr	r3, [pc, #60]	@ (800e63c <prvAddCurrentTaskToDelayedList+0x94>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	3304      	adds	r3, #4
 800e604:	4619      	mov	r1, r3
 800e606:	4610      	mov	r0, r2
 800e608:	f7fe fb43 	bl	800cc92 <vListInsert>
}
 800e60c:	e010      	b.n	800e630 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e60e:	4b0e      	ldr	r3, [pc, #56]	@ (800e648 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	4b0a      	ldr	r3, [pc, #40]	@ (800e63c <prvAddCurrentTaskToDelayedList+0x94>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	3304      	adds	r3, #4
 800e618:	4619      	mov	r1, r3
 800e61a:	4610      	mov	r0, r2
 800e61c:	f7fe fb39 	bl	800cc92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e620:	4b0a      	ldr	r3, [pc, #40]	@ (800e64c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	68ba      	ldr	r2, [r7, #8]
 800e626:	429a      	cmp	r2, r3
 800e628:	d202      	bcs.n	800e630 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e62a:	4a08      	ldr	r2, [pc, #32]	@ (800e64c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	6013      	str	r3, [r2, #0]
}
 800e630:	bf00      	nop
 800e632:	3710      	adds	r7, #16
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	2000173c 	.word	0x2000173c
 800e63c:	20001264 	.word	0x20001264
 800e640:	20001724 	.word	0x20001724
 800e644:	200016f4 	.word	0x200016f4
 800e648:	200016f0 	.word	0x200016f0
 800e64c:	20001758 	.word	0x20001758

0800e650 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b08a      	sub	sp, #40	@ 0x28
 800e654:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e656:	2300      	movs	r3, #0
 800e658:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e65a:	f000 fb13 	bl	800ec84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e65e:	4b1d      	ldr	r3, [pc, #116]	@ (800e6d4 <xTimerCreateTimerTask+0x84>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d021      	beq.n	800e6aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e666:	2300      	movs	r3, #0
 800e668:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e66a:	2300      	movs	r3, #0
 800e66c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e66e:	1d3a      	adds	r2, r7, #4
 800e670:	f107 0108 	add.w	r1, r7, #8
 800e674:	f107 030c 	add.w	r3, r7, #12
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fe fa9f 	bl	800cbbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e67e:	6879      	ldr	r1, [r7, #4]
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	9202      	str	r2, [sp, #8]
 800e686:	9301      	str	r3, [sp, #4]
 800e688:	2302      	movs	r3, #2
 800e68a:	9300      	str	r3, [sp, #0]
 800e68c:	2300      	movs	r3, #0
 800e68e:	460a      	mov	r2, r1
 800e690:	4911      	ldr	r1, [pc, #68]	@ (800e6d8 <xTimerCreateTimerTask+0x88>)
 800e692:	4812      	ldr	r0, [pc, #72]	@ (800e6dc <xTimerCreateTimerTask+0x8c>)
 800e694:	f7ff f85a 	bl	800d74c <xTaskCreateStatic>
 800e698:	4603      	mov	r3, r0
 800e69a:	4a11      	ldr	r2, [pc, #68]	@ (800e6e0 <xTimerCreateTimerTask+0x90>)
 800e69c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e69e:	4b10      	ldr	r3, [pc, #64]	@ (800e6e0 <xTimerCreateTimerTask+0x90>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d001      	beq.n	800e6aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d10b      	bne.n	800e6c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6b4:	f383 8811 	msr	BASEPRI, r3
 800e6b8:	f3bf 8f6f 	isb	sy
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	613b      	str	r3, [r7, #16]
}
 800e6c2:	bf00      	nop
 800e6c4:	bf00      	nop
 800e6c6:	e7fd      	b.n	800e6c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e6c8:	697b      	ldr	r3, [r7, #20]
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3718      	adds	r7, #24
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20001794 	.word	0x20001794
 800e6d8:	08013168 	.word	0x08013168
 800e6dc:	0800e81d 	.word	0x0800e81d
 800e6e0:	20001798 	.word	0x20001798

0800e6e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b08a      	sub	sp, #40	@ 0x28
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	607a      	str	r2, [r7, #4]
 800e6f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d10b      	bne.n	800e714 <xTimerGenericCommand+0x30>
	__asm volatile
 800e6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e700:	f383 8811 	msr	BASEPRI, r3
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	623b      	str	r3, [r7, #32]
}
 800e70e:	bf00      	nop
 800e710:	bf00      	nop
 800e712:	e7fd      	b.n	800e710 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e714:	4b19      	ldr	r3, [pc, #100]	@ (800e77c <xTimerGenericCommand+0x98>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d02a      	beq.n	800e772 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	2b05      	cmp	r3, #5
 800e72c:	dc18      	bgt.n	800e760 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e72e:	f7ff fead 	bl	800e48c <xTaskGetSchedulerState>
 800e732:	4603      	mov	r3, r0
 800e734:	2b02      	cmp	r3, #2
 800e736:	d109      	bne.n	800e74c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e738:	4b10      	ldr	r3, [pc, #64]	@ (800e77c <xTimerGenericCommand+0x98>)
 800e73a:	6818      	ldr	r0, [r3, #0]
 800e73c:	f107 0110 	add.w	r1, r7, #16
 800e740:	2300      	movs	r3, #0
 800e742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e744:	f7fe fc12 	bl	800cf6c <xQueueGenericSend>
 800e748:	6278      	str	r0, [r7, #36]	@ 0x24
 800e74a:	e012      	b.n	800e772 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e74c:	4b0b      	ldr	r3, [pc, #44]	@ (800e77c <xTimerGenericCommand+0x98>)
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	f107 0110 	add.w	r1, r7, #16
 800e754:	2300      	movs	r3, #0
 800e756:	2200      	movs	r2, #0
 800e758:	f7fe fc08 	bl	800cf6c <xQueueGenericSend>
 800e75c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e75e:	e008      	b.n	800e772 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e760:	4b06      	ldr	r3, [pc, #24]	@ (800e77c <xTimerGenericCommand+0x98>)
 800e762:	6818      	ldr	r0, [r3, #0]
 800e764:	f107 0110 	add.w	r1, r7, #16
 800e768:	2300      	movs	r3, #0
 800e76a:	683a      	ldr	r2, [r7, #0]
 800e76c:	f7fe fd00 	bl	800d170 <xQueueGenericSendFromISR>
 800e770:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e774:	4618      	mov	r0, r3
 800e776:	3728      	adds	r7, #40	@ 0x28
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	20001794 	.word	0x20001794

0800e780 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b088      	sub	sp, #32
 800e784:	af02      	add	r7, sp, #8
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e78a:	4b23      	ldr	r3, [pc, #140]	@ (800e818 <prvProcessExpiredTimer+0x98>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	3304      	adds	r3, #4
 800e798:	4618      	mov	r0, r3
 800e79a:	f7fe fab3 	bl	800cd04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7a4:	f003 0304 	and.w	r3, r3, #4
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d023      	beq.n	800e7f4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	699a      	ldr	r2, [r3, #24]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	18d1      	adds	r1, r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	683a      	ldr	r2, [r7, #0]
 800e7b8:	6978      	ldr	r0, [r7, #20]
 800e7ba:	f000 f8d5 	bl	800e968 <prvInsertTimerInActiveList>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d020      	beq.n	800e806 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	2100      	movs	r1, #0
 800e7ce:	6978      	ldr	r0, [r7, #20]
 800e7d0:	f7ff ff88 	bl	800e6e4 <xTimerGenericCommand>
 800e7d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d114      	bne.n	800e806 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	60fb      	str	r3, [r7, #12]
}
 800e7ee:	bf00      	nop
 800e7f0:	bf00      	nop
 800e7f2:	e7fd      	b.n	800e7f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7fa:	f023 0301 	bic.w	r3, r3, #1
 800e7fe:	b2da      	uxtb	r2, r3
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	6a1b      	ldr	r3, [r3, #32]
 800e80a:	6978      	ldr	r0, [r7, #20]
 800e80c:	4798      	blx	r3
}
 800e80e:	bf00      	nop
 800e810:	3718      	adds	r7, #24
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	2000178c 	.word	0x2000178c

0800e81c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e824:	f107 0308 	add.w	r3, r7, #8
 800e828:	4618      	mov	r0, r3
 800e82a:	f000 f859 	bl	800e8e0 <prvGetNextExpireTime>
 800e82e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	4619      	mov	r1, r3
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f000 f805 	bl	800e844 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e83a:	f000 f8d7 	bl	800e9ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e83e:	bf00      	nop
 800e840:	e7f0      	b.n	800e824 <prvTimerTask+0x8>
	...

0800e844 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e84e:	f7ff fa37 	bl	800dcc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e852:	f107 0308 	add.w	r3, r7, #8
 800e856:	4618      	mov	r0, r3
 800e858:	f000 f866 	bl	800e928 <prvSampleTimeNow>
 800e85c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d130      	bne.n	800e8c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d10a      	bne.n	800e880 <prvProcessTimerOrBlockTask+0x3c>
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d806      	bhi.n	800e880 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e872:	f7ff fa33 	bl	800dcdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e876:	68f9      	ldr	r1, [r7, #12]
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f7ff ff81 	bl	800e780 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e87e:	e024      	b.n	800e8ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d008      	beq.n	800e898 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e886:	4b13      	ldr	r3, [pc, #76]	@ (800e8d4 <prvProcessTimerOrBlockTask+0x90>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d101      	bne.n	800e894 <prvProcessTimerOrBlockTask+0x50>
 800e890:	2301      	movs	r3, #1
 800e892:	e000      	b.n	800e896 <prvProcessTimerOrBlockTask+0x52>
 800e894:	2300      	movs	r3, #0
 800e896:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e898:	4b0f      	ldr	r3, [pc, #60]	@ (800e8d8 <prvProcessTimerOrBlockTask+0x94>)
 800e89a:	6818      	ldr	r0, [r3, #0]
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	1ad3      	subs	r3, r2, r3
 800e8a2:	683a      	ldr	r2, [r7, #0]
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	f7fe ff1d 	bl	800d6e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e8aa:	f7ff fa17 	bl	800dcdc <xTaskResumeAll>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10a      	bne.n	800e8ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e8b4:	4b09      	ldr	r3, [pc, #36]	@ (800e8dc <prvProcessTimerOrBlockTask+0x98>)
 800e8b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8ba:	601a      	str	r2, [r3, #0]
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	f3bf 8f6f 	isb	sy
}
 800e8c4:	e001      	b.n	800e8ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e8c6:	f7ff fa09 	bl	800dcdc <xTaskResumeAll>
}
 800e8ca:	bf00      	nop
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	20001790 	.word	0x20001790
 800e8d8:	20001794 	.word	0x20001794
 800e8dc:	e000ed04 	.word	0xe000ed04

0800e8e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800e924 <prvGetNextExpireTime+0x44>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <prvGetNextExpireTime+0x16>
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	e000      	b.n	800e8f8 <prvGetNextExpireTime+0x18>
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d105      	bne.n	800e910 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e904:	4b07      	ldr	r3, [pc, #28]	@ (800e924 <prvGetNextExpireTime+0x44>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	60fb      	str	r3, [r7, #12]
 800e90e:	e001      	b.n	800e914 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e910:	2300      	movs	r3, #0
 800e912:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e914:	68fb      	ldr	r3, [r7, #12]
}
 800e916:	4618      	mov	r0, r3
 800e918:	3714      	adds	r7, #20
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	2000178c 	.word	0x2000178c

0800e928 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e930:	f7ff fa72 	bl	800de18 <xTaskGetTickCount>
 800e934:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e936:	4b0b      	ldr	r3, [pc, #44]	@ (800e964 <prvSampleTimeNow+0x3c>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d205      	bcs.n	800e94c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e940:	f000 f93a 	bl	800ebb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	601a      	str	r2, [r3, #0]
 800e94a:	e002      	b.n	800e952 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e952:	4a04      	ldr	r2, [pc, #16]	@ (800e964 <prvSampleTimeNow+0x3c>)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e958:	68fb      	ldr	r3, [r7, #12]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	2000179c 	.word	0x2000179c

0800e968 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b086      	sub	sp, #24
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
 800e974:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e976:	2300      	movs	r3, #0
 800e978:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	68ba      	ldr	r2, [r7, #8]
 800e97e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d812      	bhi.n	800e9b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	1ad2      	subs	r2, r2, r3
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	699b      	ldr	r3, [r3, #24]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d302      	bcc.n	800e9a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e99c:	2301      	movs	r3, #1
 800e99e:	617b      	str	r3, [r7, #20]
 800e9a0:	e01b      	b.n	800e9da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e9a2:	4b10      	ldr	r3, [pc, #64]	@ (800e9e4 <prvInsertTimerInActiveList+0x7c>)
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	3304      	adds	r3, #4
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	4610      	mov	r0, r2
 800e9ae:	f7fe f970 	bl	800cc92 <vListInsert>
 800e9b2:	e012      	b.n	800e9da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d206      	bcs.n	800e9ca <prvInsertTimerInActiveList+0x62>
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d302      	bcc.n	800e9ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	617b      	str	r3, [r7, #20]
 800e9c8:	e007      	b.n	800e9da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e9ca:	4b07      	ldr	r3, [pc, #28]	@ (800e9e8 <prvInsertTimerInActiveList+0x80>)
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	3304      	adds	r3, #4
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	4610      	mov	r0, r2
 800e9d6:	f7fe f95c 	bl	800cc92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e9da:	697b      	ldr	r3, [r7, #20]
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3718      	adds	r7, #24
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	20001790 	.word	0x20001790
 800e9e8:	2000178c 	.word	0x2000178c

0800e9ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b08e      	sub	sp, #56	@ 0x38
 800e9f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9f2:	e0ce      	b.n	800eb92 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	da19      	bge.n	800ea2e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e9fa:	1d3b      	adds	r3, r7, #4
 800e9fc:	3304      	adds	r3, #4
 800e9fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ea00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d10b      	bne.n	800ea1e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ea06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea0a:	f383 8811 	msr	BASEPRI, r3
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	61fb      	str	r3, [r7, #28]
}
 800ea18:	bf00      	nop
 800ea1a:	bf00      	nop
 800ea1c:	e7fd      	b.n	800ea1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ea1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea24:	6850      	ldr	r0, [r2, #4]
 800ea26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea28:	6892      	ldr	r2, [r2, #8]
 800ea2a:	4611      	mov	r1, r2
 800ea2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	f2c0 80ae 	blt.w	800eb92 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ea3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea3c:	695b      	ldr	r3, [r3, #20]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d004      	beq.n	800ea4c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea44:	3304      	adds	r3, #4
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fe f95c 	bl	800cd04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea4c:	463b      	mov	r3, r7
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7ff ff6a 	bl	800e928 <prvSampleTimeNow>
 800ea54:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2b09      	cmp	r3, #9
 800ea5a:	f200 8097 	bhi.w	800eb8c <prvProcessReceivedCommands+0x1a0>
 800ea5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ea64 <prvProcessReceivedCommands+0x78>)
 800ea60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea64:	0800ea8d 	.word	0x0800ea8d
 800ea68:	0800ea8d 	.word	0x0800ea8d
 800ea6c:	0800ea8d 	.word	0x0800ea8d
 800ea70:	0800eb03 	.word	0x0800eb03
 800ea74:	0800eb17 	.word	0x0800eb17
 800ea78:	0800eb63 	.word	0x0800eb63
 800ea7c:	0800ea8d 	.word	0x0800ea8d
 800ea80:	0800ea8d 	.word	0x0800ea8d
 800ea84:	0800eb03 	.word	0x0800eb03
 800ea88:	0800eb17 	.word	0x0800eb17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea92:	f043 0301 	orr.w	r3, r3, #1
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ea9e:	68ba      	ldr	r2, [r7, #8]
 800eaa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa2:	699b      	ldr	r3, [r3, #24]
 800eaa4:	18d1      	adds	r1, r2, r3
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eaaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eaac:	f7ff ff5c 	bl	800e968 <prvInsertTimerInActiveList>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d06c      	beq.n	800eb90 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab8:	6a1b      	ldr	r3, [r3, #32]
 800eaba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eabc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eac4:	f003 0304 	and.w	r3, r3, #4
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d061      	beq.n	800eb90 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead0:	699b      	ldr	r3, [r3, #24]
 800ead2:	441a      	add	r2, r3
 800ead4:	2300      	movs	r3, #0
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	2300      	movs	r3, #0
 800eada:	2100      	movs	r1, #0
 800eadc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eade:	f7ff fe01 	bl	800e6e4 <xTimerGenericCommand>
 800eae2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d152      	bne.n	800eb90 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eaea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaee:	f383 8811 	msr	BASEPRI, r3
 800eaf2:	f3bf 8f6f 	isb	sy
 800eaf6:	f3bf 8f4f 	dsb	sy
 800eafa:	61bb      	str	r3, [r7, #24]
}
 800eafc:	bf00      	nop
 800eafe:	bf00      	nop
 800eb00:	e7fd      	b.n	800eafe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb08:	f023 0301 	bic.w	r3, r3, #1
 800eb0c:	b2da      	uxtb	r2, r3
 800eb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eb14:	e03d      	b.n	800eb92 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb1c:	f043 0301 	orr.w	r3, r3, #1
 800eb20:	b2da      	uxtb	r2, r3
 800eb22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb30:	699b      	ldr	r3, [r3, #24]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d10b      	bne.n	800eb4e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800eb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb3a:	f383 8811 	msr	BASEPRI, r3
 800eb3e:	f3bf 8f6f 	isb	sy
 800eb42:	f3bf 8f4f 	dsb	sy
 800eb46:	617b      	str	r3, [r7, #20]
}
 800eb48:	bf00      	nop
 800eb4a:	bf00      	nop
 800eb4c:	e7fd      	b.n	800eb4a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb50:	699a      	ldr	r2, [r3, #24]
 800eb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb54:	18d1      	adds	r1, r2, r3
 800eb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb5c:	f7ff ff04 	bl	800e968 <prvInsertTimerInActiveList>
					break;
 800eb60:	e017      	b.n	800eb92 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb68:	f003 0302 	and.w	r3, r3, #2
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d103      	bne.n	800eb78 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800eb70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb72:	f000 fbe9 	bl	800f348 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eb76:	e00c      	b.n	800eb92 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb7e:	f023 0301 	bic.w	r3, r3, #1
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eb8a:	e002      	b.n	800eb92 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800eb8c:	bf00      	nop
 800eb8e:	e000      	b.n	800eb92 <prvProcessReceivedCommands+0x1a6>
					break;
 800eb90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb92:	4b08      	ldr	r3, [pc, #32]	@ (800ebb4 <prvProcessReceivedCommands+0x1c8>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	1d39      	adds	r1, r7, #4
 800eb98:	2200      	movs	r2, #0
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fe fb86 	bl	800d2ac <xQueueReceive>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f47f af26 	bne.w	800e9f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800eba8:	bf00      	nop
 800ebaa:	bf00      	nop
 800ebac:	3730      	adds	r7, #48	@ 0x30
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	20001794 	.word	0x20001794

0800ebb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b088      	sub	sp, #32
 800ebbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ebbe:	e049      	b.n	800ec54 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebc0:	4b2e      	ldr	r3, [pc, #184]	@ (800ec7c <prvSwitchTimerLists+0xc4>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebca:	4b2c      	ldr	r3, [pc, #176]	@ (800ec7c <prvSwitchTimerLists+0xc4>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	68db      	ldr	r3, [r3, #12]
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7fe f893 	bl	800cd04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	6a1b      	ldr	r3, [r3, #32]
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebec:	f003 0304 	and.w	r3, r3, #4
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d02f      	beq.n	800ec54 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	699b      	ldr	r3, [r3, #24]
 800ebf8:	693a      	ldr	r2, [r7, #16]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ebfe:	68ba      	ldr	r2, [r7, #8]
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d90e      	bls.n	800ec24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	68ba      	ldr	r2, [r7, #8]
 800ec0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	68fa      	ldr	r2, [r7, #12]
 800ec10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec12:	4b1a      	ldr	r3, [pc, #104]	@ (800ec7c <prvSwitchTimerLists+0xc4>)
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	3304      	adds	r3, #4
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	4610      	mov	r0, r2
 800ec1e:	f7fe f838 	bl	800cc92 <vListInsert>
 800ec22:	e017      	b.n	800ec54 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ec24:	2300      	movs	r3, #0
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	2300      	movs	r3, #0
 800ec2a:	693a      	ldr	r2, [r7, #16]
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f7ff fd58 	bl	800e6e4 <xTimerGenericCommand>
 800ec34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d10b      	bne.n	800ec54 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ec3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec40:	f383 8811 	msr	BASEPRI, r3
 800ec44:	f3bf 8f6f 	isb	sy
 800ec48:	f3bf 8f4f 	dsb	sy
 800ec4c:	603b      	str	r3, [r7, #0]
}
 800ec4e:	bf00      	nop
 800ec50:	bf00      	nop
 800ec52:	e7fd      	b.n	800ec50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec54:	4b09      	ldr	r3, [pc, #36]	@ (800ec7c <prvSwitchTimerLists+0xc4>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1b0      	bne.n	800ebc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ec5e:	4b07      	ldr	r3, [pc, #28]	@ (800ec7c <prvSwitchTimerLists+0xc4>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ec64:	4b06      	ldr	r3, [pc, #24]	@ (800ec80 <prvSwitchTimerLists+0xc8>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a04      	ldr	r2, [pc, #16]	@ (800ec7c <prvSwitchTimerLists+0xc4>)
 800ec6a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ec6c:	4a04      	ldr	r2, [pc, #16]	@ (800ec80 <prvSwitchTimerLists+0xc8>)
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	6013      	str	r3, [r2, #0]
}
 800ec72:	bf00      	nop
 800ec74:	3718      	adds	r7, #24
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	2000178c 	.word	0x2000178c
 800ec80:	20001790 	.word	0x20001790

0800ec84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ec8a:	f000 f96d 	bl	800ef68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ec8e:	4b15      	ldr	r3, [pc, #84]	@ (800ece4 <prvCheckForValidListAndQueue+0x60>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d120      	bne.n	800ecd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ec96:	4814      	ldr	r0, [pc, #80]	@ (800ece8 <prvCheckForValidListAndQueue+0x64>)
 800ec98:	f7fd ffaa 	bl	800cbf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ec9c:	4813      	ldr	r0, [pc, #76]	@ (800ecec <prvCheckForValidListAndQueue+0x68>)
 800ec9e:	f7fd ffa7 	bl	800cbf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eca2:	4b13      	ldr	r3, [pc, #76]	@ (800ecf0 <prvCheckForValidListAndQueue+0x6c>)
 800eca4:	4a10      	ldr	r2, [pc, #64]	@ (800ece8 <prvCheckForValidListAndQueue+0x64>)
 800eca6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eca8:	4b12      	ldr	r3, [pc, #72]	@ (800ecf4 <prvCheckForValidListAndQueue+0x70>)
 800ecaa:	4a10      	ldr	r2, [pc, #64]	@ (800ecec <prvCheckForValidListAndQueue+0x68>)
 800ecac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ecae:	2300      	movs	r3, #0
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	4b11      	ldr	r3, [pc, #68]	@ (800ecf8 <prvCheckForValidListAndQueue+0x74>)
 800ecb4:	4a11      	ldr	r2, [pc, #68]	@ (800ecfc <prvCheckForValidListAndQueue+0x78>)
 800ecb6:	2110      	movs	r1, #16
 800ecb8:	200a      	movs	r0, #10
 800ecba:	f7fe f8b7 	bl	800ce2c <xQueueGenericCreateStatic>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	4a08      	ldr	r2, [pc, #32]	@ (800ece4 <prvCheckForValidListAndQueue+0x60>)
 800ecc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ecc4:	4b07      	ldr	r3, [pc, #28]	@ (800ece4 <prvCheckForValidListAndQueue+0x60>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d005      	beq.n	800ecd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eccc:	4b05      	ldr	r3, [pc, #20]	@ (800ece4 <prvCheckForValidListAndQueue+0x60>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	490b      	ldr	r1, [pc, #44]	@ (800ed00 <prvCheckForValidListAndQueue+0x7c>)
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fe fcdc 	bl	800d690 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ecd8:	f000 f978 	bl	800efcc <vPortExitCritical>
}
 800ecdc:	bf00      	nop
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	20001794 	.word	0x20001794
 800ece8:	20001764 	.word	0x20001764
 800ecec:	20001778 	.word	0x20001778
 800ecf0:	2000178c 	.word	0x2000178c
 800ecf4:	20001790 	.word	0x20001790
 800ecf8:	20001840 	.word	0x20001840
 800ecfc:	200017a0 	.word	0x200017a0
 800ed00:	08013170 	.word	0x08013170

0800ed04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ed04:	b480      	push	{r7}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	3b04      	subs	r3, #4
 800ed14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ed1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	3b04      	subs	r3, #4
 800ed22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	f023 0201 	bic.w	r2, r3, #1
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	3b04      	subs	r3, #4
 800ed32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ed34:	4a0c      	ldr	r2, [pc, #48]	@ (800ed68 <pxPortInitialiseStack+0x64>)
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	3b14      	subs	r3, #20
 800ed3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	3b04      	subs	r3, #4
 800ed4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f06f 0202 	mvn.w	r2, #2
 800ed52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3b20      	subs	r3, #32
 800ed58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3714      	adds	r7, #20
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr
 800ed68:	0800ed6d 	.word	0x0800ed6d

0800ed6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b085      	sub	sp, #20
 800ed70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ed72:	2300      	movs	r3, #0
 800ed74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ed76:	4b13      	ldr	r3, [pc, #76]	@ (800edc4 <prvTaskExitError+0x58>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed7e:	d00b      	beq.n	800ed98 <prvTaskExitError+0x2c>
	__asm volatile
 800ed80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed84:	f383 8811 	msr	BASEPRI, r3
 800ed88:	f3bf 8f6f 	isb	sy
 800ed8c:	f3bf 8f4f 	dsb	sy
 800ed90:	60fb      	str	r3, [r7, #12]
}
 800ed92:	bf00      	nop
 800ed94:	bf00      	nop
 800ed96:	e7fd      	b.n	800ed94 <prvTaskExitError+0x28>
	__asm volatile
 800ed98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	60bb      	str	r3, [r7, #8]
}
 800edaa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800edac:	bf00      	nop
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d0fc      	beq.n	800edae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800edb4:	bf00      	nop
 800edb6:	bf00      	nop
 800edb8:	3714      	adds	r7, #20
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop
 800edc4:	20000154 	.word	0x20000154
	...

0800edd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800edd0:	4b07      	ldr	r3, [pc, #28]	@ (800edf0 <pxCurrentTCBConst2>)
 800edd2:	6819      	ldr	r1, [r3, #0]
 800edd4:	6808      	ldr	r0, [r1, #0]
 800edd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edda:	f380 8809 	msr	PSP, r0
 800edde:	f3bf 8f6f 	isb	sy
 800ede2:	f04f 0000 	mov.w	r0, #0
 800ede6:	f380 8811 	msr	BASEPRI, r0
 800edea:	4770      	bx	lr
 800edec:	f3af 8000 	nop.w

0800edf0 <pxCurrentTCBConst2>:
 800edf0:	20001264 	.word	0x20001264
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800edf4:	bf00      	nop
 800edf6:	bf00      	nop

0800edf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800edf8:	4808      	ldr	r0, [pc, #32]	@ (800ee1c <prvPortStartFirstTask+0x24>)
 800edfa:	6800      	ldr	r0, [r0, #0]
 800edfc:	6800      	ldr	r0, [r0, #0]
 800edfe:	f380 8808 	msr	MSP, r0
 800ee02:	f04f 0000 	mov.w	r0, #0
 800ee06:	f380 8814 	msr	CONTROL, r0
 800ee0a:	b662      	cpsie	i
 800ee0c:	b661      	cpsie	f
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	f3bf 8f6f 	isb	sy
 800ee16:	df00      	svc	0
 800ee18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ee1a:	bf00      	nop
 800ee1c:	e000ed08 	.word	0xe000ed08

0800ee20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ee26:	4b47      	ldr	r3, [pc, #284]	@ (800ef44 <xPortStartScheduler+0x124>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4a47      	ldr	r2, [pc, #284]	@ (800ef48 <xPortStartScheduler+0x128>)
 800ee2c:	4293      	cmp	r3, r2
 800ee2e:	d10b      	bne.n	800ee48 <xPortStartScheduler+0x28>
	__asm volatile
 800ee30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee34:	f383 8811 	msr	BASEPRI, r3
 800ee38:	f3bf 8f6f 	isb	sy
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	613b      	str	r3, [r7, #16]
}
 800ee42:	bf00      	nop
 800ee44:	bf00      	nop
 800ee46:	e7fd      	b.n	800ee44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ee48:	4b3e      	ldr	r3, [pc, #248]	@ (800ef44 <xPortStartScheduler+0x124>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a3f      	ldr	r2, [pc, #252]	@ (800ef4c <xPortStartScheduler+0x12c>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d10b      	bne.n	800ee6a <xPortStartScheduler+0x4a>
	__asm volatile
 800ee52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee56:	f383 8811 	msr	BASEPRI, r3
 800ee5a:	f3bf 8f6f 	isb	sy
 800ee5e:	f3bf 8f4f 	dsb	sy
 800ee62:	60fb      	str	r3, [r7, #12]
}
 800ee64:	bf00      	nop
 800ee66:	bf00      	nop
 800ee68:	e7fd      	b.n	800ee66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ee6a:	4b39      	ldr	r3, [pc, #228]	@ (800ef50 <xPortStartScheduler+0x130>)
 800ee6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	22ff      	movs	r2, #255	@ 0xff
 800ee7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ee84:	78fb      	ldrb	r3, [r7, #3]
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	4b31      	ldr	r3, [pc, #196]	@ (800ef54 <xPortStartScheduler+0x134>)
 800ee90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ee92:	4b31      	ldr	r3, [pc, #196]	@ (800ef58 <xPortStartScheduler+0x138>)
 800ee94:	2207      	movs	r2, #7
 800ee96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee98:	e009      	b.n	800eeae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ee9a:	4b2f      	ldr	r3, [pc, #188]	@ (800ef58 <xPortStartScheduler+0x138>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	3b01      	subs	r3, #1
 800eea0:	4a2d      	ldr	r2, [pc, #180]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eea2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eea4:	78fb      	ldrb	r3, [r7, #3]
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	005b      	lsls	r3, r3, #1
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eeae:	78fb      	ldrb	r3, [r7, #3]
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eeb6:	2b80      	cmp	r3, #128	@ 0x80
 800eeb8:	d0ef      	beq.n	800ee9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eeba:	4b27      	ldr	r3, [pc, #156]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f1c3 0307 	rsb	r3, r3, #7
 800eec2:	2b04      	cmp	r3, #4
 800eec4:	d00b      	beq.n	800eede <xPortStartScheduler+0xbe>
	__asm volatile
 800eec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeca:	f383 8811 	msr	BASEPRI, r3
 800eece:	f3bf 8f6f 	isb	sy
 800eed2:	f3bf 8f4f 	dsb	sy
 800eed6:	60bb      	str	r3, [r7, #8]
}
 800eed8:	bf00      	nop
 800eeda:	bf00      	nop
 800eedc:	e7fd      	b.n	800eeda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eede:	4b1e      	ldr	r3, [pc, #120]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	021b      	lsls	r3, r3, #8
 800eee4:	4a1c      	ldr	r2, [pc, #112]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eee6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eee8:	4b1b      	ldr	r3, [pc, #108]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800eef0:	4a19      	ldr	r2, [pc, #100]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eef2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	b2da      	uxtb	r2, r3
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eefc:	4b17      	ldr	r3, [pc, #92]	@ (800ef5c <xPortStartScheduler+0x13c>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a16      	ldr	r2, [pc, #88]	@ (800ef5c <xPortStartScheduler+0x13c>)
 800ef02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ef06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ef08:	4b14      	ldr	r3, [pc, #80]	@ (800ef5c <xPortStartScheduler+0x13c>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a13      	ldr	r2, [pc, #76]	@ (800ef5c <xPortStartScheduler+0x13c>)
 800ef0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ef12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ef14:	f000 f8da 	bl	800f0cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ef18:	4b11      	ldr	r3, [pc, #68]	@ (800ef60 <xPortStartScheduler+0x140>)
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ef1e:	f000 f8f9 	bl	800f114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ef22:	4b10      	ldr	r3, [pc, #64]	@ (800ef64 <xPortStartScheduler+0x144>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4a0f      	ldr	r2, [pc, #60]	@ (800ef64 <xPortStartScheduler+0x144>)
 800ef28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ef2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ef2e:	f7ff ff63 	bl	800edf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ef32:	f7ff f83b 	bl	800dfac <vTaskSwitchContext>
	prvTaskExitError();
 800ef36:	f7ff ff19 	bl	800ed6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ef3a:	2300      	movs	r3, #0
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3718      	adds	r7, #24
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	e000ed00 	.word	0xe000ed00
 800ef48:	410fc271 	.word	0x410fc271
 800ef4c:	410fc270 	.word	0x410fc270
 800ef50:	e000e400 	.word	0xe000e400
 800ef54:	20001890 	.word	0x20001890
 800ef58:	20001894 	.word	0x20001894
 800ef5c:	e000ed20 	.word	0xe000ed20
 800ef60:	20000154 	.word	0x20000154
 800ef64:	e000ef34 	.word	0xe000ef34

0800ef68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	607b      	str	r3, [r7, #4]
}
 800ef80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ef82:	4b10      	ldr	r3, [pc, #64]	@ (800efc4 <vPortEnterCritical+0x5c>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	3301      	adds	r3, #1
 800ef88:	4a0e      	ldr	r2, [pc, #56]	@ (800efc4 <vPortEnterCritical+0x5c>)
 800ef8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ef8c:	4b0d      	ldr	r3, [pc, #52]	@ (800efc4 <vPortEnterCritical+0x5c>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d110      	bne.n	800efb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ef94:	4b0c      	ldr	r3, [pc, #48]	@ (800efc8 <vPortEnterCritical+0x60>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00b      	beq.n	800efb6 <vPortEnterCritical+0x4e>
	__asm volatile
 800ef9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa2:	f383 8811 	msr	BASEPRI, r3
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	f3bf 8f4f 	dsb	sy
 800efae:	603b      	str	r3, [r7, #0]
}
 800efb0:	bf00      	nop
 800efb2:	bf00      	nop
 800efb4:	e7fd      	b.n	800efb2 <vPortEnterCritical+0x4a>
	}
}
 800efb6:	bf00      	nop
 800efb8:	370c      	adds	r7, #12
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	20000154 	.word	0x20000154
 800efc8:	e000ed04 	.word	0xe000ed04

0800efcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800efd2:	4b12      	ldr	r3, [pc, #72]	@ (800f01c <vPortExitCritical+0x50>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d10b      	bne.n	800eff2 <vPortExitCritical+0x26>
	__asm volatile
 800efda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efde:	f383 8811 	msr	BASEPRI, r3
 800efe2:	f3bf 8f6f 	isb	sy
 800efe6:	f3bf 8f4f 	dsb	sy
 800efea:	607b      	str	r3, [r7, #4]
}
 800efec:	bf00      	nop
 800efee:	bf00      	nop
 800eff0:	e7fd      	b.n	800efee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eff2:	4b0a      	ldr	r3, [pc, #40]	@ (800f01c <vPortExitCritical+0x50>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	3b01      	subs	r3, #1
 800eff8:	4a08      	ldr	r2, [pc, #32]	@ (800f01c <vPortExitCritical+0x50>)
 800effa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800effc:	4b07      	ldr	r3, [pc, #28]	@ (800f01c <vPortExitCritical+0x50>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d105      	bne.n	800f010 <vPortExitCritical+0x44>
 800f004:	2300      	movs	r3, #0
 800f006:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	f383 8811 	msr	BASEPRI, r3
}
 800f00e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f010:	bf00      	nop
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr
 800f01c:	20000154 	.word	0x20000154

0800f020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f020:	f3ef 8009 	mrs	r0, PSP
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	4b15      	ldr	r3, [pc, #84]	@ (800f080 <pxCurrentTCBConst>)
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	f01e 0f10 	tst.w	lr, #16
 800f030:	bf08      	it	eq
 800f032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f03a:	6010      	str	r0, [r2, #0]
 800f03c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f040:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f044:	f380 8811 	msr	BASEPRI, r0
 800f048:	f3bf 8f4f 	dsb	sy
 800f04c:	f3bf 8f6f 	isb	sy
 800f050:	f7fe ffac 	bl	800dfac <vTaskSwitchContext>
 800f054:	f04f 0000 	mov.w	r0, #0
 800f058:	f380 8811 	msr	BASEPRI, r0
 800f05c:	bc09      	pop	{r0, r3}
 800f05e:	6819      	ldr	r1, [r3, #0]
 800f060:	6808      	ldr	r0, [r1, #0]
 800f062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f066:	f01e 0f10 	tst.w	lr, #16
 800f06a:	bf08      	it	eq
 800f06c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f070:	f380 8809 	msr	PSP, r0
 800f074:	f3bf 8f6f 	isb	sy
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop
 800f07c:	f3af 8000 	nop.w

0800f080 <pxCurrentTCBConst>:
 800f080:	20001264 	.word	0x20001264
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f084:	bf00      	nop
 800f086:	bf00      	nop

0800f088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
	__asm volatile
 800f08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f092:	f383 8811 	msr	BASEPRI, r3
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	607b      	str	r3, [r7, #4]
}
 800f0a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f0a2:	f7fe fec9 	bl	800de38 <xTaskIncrementTick>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d003      	beq.n	800f0b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f0ac:	4b06      	ldr	r3, [pc, #24]	@ (800f0c8 <xPortSysTickHandler+0x40>)
 800f0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0b2:	601a      	str	r2, [r3, #0]
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	f383 8811 	msr	BASEPRI, r3
}
 800f0be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f0c0:	bf00      	nop
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	e000ed04 	.word	0xe000ed04

0800f0cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f0d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f100 <vPortSetupTimerInterrupt+0x34>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f0d6:	4b0b      	ldr	r3, [pc, #44]	@ (800f104 <vPortSetupTimerInterrupt+0x38>)
 800f0d8:	2200      	movs	r2, #0
 800f0da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f108 <vPortSetupTimerInterrupt+0x3c>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a0a      	ldr	r2, [pc, #40]	@ (800f10c <vPortSetupTimerInterrupt+0x40>)
 800f0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0e6:	099b      	lsrs	r3, r3, #6
 800f0e8:	4a09      	ldr	r2, [pc, #36]	@ (800f110 <vPortSetupTimerInterrupt+0x44>)
 800f0ea:	3b01      	subs	r3, #1
 800f0ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f0ee:	4b04      	ldr	r3, [pc, #16]	@ (800f100 <vPortSetupTimerInterrupt+0x34>)
 800f0f0:	2207      	movs	r2, #7
 800f0f2:	601a      	str	r2, [r3, #0]
}
 800f0f4:	bf00      	nop
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	e000e010 	.word	0xe000e010
 800f104:	e000e018 	.word	0xe000e018
 800f108:	20000148 	.word	0x20000148
 800f10c:	10624dd3 	.word	0x10624dd3
 800f110:	e000e014 	.word	0xe000e014

0800f114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f114:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f124 <vPortEnableVFP+0x10>
 800f118:	6801      	ldr	r1, [r0, #0]
 800f11a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f11e:	6001      	str	r1, [r0, #0]
 800f120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f122:	bf00      	nop
 800f124:	e000ed88 	.word	0xe000ed88

0800f128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f128:	b480      	push	{r7}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f12e:	f3ef 8305 	mrs	r3, IPSR
 800f132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2b0f      	cmp	r3, #15
 800f138:	d915      	bls.n	800f166 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f13a:	4a18      	ldr	r2, [pc, #96]	@ (800f19c <vPortValidateInterruptPriority+0x74>)
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	4413      	add	r3, r2
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f144:	4b16      	ldr	r3, [pc, #88]	@ (800f1a0 <vPortValidateInterruptPriority+0x78>)
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	7afa      	ldrb	r2, [r7, #11]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d20b      	bcs.n	800f166 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f152:	f383 8811 	msr	BASEPRI, r3
 800f156:	f3bf 8f6f 	isb	sy
 800f15a:	f3bf 8f4f 	dsb	sy
 800f15e:	607b      	str	r3, [r7, #4]
}
 800f160:	bf00      	nop
 800f162:	bf00      	nop
 800f164:	e7fd      	b.n	800f162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f166:	4b0f      	ldr	r3, [pc, #60]	@ (800f1a4 <vPortValidateInterruptPriority+0x7c>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f16e:	4b0e      	ldr	r3, [pc, #56]	@ (800f1a8 <vPortValidateInterruptPriority+0x80>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	429a      	cmp	r2, r3
 800f174:	d90b      	bls.n	800f18e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f17a:	f383 8811 	msr	BASEPRI, r3
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	603b      	str	r3, [r7, #0]
}
 800f188:	bf00      	nop
 800f18a:	bf00      	nop
 800f18c:	e7fd      	b.n	800f18a <vPortValidateInterruptPriority+0x62>
	}
 800f18e:	bf00      	nop
 800f190:	3714      	adds	r7, #20
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr
 800f19a:	bf00      	nop
 800f19c:	e000e3f0 	.word	0xe000e3f0
 800f1a0:	20001890 	.word	0x20001890
 800f1a4:	e000ed0c 	.word	0xe000ed0c
 800f1a8:	20001894 	.word	0x20001894

0800f1ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08a      	sub	sp, #40	@ 0x28
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f1b8:	f7fe fd82 	bl	800dcc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f1bc:	4b5c      	ldr	r3, [pc, #368]	@ (800f330 <pvPortMalloc+0x184>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d101      	bne.n	800f1c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f1c4:	f000 f924 	bl	800f410 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f1c8:	4b5a      	ldr	r3, [pc, #360]	@ (800f334 <pvPortMalloc+0x188>)
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	4013      	ands	r3, r2
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f040 8095 	bne.w	800f300 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d01e      	beq.n	800f21a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f1dc:	2208      	movs	r2, #8
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f003 0307 	and.w	r3, r3, #7
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d015      	beq.n	800f21a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f023 0307 	bic.w	r3, r3, #7
 800f1f4:	3308      	adds	r3, #8
 800f1f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f003 0307 	and.w	r3, r3, #7
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d00b      	beq.n	800f21a <pvPortMalloc+0x6e>
	__asm volatile
 800f202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f206:	f383 8811 	msr	BASEPRI, r3
 800f20a:	f3bf 8f6f 	isb	sy
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	617b      	str	r3, [r7, #20]
}
 800f214:	bf00      	nop
 800f216:	bf00      	nop
 800f218:	e7fd      	b.n	800f216 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d06f      	beq.n	800f300 <pvPortMalloc+0x154>
 800f220:	4b45      	ldr	r3, [pc, #276]	@ (800f338 <pvPortMalloc+0x18c>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	429a      	cmp	r2, r3
 800f228:	d86a      	bhi.n	800f300 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f22a:	4b44      	ldr	r3, [pc, #272]	@ (800f33c <pvPortMalloc+0x190>)
 800f22c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f22e:	4b43      	ldr	r3, [pc, #268]	@ (800f33c <pvPortMalloc+0x190>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f234:	e004      	b.n	800f240 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f238:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	429a      	cmp	r2, r3
 800f248:	d903      	bls.n	800f252 <pvPortMalloc+0xa6>
 800f24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1f1      	bne.n	800f236 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f252:	4b37      	ldr	r3, [pc, #220]	@ (800f330 <pvPortMalloc+0x184>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f258:	429a      	cmp	r2, r3
 800f25a:	d051      	beq.n	800f300 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f25c:	6a3b      	ldr	r3, [r7, #32]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2208      	movs	r2, #8
 800f262:	4413      	add	r3, r2
 800f264:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	6a3b      	ldr	r3, [r7, #32]
 800f26c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f270:	685a      	ldr	r2, [r3, #4]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	1ad2      	subs	r2, r2, r3
 800f276:	2308      	movs	r3, #8
 800f278:	005b      	lsls	r3, r3, #1
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d920      	bls.n	800f2c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f27e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4413      	add	r3, r2
 800f284:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	f003 0307 	and.w	r3, r3, #7
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d00b      	beq.n	800f2a8 <pvPortMalloc+0xfc>
	__asm volatile
 800f290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f294:	f383 8811 	msr	BASEPRI, r3
 800f298:	f3bf 8f6f 	isb	sy
 800f29c:	f3bf 8f4f 	dsb	sy
 800f2a0:	613b      	str	r3, [r7, #16]
}
 800f2a2:	bf00      	nop
 800f2a4:	bf00      	nop
 800f2a6:	e7fd      	b.n	800f2a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2aa:	685a      	ldr	r2, [r3, #4]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	1ad2      	subs	r2, r2, r3
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f2ba:	69b8      	ldr	r0, [r7, #24]
 800f2bc:	f000 f90a 	bl	800f4d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f2c0:	4b1d      	ldr	r3, [pc, #116]	@ (800f338 <pvPortMalloc+0x18c>)
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	1ad3      	subs	r3, r2, r3
 800f2ca:	4a1b      	ldr	r2, [pc, #108]	@ (800f338 <pvPortMalloc+0x18c>)
 800f2cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2ce:	4b1a      	ldr	r3, [pc, #104]	@ (800f338 <pvPortMalloc+0x18c>)
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	4b1b      	ldr	r3, [pc, #108]	@ (800f340 <pvPortMalloc+0x194>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d203      	bcs.n	800f2e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f2da:	4b17      	ldr	r3, [pc, #92]	@ (800f338 <pvPortMalloc+0x18c>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	4a18      	ldr	r2, [pc, #96]	@ (800f340 <pvPortMalloc+0x194>)
 800f2e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2e4:	685a      	ldr	r2, [r3, #4]
 800f2e6:	4b13      	ldr	r3, [pc, #76]	@ (800f334 <pvPortMalloc+0x188>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	431a      	orrs	r2, r3
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f2f6:	4b13      	ldr	r3, [pc, #76]	@ (800f344 <pvPortMalloc+0x198>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	4a11      	ldr	r2, [pc, #68]	@ (800f344 <pvPortMalloc+0x198>)
 800f2fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f300:	f7fe fcec 	bl	800dcdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	f003 0307 	and.w	r3, r3, #7
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00b      	beq.n	800f326 <pvPortMalloc+0x17a>
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	60fb      	str	r3, [r7, #12]
}
 800f320:	bf00      	nop
 800f322:	bf00      	nop
 800f324:	e7fd      	b.n	800f322 <pvPortMalloc+0x176>
	return pvReturn;
 800f326:	69fb      	ldr	r3, [r7, #28]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3728      	adds	r7, #40	@ 0x28
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	200054a0 	.word	0x200054a0
 800f334:	200054b4 	.word	0x200054b4
 800f338:	200054a4 	.word	0x200054a4
 800f33c:	20005498 	.word	0x20005498
 800f340:	200054a8 	.word	0x200054a8
 800f344:	200054ac 	.word	0x200054ac

0800f348 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b086      	sub	sp, #24
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d04f      	beq.n	800f3fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f35a:	2308      	movs	r3, #8
 800f35c:	425b      	negs	r3, r3
 800f35e:	697a      	ldr	r2, [r7, #20]
 800f360:	4413      	add	r3, r2
 800f362:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	685a      	ldr	r2, [r3, #4]
 800f36c:	4b25      	ldr	r3, [pc, #148]	@ (800f404 <vPortFree+0xbc>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4013      	ands	r3, r2
 800f372:	2b00      	cmp	r3, #0
 800f374:	d10b      	bne.n	800f38e <vPortFree+0x46>
	__asm volatile
 800f376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f37a:	f383 8811 	msr	BASEPRI, r3
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	60fb      	str	r3, [r7, #12]
}
 800f388:	bf00      	nop
 800f38a:	bf00      	nop
 800f38c:	e7fd      	b.n	800f38a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d00b      	beq.n	800f3ae <vPortFree+0x66>
	__asm volatile
 800f396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f39a:	f383 8811 	msr	BASEPRI, r3
 800f39e:	f3bf 8f6f 	isb	sy
 800f3a2:	f3bf 8f4f 	dsb	sy
 800f3a6:	60bb      	str	r3, [r7, #8]
}
 800f3a8:	bf00      	nop
 800f3aa:	bf00      	nop
 800f3ac:	e7fd      	b.n	800f3aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	685a      	ldr	r2, [r3, #4]
 800f3b2:	4b14      	ldr	r3, [pc, #80]	@ (800f404 <vPortFree+0xbc>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4013      	ands	r3, r2
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d01e      	beq.n	800f3fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d11a      	bne.n	800f3fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	685a      	ldr	r2, [r3, #4]
 800f3c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f404 <vPortFree+0xbc>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	43db      	mvns	r3, r3
 800f3ce:	401a      	ands	r2, r3
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f3d4:	f7fe fc74 	bl	800dcc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	685a      	ldr	r2, [r3, #4]
 800f3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f408 <vPortFree+0xc0>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	4a09      	ldr	r2, [pc, #36]	@ (800f408 <vPortFree+0xc0>)
 800f3e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f3e6:	6938      	ldr	r0, [r7, #16]
 800f3e8:	f000 f874 	bl	800f4d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f3ec:	4b07      	ldr	r3, [pc, #28]	@ (800f40c <vPortFree+0xc4>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	4a06      	ldr	r2, [pc, #24]	@ (800f40c <vPortFree+0xc4>)
 800f3f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f3f6:	f7fe fc71 	bl	800dcdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f3fa:	bf00      	nop
 800f3fc:	3718      	adds	r7, #24
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	200054b4 	.word	0x200054b4
 800f408:	200054a4 	.word	0x200054a4
 800f40c:	200054b0 	.word	0x200054b0

0800f410 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f410:	b480      	push	{r7}
 800f412:	b085      	sub	sp, #20
 800f414:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f416:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f41a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f41c:	4b27      	ldr	r3, [pc, #156]	@ (800f4bc <prvHeapInit+0xac>)
 800f41e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f003 0307 	and.w	r3, r3, #7
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00c      	beq.n	800f444 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	3307      	adds	r3, #7
 800f42e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f023 0307 	bic.w	r3, r3, #7
 800f436:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f438:	68ba      	ldr	r2, [r7, #8]
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	4a1f      	ldr	r2, [pc, #124]	@ (800f4bc <prvHeapInit+0xac>)
 800f440:	4413      	add	r3, r2
 800f442:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f448:	4a1d      	ldr	r2, [pc, #116]	@ (800f4c0 <prvHeapInit+0xb0>)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f44e:	4b1c      	ldr	r3, [pc, #112]	@ (800f4c0 <prvHeapInit+0xb0>)
 800f450:	2200      	movs	r2, #0
 800f452:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	68ba      	ldr	r2, [r7, #8]
 800f458:	4413      	add	r3, r2
 800f45a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f45c:	2208      	movs	r2, #8
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	1a9b      	subs	r3, r3, r2
 800f462:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f023 0307 	bic.w	r3, r3, #7
 800f46a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	4a15      	ldr	r2, [pc, #84]	@ (800f4c4 <prvHeapInit+0xb4>)
 800f470:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f472:	4b14      	ldr	r3, [pc, #80]	@ (800f4c4 <prvHeapInit+0xb4>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2200      	movs	r2, #0
 800f478:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f47a:	4b12      	ldr	r3, [pc, #72]	@ (800f4c4 <prvHeapInit+0xb4>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	2200      	movs	r2, #0
 800f480:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	1ad2      	subs	r2, r2, r3
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f490:	4b0c      	ldr	r3, [pc, #48]	@ (800f4c4 <prvHeapInit+0xb4>)
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	4a0a      	ldr	r2, [pc, #40]	@ (800f4c8 <prvHeapInit+0xb8>)
 800f49e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	4a09      	ldr	r2, [pc, #36]	@ (800f4cc <prvHeapInit+0xbc>)
 800f4a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f4a8:	4b09      	ldr	r3, [pc, #36]	@ (800f4d0 <prvHeapInit+0xc0>)
 800f4aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f4ae:	601a      	str	r2, [r3, #0]
}
 800f4b0:	bf00      	nop
 800f4b2:	3714      	adds	r7, #20
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ba:	4770      	bx	lr
 800f4bc:	20001898 	.word	0x20001898
 800f4c0:	20005498 	.word	0x20005498
 800f4c4:	200054a0 	.word	0x200054a0
 800f4c8:	200054a8 	.word	0x200054a8
 800f4cc:	200054a4 	.word	0x200054a4
 800f4d0:	200054b4 	.word	0x200054b4

0800f4d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f4dc:	4b28      	ldr	r3, [pc, #160]	@ (800f580 <prvInsertBlockIntoFreeList+0xac>)
 800f4de:	60fb      	str	r3, [r7, #12]
 800f4e0:	e002      	b.n	800f4e8 <prvInsertBlockIntoFreeList+0x14>
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	60fb      	str	r3, [r7, #12]
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d8f7      	bhi.n	800f4e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	687a      	ldr	r2, [r7, #4]
 800f500:	429a      	cmp	r2, r3
 800f502:	d108      	bne.n	800f516 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	685a      	ldr	r2, [r3, #4]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	441a      	add	r2, r3
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	441a      	add	r2, r3
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	429a      	cmp	r2, r3
 800f528:	d118      	bne.n	800f55c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	4b15      	ldr	r3, [pc, #84]	@ (800f584 <prvInsertBlockIntoFreeList+0xb0>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	429a      	cmp	r2, r3
 800f534:	d00d      	beq.n	800f552 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	685a      	ldr	r2, [r3, #4]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	441a      	add	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	e008      	b.n	800f564 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f552:	4b0c      	ldr	r3, [pc, #48]	@ (800f584 <prvInsertBlockIntoFreeList+0xb0>)
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	601a      	str	r2, [r3, #0]
 800f55a:	e003      	b.n	800f564 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f564:	68fa      	ldr	r2, [r7, #12]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d002      	beq.n	800f572 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f572:	bf00      	nop
 800f574:	3714      	adds	r7, #20
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	20005498 	.word	0x20005498
 800f584:	200054a0 	.word	0x200054a0

0800f588 <atoi>:
 800f588:	220a      	movs	r2, #10
 800f58a:	2100      	movs	r1, #0
 800f58c:	f000 bdca 	b.w	8010124 <strtol>

0800f590 <__cvt>:
 800f590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f594:	ec57 6b10 	vmov	r6, r7, d0
 800f598:	2f00      	cmp	r7, #0
 800f59a:	460c      	mov	r4, r1
 800f59c:	4619      	mov	r1, r3
 800f59e:	463b      	mov	r3, r7
 800f5a0:	bfbb      	ittet	lt
 800f5a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f5a6:	461f      	movlt	r7, r3
 800f5a8:	2300      	movge	r3, #0
 800f5aa:	232d      	movlt	r3, #45	@ 0x2d
 800f5ac:	700b      	strb	r3, [r1, #0]
 800f5ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f5b4:	4691      	mov	r9, r2
 800f5b6:	f023 0820 	bic.w	r8, r3, #32
 800f5ba:	bfbc      	itt	lt
 800f5bc:	4632      	movlt	r2, r6
 800f5be:	4616      	movlt	r6, r2
 800f5c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f5c4:	d005      	beq.n	800f5d2 <__cvt+0x42>
 800f5c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f5ca:	d100      	bne.n	800f5ce <__cvt+0x3e>
 800f5cc:	3401      	adds	r4, #1
 800f5ce:	2102      	movs	r1, #2
 800f5d0:	e000      	b.n	800f5d4 <__cvt+0x44>
 800f5d2:	2103      	movs	r1, #3
 800f5d4:	ab03      	add	r3, sp, #12
 800f5d6:	9301      	str	r3, [sp, #4]
 800f5d8:	ab02      	add	r3, sp, #8
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	ec47 6b10 	vmov	d0, r6, r7
 800f5e0:	4653      	mov	r3, sl
 800f5e2:	4622      	mov	r2, r4
 800f5e4:	f000 fe98 	bl	8010318 <_dtoa_r>
 800f5e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f5ec:	4605      	mov	r5, r0
 800f5ee:	d119      	bne.n	800f624 <__cvt+0x94>
 800f5f0:	f019 0f01 	tst.w	r9, #1
 800f5f4:	d00e      	beq.n	800f614 <__cvt+0x84>
 800f5f6:	eb00 0904 	add.w	r9, r0, r4
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	4630      	mov	r0, r6
 800f600:	4639      	mov	r1, r7
 800f602:	f7f1 fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 800f606:	b108      	cbz	r0, 800f60c <__cvt+0x7c>
 800f608:	f8cd 900c 	str.w	r9, [sp, #12]
 800f60c:	2230      	movs	r2, #48	@ 0x30
 800f60e:	9b03      	ldr	r3, [sp, #12]
 800f610:	454b      	cmp	r3, r9
 800f612:	d31e      	bcc.n	800f652 <__cvt+0xc2>
 800f614:	9b03      	ldr	r3, [sp, #12]
 800f616:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f618:	1b5b      	subs	r3, r3, r5
 800f61a:	4628      	mov	r0, r5
 800f61c:	6013      	str	r3, [r2, #0]
 800f61e:	b004      	add	sp, #16
 800f620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f624:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f628:	eb00 0904 	add.w	r9, r0, r4
 800f62c:	d1e5      	bne.n	800f5fa <__cvt+0x6a>
 800f62e:	7803      	ldrb	r3, [r0, #0]
 800f630:	2b30      	cmp	r3, #48	@ 0x30
 800f632:	d10a      	bne.n	800f64a <__cvt+0xba>
 800f634:	2200      	movs	r2, #0
 800f636:	2300      	movs	r3, #0
 800f638:	4630      	mov	r0, r6
 800f63a:	4639      	mov	r1, r7
 800f63c:	f7f1 fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 800f640:	b918      	cbnz	r0, 800f64a <__cvt+0xba>
 800f642:	f1c4 0401 	rsb	r4, r4, #1
 800f646:	f8ca 4000 	str.w	r4, [sl]
 800f64a:	f8da 3000 	ldr.w	r3, [sl]
 800f64e:	4499      	add	r9, r3
 800f650:	e7d3      	b.n	800f5fa <__cvt+0x6a>
 800f652:	1c59      	adds	r1, r3, #1
 800f654:	9103      	str	r1, [sp, #12]
 800f656:	701a      	strb	r2, [r3, #0]
 800f658:	e7d9      	b.n	800f60e <__cvt+0x7e>

0800f65a <__exponent>:
 800f65a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f65c:	2900      	cmp	r1, #0
 800f65e:	bfba      	itte	lt
 800f660:	4249      	neglt	r1, r1
 800f662:	232d      	movlt	r3, #45	@ 0x2d
 800f664:	232b      	movge	r3, #43	@ 0x2b
 800f666:	2909      	cmp	r1, #9
 800f668:	7002      	strb	r2, [r0, #0]
 800f66a:	7043      	strb	r3, [r0, #1]
 800f66c:	dd29      	ble.n	800f6c2 <__exponent+0x68>
 800f66e:	f10d 0307 	add.w	r3, sp, #7
 800f672:	461d      	mov	r5, r3
 800f674:	270a      	movs	r7, #10
 800f676:	461a      	mov	r2, r3
 800f678:	fbb1 f6f7 	udiv	r6, r1, r7
 800f67c:	fb07 1416 	mls	r4, r7, r6, r1
 800f680:	3430      	adds	r4, #48	@ 0x30
 800f682:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f686:	460c      	mov	r4, r1
 800f688:	2c63      	cmp	r4, #99	@ 0x63
 800f68a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f68e:	4631      	mov	r1, r6
 800f690:	dcf1      	bgt.n	800f676 <__exponent+0x1c>
 800f692:	3130      	adds	r1, #48	@ 0x30
 800f694:	1e94      	subs	r4, r2, #2
 800f696:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f69a:	1c41      	adds	r1, r0, #1
 800f69c:	4623      	mov	r3, r4
 800f69e:	42ab      	cmp	r3, r5
 800f6a0:	d30a      	bcc.n	800f6b8 <__exponent+0x5e>
 800f6a2:	f10d 0309 	add.w	r3, sp, #9
 800f6a6:	1a9b      	subs	r3, r3, r2
 800f6a8:	42ac      	cmp	r4, r5
 800f6aa:	bf88      	it	hi
 800f6ac:	2300      	movhi	r3, #0
 800f6ae:	3302      	adds	r3, #2
 800f6b0:	4403      	add	r3, r0
 800f6b2:	1a18      	subs	r0, r3, r0
 800f6b4:	b003      	add	sp, #12
 800f6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f6bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f6c0:	e7ed      	b.n	800f69e <__exponent+0x44>
 800f6c2:	2330      	movs	r3, #48	@ 0x30
 800f6c4:	3130      	adds	r1, #48	@ 0x30
 800f6c6:	7083      	strb	r3, [r0, #2]
 800f6c8:	70c1      	strb	r1, [r0, #3]
 800f6ca:	1d03      	adds	r3, r0, #4
 800f6cc:	e7f1      	b.n	800f6b2 <__exponent+0x58>
	...

0800f6d0 <_printf_float>:
 800f6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d4:	b08d      	sub	sp, #52	@ 0x34
 800f6d6:	460c      	mov	r4, r1
 800f6d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f6dc:	4616      	mov	r6, r2
 800f6de:	461f      	mov	r7, r3
 800f6e0:	4605      	mov	r5, r0
 800f6e2:	f000 fd4f 	bl	8010184 <_localeconv_r>
 800f6e6:	6803      	ldr	r3, [r0, #0]
 800f6e8:	9304      	str	r3, [sp, #16]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7f0 fdc0 	bl	8000270 <strlen>
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6f4:	f8d8 3000 	ldr.w	r3, [r8]
 800f6f8:	9005      	str	r0, [sp, #20]
 800f6fa:	3307      	adds	r3, #7
 800f6fc:	f023 0307 	bic.w	r3, r3, #7
 800f700:	f103 0208 	add.w	r2, r3, #8
 800f704:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f708:	f8d4 b000 	ldr.w	fp, [r4]
 800f70c:	f8c8 2000 	str.w	r2, [r8]
 800f710:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f714:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f718:	9307      	str	r3, [sp, #28]
 800f71a:	f8cd 8018 	str.w	r8, [sp, #24]
 800f71e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f726:	4b9c      	ldr	r3, [pc, #624]	@ (800f998 <_printf_float+0x2c8>)
 800f728:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f72c:	f7f1 f9fe 	bl	8000b2c <__aeabi_dcmpun>
 800f730:	bb70      	cbnz	r0, 800f790 <_printf_float+0xc0>
 800f732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f736:	4b98      	ldr	r3, [pc, #608]	@ (800f998 <_printf_float+0x2c8>)
 800f738:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f73c:	f7f1 f9d8 	bl	8000af0 <__aeabi_dcmple>
 800f740:	bb30      	cbnz	r0, 800f790 <_printf_float+0xc0>
 800f742:	2200      	movs	r2, #0
 800f744:	2300      	movs	r3, #0
 800f746:	4640      	mov	r0, r8
 800f748:	4649      	mov	r1, r9
 800f74a:	f7f1 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800f74e:	b110      	cbz	r0, 800f756 <_printf_float+0x86>
 800f750:	232d      	movs	r3, #45	@ 0x2d
 800f752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f756:	4a91      	ldr	r2, [pc, #580]	@ (800f99c <_printf_float+0x2cc>)
 800f758:	4b91      	ldr	r3, [pc, #580]	@ (800f9a0 <_printf_float+0x2d0>)
 800f75a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f75e:	bf94      	ite	ls
 800f760:	4690      	movls	r8, r2
 800f762:	4698      	movhi	r8, r3
 800f764:	2303      	movs	r3, #3
 800f766:	6123      	str	r3, [r4, #16]
 800f768:	f02b 0304 	bic.w	r3, fp, #4
 800f76c:	6023      	str	r3, [r4, #0]
 800f76e:	f04f 0900 	mov.w	r9, #0
 800f772:	9700      	str	r7, [sp, #0]
 800f774:	4633      	mov	r3, r6
 800f776:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f778:	4621      	mov	r1, r4
 800f77a:	4628      	mov	r0, r5
 800f77c:	f000 f9d2 	bl	800fb24 <_printf_common>
 800f780:	3001      	adds	r0, #1
 800f782:	f040 808d 	bne.w	800f8a0 <_printf_float+0x1d0>
 800f786:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f78a:	b00d      	add	sp, #52	@ 0x34
 800f78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f790:	4642      	mov	r2, r8
 800f792:	464b      	mov	r3, r9
 800f794:	4640      	mov	r0, r8
 800f796:	4649      	mov	r1, r9
 800f798:	f7f1 f9c8 	bl	8000b2c <__aeabi_dcmpun>
 800f79c:	b140      	cbz	r0, 800f7b0 <_printf_float+0xe0>
 800f79e:	464b      	mov	r3, r9
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	bfbc      	itt	lt
 800f7a4:	232d      	movlt	r3, #45	@ 0x2d
 800f7a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f7aa:	4a7e      	ldr	r2, [pc, #504]	@ (800f9a4 <_printf_float+0x2d4>)
 800f7ac:	4b7e      	ldr	r3, [pc, #504]	@ (800f9a8 <_printf_float+0x2d8>)
 800f7ae:	e7d4      	b.n	800f75a <_printf_float+0x8a>
 800f7b0:	6863      	ldr	r3, [r4, #4]
 800f7b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f7b6:	9206      	str	r2, [sp, #24]
 800f7b8:	1c5a      	adds	r2, r3, #1
 800f7ba:	d13b      	bne.n	800f834 <_printf_float+0x164>
 800f7bc:	2306      	movs	r3, #6
 800f7be:	6063      	str	r3, [r4, #4]
 800f7c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	6022      	str	r2, [r4, #0]
 800f7c8:	9303      	str	r3, [sp, #12]
 800f7ca:	ab0a      	add	r3, sp, #40	@ 0x28
 800f7cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f7d0:	ab09      	add	r3, sp, #36	@ 0x24
 800f7d2:	9300      	str	r3, [sp, #0]
 800f7d4:	6861      	ldr	r1, [r4, #4]
 800f7d6:	ec49 8b10 	vmov	d0, r8, r9
 800f7da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f7de:	4628      	mov	r0, r5
 800f7e0:	f7ff fed6 	bl	800f590 <__cvt>
 800f7e4:	9b06      	ldr	r3, [sp, #24]
 800f7e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f7e8:	2b47      	cmp	r3, #71	@ 0x47
 800f7ea:	4680      	mov	r8, r0
 800f7ec:	d129      	bne.n	800f842 <_printf_float+0x172>
 800f7ee:	1cc8      	adds	r0, r1, #3
 800f7f0:	db02      	blt.n	800f7f8 <_printf_float+0x128>
 800f7f2:	6863      	ldr	r3, [r4, #4]
 800f7f4:	4299      	cmp	r1, r3
 800f7f6:	dd41      	ble.n	800f87c <_printf_float+0x1ac>
 800f7f8:	f1aa 0a02 	sub.w	sl, sl, #2
 800f7fc:	fa5f fa8a 	uxtb.w	sl, sl
 800f800:	3901      	subs	r1, #1
 800f802:	4652      	mov	r2, sl
 800f804:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f808:	9109      	str	r1, [sp, #36]	@ 0x24
 800f80a:	f7ff ff26 	bl	800f65a <__exponent>
 800f80e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f810:	1813      	adds	r3, r2, r0
 800f812:	2a01      	cmp	r2, #1
 800f814:	4681      	mov	r9, r0
 800f816:	6123      	str	r3, [r4, #16]
 800f818:	dc02      	bgt.n	800f820 <_printf_float+0x150>
 800f81a:	6822      	ldr	r2, [r4, #0]
 800f81c:	07d2      	lsls	r2, r2, #31
 800f81e:	d501      	bpl.n	800f824 <_printf_float+0x154>
 800f820:	3301      	adds	r3, #1
 800f822:	6123      	str	r3, [r4, #16]
 800f824:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d0a2      	beq.n	800f772 <_printf_float+0xa2>
 800f82c:	232d      	movs	r3, #45	@ 0x2d
 800f82e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f832:	e79e      	b.n	800f772 <_printf_float+0xa2>
 800f834:	9a06      	ldr	r2, [sp, #24]
 800f836:	2a47      	cmp	r2, #71	@ 0x47
 800f838:	d1c2      	bne.n	800f7c0 <_printf_float+0xf0>
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d1c0      	bne.n	800f7c0 <_printf_float+0xf0>
 800f83e:	2301      	movs	r3, #1
 800f840:	e7bd      	b.n	800f7be <_printf_float+0xee>
 800f842:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f846:	d9db      	bls.n	800f800 <_printf_float+0x130>
 800f848:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f84c:	d118      	bne.n	800f880 <_printf_float+0x1b0>
 800f84e:	2900      	cmp	r1, #0
 800f850:	6863      	ldr	r3, [r4, #4]
 800f852:	dd0b      	ble.n	800f86c <_printf_float+0x19c>
 800f854:	6121      	str	r1, [r4, #16]
 800f856:	b913      	cbnz	r3, 800f85e <_printf_float+0x18e>
 800f858:	6822      	ldr	r2, [r4, #0]
 800f85a:	07d0      	lsls	r0, r2, #31
 800f85c:	d502      	bpl.n	800f864 <_printf_float+0x194>
 800f85e:	3301      	adds	r3, #1
 800f860:	440b      	add	r3, r1
 800f862:	6123      	str	r3, [r4, #16]
 800f864:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f866:	f04f 0900 	mov.w	r9, #0
 800f86a:	e7db      	b.n	800f824 <_printf_float+0x154>
 800f86c:	b913      	cbnz	r3, 800f874 <_printf_float+0x1a4>
 800f86e:	6822      	ldr	r2, [r4, #0]
 800f870:	07d2      	lsls	r2, r2, #31
 800f872:	d501      	bpl.n	800f878 <_printf_float+0x1a8>
 800f874:	3302      	adds	r3, #2
 800f876:	e7f4      	b.n	800f862 <_printf_float+0x192>
 800f878:	2301      	movs	r3, #1
 800f87a:	e7f2      	b.n	800f862 <_printf_float+0x192>
 800f87c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f882:	4299      	cmp	r1, r3
 800f884:	db05      	blt.n	800f892 <_printf_float+0x1c2>
 800f886:	6823      	ldr	r3, [r4, #0]
 800f888:	6121      	str	r1, [r4, #16]
 800f88a:	07d8      	lsls	r0, r3, #31
 800f88c:	d5ea      	bpl.n	800f864 <_printf_float+0x194>
 800f88e:	1c4b      	adds	r3, r1, #1
 800f890:	e7e7      	b.n	800f862 <_printf_float+0x192>
 800f892:	2900      	cmp	r1, #0
 800f894:	bfd4      	ite	le
 800f896:	f1c1 0202 	rsble	r2, r1, #2
 800f89a:	2201      	movgt	r2, #1
 800f89c:	4413      	add	r3, r2
 800f89e:	e7e0      	b.n	800f862 <_printf_float+0x192>
 800f8a0:	6823      	ldr	r3, [r4, #0]
 800f8a2:	055a      	lsls	r2, r3, #21
 800f8a4:	d407      	bmi.n	800f8b6 <_printf_float+0x1e6>
 800f8a6:	6923      	ldr	r3, [r4, #16]
 800f8a8:	4642      	mov	r2, r8
 800f8aa:	4631      	mov	r1, r6
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	47b8      	blx	r7
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	d12b      	bne.n	800f90c <_printf_float+0x23c>
 800f8b4:	e767      	b.n	800f786 <_printf_float+0xb6>
 800f8b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f8ba:	f240 80dd 	bls.w	800fa78 <_printf_float+0x3a8>
 800f8be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	f7f1 f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	d033      	beq.n	800f936 <_printf_float+0x266>
 800f8ce:	4a37      	ldr	r2, [pc, #220]	@ (800f9ac <_printf_float+0x2dc>)
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	4631      	mov	r1, r6
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	47b8      	blx	r7
 800f8d8:	3001      	adds	r0, #1
 800f8da:	f43f af54 	beq.w	800f786 <_printf_float+0xb6>
 800f8de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f8e2:	4543      	cmp	r3, r8
 800f8e4:	db02      	blt.n	800f8ec <_printf_float+0x21c>
 800f8e6:	6823      	ldr	r3, [r4, #0]
 800f8e8:	07d8      	lsls	r0, r3, #31
 800f8ea:	d50f      	bpl.n	800f90c <_printf_float+0x23c>
 800f8ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8f0:	4631      	mov	r1, r6
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	47b8      	blx	r7
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	f43f af45 	beq.w	800f786 <_printf_float+0xb6>
 800f8fc:	f04f 0900 	mov.w	r9, #0
 800f900:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f904:	f104 0a1a 	add.w	sl, r4, #26
 800f908:	45c8      	cmp	r8, r9
 800f90a:	dc09      	bgt.n	800f920 <_printf_float+0x250>
 800f90c:	6823      	ldr	r3, [r4, #0]
 800f90e:	079b      	lsls	r3, r3, #30
 800f910:	f100 8103 	bmi.w	800fb1a <_printf_float+0x44a>
 800f914:	68e0      	ldr	r0, [r4, #12]
 800f916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f918:	4298      	cmp	r0, r3
 800f91a:	bfb8      	it	lt
 800f91c:	4618      	movlt	r0, r3
 800f91e:	e734      	b.n	800f78a <_printf_float+0xba>
 800f920:	2301      	movs	r3, #1
 800f922:	4652      	mov	r2, sl
 800f924:	4631      	mov	r1, r6
 800f926:	4628      	mov	r0, r5
 800f928:	47b8      	blx	r7
 800f92a:	3001      	adds	r0, #1
 800f92c:	f43f af2b 	beq.w	800f786 <_printf_float+0xb6>
 800f930:	f109 0901 	add.w	r9, r9, #1
 800f934:	e7e8      	b.n	800f908 <_printf_float+0x238>
 800f936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f938:	2b00      	cmp	r3, #0
 800f93a:	dc39      	bgt.n	800f9b0 <_printf_float+0x2e0>
 800f93c:	4a1b      	ldr	r2, [pc, #108]	@ (800f9ac <_printf_float+0x2dc>)
 800f93e:	2301      	movs	r3, #1
 800f940:	4631      	mov	r1, r6
 800f942:	4628      	mov	r0, r5
 800f944:	47b8      	blx	r7
 800f946:	3001      	adds	r0, #1
 800f948:	f43f af1d 	beq.w	800f786 <_printf_float+0xb6>
 800f94c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f950:	ea59 0303 	orrs.w	r3, r9, r3
 800f954:	d102      	bne.n	800f95c <_printf_float+0x28c>
 800f956:	6823      	ldr	r3, [r4, #0]
 800f958:	07d9      	lsls	r1, r3, #31
 800f95a:	d5d7      	bpl.n	800f90c <_printf_float+0x23c>
 800f95c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f960:	4631      	mov	r1, r6
 800f962:	4628      	mov	r0, r5
 800f964:	47b8      	blx	r7
 800f966:	3001      	adds	r0, #1
 800f968:	f43f af0d 	beq.w	800f786 <_printf_float+0xb6>
 800f96c:	f04f 0a00 	mov.w	sl, #0
 800f970:	f104 0b1a 	add.w	fp, r4, #26
 800f974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f976:	425b      	negs	r3, r3
 800f978:	4553      	cmp	r3, sl
 800f97a:	dc01      	bgt.n	800f980 <_printf_float+0x2b0>
 800f97c:	464b      	mov	r3, r9
 800f97e:	e793      	b.n	800f8a8 <_printf_float+0x1d8>
 800f980:	2301      	movs	r3, #1
 800f982:	465a      	mov	r2, fp
 800f984:	4631      	mov	r1, r6
 800f986:	4628      	mov	r0, r5
 800f988:	47b8      	blx	r7
 800f98a:	3001      	adds	r0, #1
 800f98c:	f43f aefb 	beq.w	800f786 <_printf_float+0xb6>
 800f990:	f10a 0a01 	add.w	sl, sl, #1
 800f994:	e7ee      	b.n	800f974 <_printf_float+0x2a4>
 800f996:	bf00      	nop
 800f998:	7fefffff 	.word	0x7fefffff
 800f99c:	08013e10 	.word	0x08013e10
 800f9a0:	08013e14 	.word	0x08013e14
 800f9a4:	08013e18 	.word	0x08013e18
 800f9a8:	08013e1c 	.word	0x08013e1c
 800f9ac:	08013e20 	.word	0x08013e20
 800f9b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f9b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f9b6:	4553      	cmp	r3, sl
 800f9b8:	bfa8      	it	ge
 800f9ba:	4653      	movge	r3, sl
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	4699      	mov	r9, r3
 800f9c0:	dc36      	bgt.n	800fa30 <_printf_float+0x360>
 800f9c2:	f04f 0b00 	mov.w	fp, #0
 800f9c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9ca:	f104 021a 	add.w	r2, r4, #26
 800f9ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f9d0:	9306      	str	r3, [sp, #24]
 800f9d2:	eba3 0309 	sub.w	r3, r3, r9
 800f9d6:	455b      	cmp	r3, fp
 800f9d8:	dc31      	bgt.n	800fa3e <_printf_float+0x36e>
 800f9da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9dc:	459a      	cmp	sl, r3
 800f9de:	dc3a      	bgt.n	800fa56 <_printf_float+0x386>
 800f9e0:	6823      	ldr	r3, [r4, #0]
 800f9e2:	07da      	lsls	r2, r3, #31
 800f9e4:	d437      	bmi.n	800fa56 <_printf_float+0x386>
 800f9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9e8:	ebaa 0903 	sub.w	r9, sl, r3
 800f9ec:	9b06      	ldr	r3, [sp, #24]
 800f9ee:	ebaa 0303 	sub.w	r3, sl, r3
 800f9f2:	4599      	cmp	r9, r3
 800f9f4:	bfa8      	it	ge
 800f9f6:	4699      	movge	r9, r3
 800f9f8:	f1b9 0f00 	cmp.w	r9, #0
 800f9fc:	dc33      	bgt.n	800fa66 <_printf_float+0x396>
 800f9fe:	f04f 0800 	mov.w	r8, #0
 800fa02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa06:	f104 0b1a 	add.w	fp, r4, #26
 800fa0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa0c:	ebaa 0303 	sub.w	r3, sl, r3
 800fa10:	eba3 0309 	sub.w	r3, r3, r9
 800fa14:	4543      	cmp	r3, r8
 800fa16:	f77f af79 	ble.w	800f90c <_printf_float+0x23c>
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	465a      	mov	r2, fp
 800fa1e:	4631      	mov	r1, r6
 800fa20:	4628      	mov	r0, r5
 800fa22:	47b8      	blx	r7
 800fa24:	3001      	adds	r0, #1
 800fa26:	f43f aeae 	beq.w	800f786 <_printf_float+0xb6>
 800fa2a:	f108 0801 	add.w	r8, r8, #1
 800fa2e:	e7ec      	b.n	800fa0a <_printf_float+0x33a>
 800fa30:	4642      	mov	r2, r8
 800fa32:	4631      	mov	r1, r6
 800fa34:	4628      	mov	r0, r5
 800fa36:	47b8      	blx	r7
 800fa38:	3001      	adds	r0, #1
 800fa3a:	d1c2      	bne.n	800f9c2 <_printf_float+0x2f2>
 800fa3c:	e6a3      	b.n	800f786 <_printf_float+0xb6>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	4631      	mov	r1, r6
 800fa42:	4628      	mov	r0, r5
 800fa44:	9206      	str	r2, [sp, #24]
 800fa46:	47b8      	blx	r7
 800fa48:	3001      	adds	r0, #1
 800fa4a:	f43f ae9c 	beq.w	800f786 <_printf_float+0xb6>
 800fa4e:	9a06      	ldr	r2, [sp, #24]
 800fa50:	f10b 0b01 	add.w	fp, fp, #1
 800fa54:	e7bb      	b.n	800f9ce <_printf_float+0x2fe>
 800fa56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa5a:	4631      	mov	r1, r6
 800fa5c:	4628      	mov	r0, r5
 800fa5e:	47b8      	blx	r7
 800fa60:	3001      	adds	r0, #1
 800fa62:	d1c0      	bne.n	800f9e6 <_printf_float+0x316>
 800fa64:	e68f      	b.n	800f786 <_printf_float+0xb6>
 800fa66:	9a06      	ldr	r2, [sp, #24]
 800fa68:	464b      	mov	r3, r9
 800fa6a:	4442      	add	r2, r8
 800fa6c:	4631      	mov	r1, r6
 800fa6e:	4628      	mov	r0, r5
 800fa70:	47b8      	blx	r7
 800fa72:	3001      	adds	r0, #1
 800fa74:	d1c3      	bne.n	800f9fe <_printf_float+0x32e>
 800fa76:	e686      	b.n	800f786 <_printf_float+0xb6>
 800fa78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fa7c:	f1ba 0f01 	cmp.w	sl, #1
 800fa80:	dc01      	bgt.n	800fa86 <_printf_float+0x3b6>
 800fa82:	07db      	lsls	r3, r3, #31
 800fa84:	d536      	bpl.n	800faf4 <_printf_float+0x424>
 800fa86:	2301      	movs	r3, #1
 800fa88:	4642      	mov	r2, r8
 800fa8a:	4631      	mov	r1, r6
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	47b8      	blx	r7
 800fa90:	3001      	adds	r0, #1
 800fa92:	f43f ae78 	beq.w	800f786 <_printf_float+0xb6>
 800fa96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa9a:	4631      	mov	r1, r6
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	47b8      	blx	r7
 800faa0:	3001      	adds	r0, #1
 800faa2:	f43f ae70 	beq.w	800f786 <_printf_float+0xb6>
 800faa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800faaa:	2200      	movs	r2, #0
 800faac:	2300      	movs	r3, #0
 800faae:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800fab2:	f7f1 f809 	bl	8000ac8 <__aeabi_dcmpeq>
 800fab6:	b9c0      	cbnz	r0, 800faea <_printf_float+0x41a>
 800fab8:	4653      	mov	r3, sl
 800faba:	f108 0201 	add.w	r2, r8, #1
 800fabe:	4631      	mov	r1, r6
 800fac0:	4628      	mov	r0, r5
 800fac2:	47b8      	blx	r7
 800fac4:	3001      	adds	r0, #1
 800fac6:	d10c      	bne.n	800fae2 <_printf_float+0x412>
 800fac8:	e65d      	b.n	800f786 <_printf_float+0xb6>
 800faca:	2301      	movs	r3, #1
 800facc:	465a      	mov	r2, fp
 800face:	4631      	mov	r1, r6
 800fad0:	4628      	mov	r0, r5
 800fad2:	47b8      	blx	r7
 800fad4:	3001      	adds	r0, #1
 800fad6:	f43f ae56 	beq.w	800f786 <_printf_float+0xb6>
 800fada:	f108 0801 	add.w	r8, r8, #1
 800fade:	45d0      	cmp	r8, sl
 800fae0:	dbf3      	blt.n	800faca <_printf_float+0x3fa>
 800fae2:	464b      	mov	r3, r9
 800fae4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fae8:	e6df      	b.n	800f8aa <_printf_float+0x1da>
 800faea:	f04f 0800 	mov.w	r8, #0
 800faee:	f104 0b1a 	add.w	fp, r4, #26
 800faf2:	e7f4      	b.n	800fade <_printf_float+0x40e>
 800faf4:	2301      	movs	r3, #1
 800faf6:	4642      	mov	r2, r8
 800faf8:	e7e1      	b.n	800fabe <_printf_float+0x3ee>
 800fafa:	2301      	movs	r3, #1
 800fafc:	464a      	mov	r2, r9
 800fafe:	4631      	mov	r1, r6
 800fb00:	4628      	mov	r0, r5
 800fb02:	47b8      	blx	r7
 800fb04:	3001      	adds	r0, #1
 800fb06:	f43f ae3e 	beq.w	800f786 <_printf_float+0xb6>
 800fb0a:	f108 0801 	add.w	r8, r8, #1
 800fb0e:	68e3      	ldr	r3, [r4, #12]
 800fb10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fb12:	1a5b      	subs	r3, r3, r1
 800fb14:	4543      	cmp	r3, r8
 800fb16:	dcf0      	bgt.n	800fafa <_printf_float+0x42a>
 800fb18:	e6fc      	b.n	800f914 <_printf_float+0x244>
 800fb1a:	f04f 0800 	mov.w	r8, #0
 800fb1e:	f104 0919 	add.w	r9, r4, #25
 800fb22:	e7f4      	b.n	800fb0e <_printf_float+0x43e>

0800fb24 <_printf_common>:
 800fb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb28:	4616      	mov	r6, r2
 800fb2a:	4698      	mov	r8, r3
 800fb2c:	688a      	ldr	r2, [r1, #8]
 800fb2e:	690b      	ldr	r3, [r1, #16]
 800fb30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fb34:	4293      	cmp	r3, r2
 800fb36:	bfb8      	it	lt
 800fb38:	4613      	movlt	r3, r2
 800fb3a:	6033      	str	r3, [r6, #0]
 800fb3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fb40:	4607      	mov	r7, r0
 800fb42:	460c      	mov	r4, r1
 800fb44:	b10a      	cbz	r2, 800fb4a <_printf_common+0x26>
 800fb46:	3301      	adds	r3, #1
 800fb48:	6033      	str	r3, [r6, #0]
 800fb4a:	6823      	ldr	r3, [r4, #0]
 800fb4c:	0699      	lsls	r1, r3, #26
 800fb4e:	bf42      	ittt	mi
 800fb50:	6833      	ldrmi	r3, [r6, #0]
 800fb52:	3302      	addmi	r3, #2
 800fb54:	6033      	strmi	r3, [r6, #0]
 800fb56:	6825      	ldr	r5, [r4, #0]
 800fb58:	f015 0506 	ands.w	r5, r5, #6
 800fb5c:	d106      	bne.n	800fb6c <_printf_common+0x48>
 800fb5e:	f104 0a19 	add.w	sl, r4, #25
 800fb62:	68e3      	ldr	r3, [r4, #12]
 800fb64:	6832      	ldr	r2, [r6, #0]
 800fb66:	1a9b      	subs	r3, r3, r2
 800fb68:	42ab      	cmp	r3, r5
 800fb6a:	dc26      	bgt.n	800fbba <_printf_common+0x96>
 800fb6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fb70:	6822      	ldr	r2, [r4, #0]
 800fb72:	3b00      	subs	r3, #0
 800fb74:	bf18      	it	ne
 800fb76:	2301      	movne	r3, #1
 800fb78:	0692      	lsls	r2, r2, #26
 800fb7a:	d42b      	bmi.n	800fbd4 <_printf_common+0xb0>
 800fb7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fb80:	4641      	mov	r1, r8
 800fb82:	4638      	mov	r0, r7
 800fb84:	47c8      	blx	r9
 800fb86:	3001      	adds	r0, #1
 800fb88:	d01e      	beq.n	800fbc8 <_printf_common+0xa4>
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	6922      	ldr	r2, [r4, #16]
 800fb8e:	f003 0306 	and.w	r3, r3, #6
 800fb92:	2b04      	cmp	r3, #4
 800fb94:	bf02      	ittt	eq
 800fb96:	68e5      	ldreq	r5, [r4, #12]
 800fb98:	6833      	ldreq	r3, [r6, #0]
 800fb9a:	1aed      	subeq	r5, r5, r3
 800fb9c:	68a3      	ldr	r3, [r4, #8]
 800fb9e:	bf0c      	ite	eq
 800fba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fba4:	2500      	movne	r5, #0
 800fba6:	4293      	cmp	r3, r2
 800fba8:	bfc4      	itt	gt
 800fbaa:	1a9b      	subgt	r3, r3, r2
 800fbac:	18ed      	addgt	r5, r5, r3
 800fbae:	2600      	movs	r6, #0
 800fbb0:	341a      	adds	r4, #26
 800fbb2:	42b5      	cmp	r5, r6
 800fbb4:	d11a      	bne.n	800fbec <_printf_common+0xc8>
 800fbb6:	2000      	movs	r0, #0
 800fbb8:	e008      	b.n	800fbcc <_printf_common+0xa8>
 800fbba:	2301      	movs	r3, #1
 800fbbc:	4652      	mov	r2, sl
 800fbbe:	4641      	mov	r1, r8
 800fbc0:	4638      	mov	r0, r7
 800fbc2:	47c8      	blx	r9
 800fbc4:	3001      	adds	r0, #1
 800fbc6:	d103      	bne.n	800fbd0 <_printf_common+0xac>
 800fbc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fbcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbd0:	3501      	adds	r5, #1
 800fbd2:	e7c6      	b.n	800fb62 <_printf_common+0x3e>
 800fbd4:	18e1      	adds	r1, r4, r3
 800fbd6:	1c5a      	adds	r2, r3, #1
 800fbd8:	2030      	movs	r0, #48	@ 0x30
 800fbda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fbde:	4422      	add	r2, r4
 800fbe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fbe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fbe8:	3302      	adds	r3, #2
 800fbea:	e7c7      	b.n	800fb7c <_printf_common+0x58>
 800fbec:	2301      	movs	r3, #1
 800fbee:	4622      	mov	r2, r4
 800fbf0:	4641      	mov	r1, r8
 800fbf2:	4638      	mov	r0, r7
 800fbf4:	47c8      	blx	r9
 800fbf6:	3001      	adds	r0, #1
 800fbf8:	d0e6      	beq.n	800fbc8 <_printf_common+0xa4>
 800fbfa:	3601      	adds	r6, #1
 800fbfc:	e7d9      	b.n	800fbb2 <_printf_common+0x8e>
	...

0800fc00 <_printf_i>:
 800fc00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc04:	7e0f      	ldrb	r7, [r1, #24]
 800fc06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fc08:	2f78      	cmp	r7, #120	@ 0x78
 800fc0a:	4691      	mov	r9, r2
 800fc0c:	4680      	mov	r8, r0
 800fc0e:	460c      	mov	r4, r1
 800fc10:	469a      	mov	sl, r3
 800fc12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fc16:	d807      	bhi.n	800fc28 <_printf_i+0x28>
 800fc18:	2f62      	cmp	r7, #98	@ 0x62
 800fc1a:	d80a      	bhi.n	800fc32 <_printf_i+0x32>
 800fc1c:	2f00      	cmp	r7, #0
 800fc1e:	f000 80d2 	beq.w	800fdc6 <_printf_i+0x1c6>
 800fc22:	2f58      	cmp	r7, #88	@ 0x58
 800fc24:	f000 80b9 	beq.w	800fd9a <_printf_i+0x19a>
 800fc28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fc30:	e03a      	b.n	800fca8 <_printf_i+0xa8>
 800fc32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fc36:	2b15      	cmp	r3, #21
 800fc38:	d8f6      	bhi.n	800fc28 <_printf_i+0x28>
 800fc3a:	a101      	add	r1, pc, #4	@ (adr r1, 800fc40 <_printf_i+0x40>)
 800fc3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc40:	0800fc99 	.word	0x0800fc99
 800fc44:	0800fcad 	.word	0x0800fcad
 800fc48:	0800fc29 	.word	0x0800fc29
 800fc4c:	0800fc29 	.word	0x0800fc29
 800fc50:	0800fc29 	.word	0x0800fc29
 800fc54:	0800fc29 	.word	0x0800fc29
 800fc58:	0800fcad 	.word	0x0800fcad
 800fc5c:	0800fc29 	.word	0x0800fc29
 800fc60:	0800fc29 	.word	0x0800fc29
 800fc64:	0800fc29 	.word	0x0800fc29
 800fc68:	0800fc29 	.word	0x0800fc29
 800fc6c:	0800fdad 	.word	0x0800fdad
 800fc70:	0800fcd7 	.word	0x0800fcd7
 800fc74:	0800fd67 	.word	0x0800fd67
 800fc78:	0800fc29 	.word	0x0800fc29
 800fc7c:	0800fc29 	.word	0x0800fc29
 800fc80:	0800fdcf 	.word	0x0800fdcf
 800fc84:	0800fc29 	.word	0x0800fc29
 800fc88:	0800fcd7 	.word	0x0800fcd7
 800fc8c:	0800fc29 	.word	0x0800fc29
 800fc90:	0800fc29 	.word	0x0800fc29
 800fc94:	0800fd6f 	.word	0x0800fd6f
 800fc98:	6833      	ldr	r3, [r6, #0]
 800fc9a:	1d1a      	adds	r2, r3, #4
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	6032      	str	r2, [r6, #0]
 800fca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fca4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fca8:	2301      	movs	r3, #1
 800fcaa:	e09d      	b.n	800fde8 <_printf_i+0x1e8>
 800fcac:	6833      	ldr	r3, [r6, #0]
 800fcae:	6820      	ldr	r0, [r4, #0]
 800fcb0:	1d19      	adds	r1, r3, #4
 800fcb2:	6031      	str	r1, [r6, #0]
 800fcb4:	0606      	lsls	r6, r0, #24
 800fcb6:	d501      	bpl.n	800fcbc <_printf_i+0xbc>
 800fcb8:	681d      	ldr	r5, [r3, #0]
 800fcba:	e003      	b.n	800fcc4 <_printf_i+0xc4>
 800fcbc:	0645      	lsls	r5, r0, #25
 800fcbe:	d5fb      	bpl.n	800fcb8 <_printf_i+0xb8>
 800fcc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fcc4:	2d00      	cmp	r5, #0
 800fcc6:	da03      	bge.n	800fcd0 <_printf_i+0xd0>
 800fcc8:	232d      	movs	r3, #45	@ 0x2d
 800fcca:	426d      	negs	r5, r5
 800fccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fcd0:	4859      	ldr	r0, [pc, #356]	@ (800fe38 <_printf_i+0x238>)
 800fcd2:	230a      	movs	r3, #10
 800fcd4:	e011      	b.n	800fcfa <_printf_i+0xfa>
 800fcd6:	6821      	ldr	r1, [r4, #0]
 800fcd8:	6833      	ldr	r3, [r6, #0]
 800fcda:	0608      	lsls	r0, r1, #24
 800fcdc:	f853 5b04 	ldr.w	r5, [r3], #4
 800fce0:	d402      	bmi.n	800fce8 <_printf_i+0xe8>
 800fce2:	0649      	lsls	r1, r1, #25
 800fce4:	bf48      	it	mi
 800fce6:	b2ad      	uxthmi	r5, r5
 800fce8:	2f6f      	cmp	r7, #111	@ 0x6f
 800fcea:	4853      	ldr	r0, [pc, #332]	@ (800fe38 <_printf_i+0x238>)
 800fcec:	6033      	str	r3, [r6, #0]
 800fcee:	bf14      	ite	ne
 800fcf0:	230a      	movne	r3, #10
 800fcf2:	2308      	moveq	r3, #8
 800fcf4:	2100      	movs	r1, #0
 800fcf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fcfa:	6866      	ldr	r6, [r4, #4]
 800fcfc:	60a6      	str	r6, [r4, #8]
 800fcfe:	2e00      	cmp	r6, #0
 800fd00:	bfa2      	ittt	ge
 800fd02:	6821      	ldrge	r1, [r4, #0]
 800fd04:	f021 0104 	bicge.w	r1, r1, #4
 800fd08:	6021      	strge	r1, [r4, #0]
 800fd0a:	b90d      	cbnz	r5, 800fd10 <_printf_i+0x110>
 800fd0c:	2e00      	cmp	r6, #0
 800fd0e:	d04b      	beq.n	800fda8 <_printf_i+0x1a8>
 800fd10:	4616      	mov	r6, r2
 800fd12:	fbb5 f1f3 	udiv	r1, r5, r3
 800fd16:	fb03 5711 	mls	r7, r3, r1, r5
 800fd1a:	5dc7      	ldrb	r7, [r0, r7]
 800fd1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fd20:	462f      	mov	r7, r5
 800fd22:	42bb      	cmp	r3, r7
 800fd24:	460d      	mov	r5, r1
 800fd26:	d9f4      	bls.n	800fd12 <_printf_i+0x112>
 800fd28:	2b08      	cmp	r3, #8
 800fd2a:	d10b      	bne.n	800fd44 <_printf_i+0x144>
 800fd2c:	6823      	ldr	r3, [r4, #0]
 800fd2e:	07df      	lsls	r7, r3, #31
 800fd30:	d508      	bpl.n	800fd44 <_printf_i+0x144>
 800fd32:	6923      	ldr	r3, [r4, #16]
 800fd34:	6861      	ldr	r1, [r4, #4]
 800fd36:	4299      	cmp	r1, r3
 800fd38:	bfde      	ittt	le
 800fd3a:	2330      	movle	r3, #48	@ 0x30
 800fd3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fd40:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800fd44:	1b92      	subs	r2, r2, r6
 800fd46:	6122      	str	r2, [r4, #16]
 800fd48:	f8cd a000 	str.w	sl, [sp]
 800fd4c:	464b      	mov	r3, r9
 800fd4e:	aa03      	add	r2, sp, #12
 800fd50:	4621      	mov	r1, r4
 800fd52:	4640      	mov	r0, r8
 800fd54:	f7ff fee6 	bl	800fb24 <_printf_common>
 800fd58:	3001      	adds	r0, #1
 800fd5a:	d14a      	bne.n	800fdf2 <_printf_i+0x1f2>
 800fd5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd60:	b004      	add	sp, #16
 800fd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd66:	6823      	ldr	r3, [r4, #0]
 800fd68:	f043 0320 	orr.w	r3, r3, #32
 800fd6c:	6023      	str	r3, [r4, #0]
 800fd6e:	4833      	ldr	r0, [pc, #204]	@ (800fe3c <_printf_i+0x23c>)
 800fd70:	2778      	movs	r7, #120	@ 0x78
 800fd72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fd76:	6823      	ldr	r3, [r4, #0]
 800fd78:	6831      	ldr	r1, [r6, #0]
 800fd7a:	061f      	lsls	r7, r3, #24
 800fd7c:	f851 5b04 	ldr.w	r5, [r1], #4
 800fd80:	d402      	bmi.n	800fd88 <_printf_i+0x188>
 800fd82:	065f      	lsls	r7, r3, #25
 800fd84:	bf48      	it	mi
 800fd86:	b2ad      	uxthmi	r5, r5
 800fd88:	6031      	str	r1, [r6, #0]
 800fd8a:	07d9      	lsls	r1, r3, #31
 800fd8c:	bf44      	itt	mi
 800fd8e:	f043 0320 	orrmi.w	r3, r3, #32
 800fd92:	6023      	strmi	r3, [r4, #0]
 800fd94:	b11d      	cbz	r5, 800fd9e <_printf_i+0x19e>
 800fd96:	2310      	movs	r3, #16
 800fd98:	e7ac      	b.n	800fcf4 <_printf_i+0xf4>
 800fd9a:	4827      	ldr	r0, [pc, #156]	@ (800fe38 <_printf_i+0x238>)
 800fd9c:	e7e9      	b.n	800fd72 <_printf_i+0x172>
 800fd9e:	6823      	ldr	r3, [r4, #0]
 800fda0:	f023 0320 	bic.w	r3, r3, #32
 800fda4:	6023      	str	r3, [r4, #0]
 800fda6:	e7f6      	b.n	800fd96 <_printf_i+0x196>
 800fda8:	4616      	mov	r6, r2
 800fdaa:	e7bd      	b.n	800fd28 <_printf_i+0x128>
 800fdac:	6833      	ldr	r3, [r6, #0]
 800fdae:	6825      	ldr	r5, [r4, #0]
 800fdb0:	6961      	ldr	r1, [r4, #20]
 800fdb2:	1d18      	adds	r0, r3, #4
 800fdb4:	6030      	str	r0, [r6, #0]
 800fdb6:	062e      	lsls	r6, r5, #24
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	d501      	bpl.n	800fdc0 <_printf_i+0x1c0>
 800fdbc:	6019      	str	r1, [r3, #0]
 800fdbe:	e002      	b.n	800fdc6 <_printf_i+0x1c6>
 800fdc0:	0668      	lsls	r0, r5, #25
 800fdc2:	d5fb      	bpl.n	800fdbc <_printf_i+0x1bc>
 800fdc4:	8019      	strh	r1, [r3, #0]
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	6123      	str	r3, [r4, #16]
 800fdca:	4616      	mov	r6, r2
 800fdcc:	e7bc      	b.n	800fd48 <_printf_i+0x148>
 800fdce:	6833      	ldr	r3, [r6, #0]
 800fdd0:	1d1a      	adds	r2, r3, #4
 800fdd2:	6032      	str	r2, [r6, #0]
 800fdd4:	681e      	ldr	r6, [r3, #0]
 800fdd6:	6862      	ldr	r2, [r4, #4]
 800fdd8:	2100      	movs	r1, #0
 800fdda:	4630      	mov	r0, r6
 800fddc:	f7f0 f9f8 	bl	80001d0 <memchr>
 800fde0:	b108      	cbz	r0, 800fde6 <_printf_i+0x1e6>
 800fde2:	1b80      	subs	r0, r0, r6
 800fde4:	6060      	str	r0, [r4, #4]
 800fde6:	6863      	ldr	r3, [r4, #4]
 800fde8:	6123      	str	r3, [r4, #16]
 800fdea:	2300      	movs	r3, #0
 800fdec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fdf0:	e7aa      	b.n	800fd48 <_printf_i+0x148>
 800fdf2:	6923      	ldr	r3, [r4, #16]
 800fdf4:	4632      	mov	r2, r6
 800fdf6:	4649      	mov	r1, r9
 800fdf8:	4640      	mov	r0, r8
 800fdfa:	47d0      	blx	sl
 800fdfc:	3001      	adds	r0, #1
 800fdfe:	d0ad      	beq.n	800fd5c <_printf_i+0x15c>
 800fe00:	6823      	ldr	r3, [r4, #0]
 800fe02:	079b      	lsls	r3, r3, #30
 800fe04:	d413      	bmi.n	800fe2e <_printf_i+0x22e>
 800fe06:	68e0      	ldr	r0, [r4, #12]
 800fe08:	9b03      	ldr	r3, [sp, #12]
 800fe0a:	4298      	cmp	r0, r3
 800fe0c:	bfb8      	it	lt
 800fe0e:	4618      	movlt	r0, r3
 800fe10:	e7a6      	b.n	800fd60 <_printf_i+0x160>
 800fe12:	2301      	movs	r3, #1
 800fe14:	4632      	mov	r2, r6
 800fe16:	4649      	mov	r1, r9
 800fe18:	4640      	mov	r0, r8
 800fe1a:	47d0      	blx	sl
 800fe1c:	3001      	adds	r0, #1
 800fe1e:	d09d      	beq.n	800fd5c <_printf_i+0x15c>
 800fe20:	3501      	adds	r5, #1
 800fe22:	68e3      	ldr	r3, [r4, #12]
 800fe24:	9903      	ldr	r1, [sp, #12]
 800fe26:	1a5b      	subs	r3, r3, r1
 800fe28:	42ab      	cmp	r3, r5
 800fe2a:	dcf2      	bgt.n	800fe12 <_printf_i+0x212>
 800fe2c:	e7eb      	b.n	800fe06 <_printf_i+0x206>
 800fe2e:	2500      	movs	r5, #0
 800fe30:	f104 0619 	add.w	r6, r4, #25
 800fe34:	e7f5      	b.n	800fe22 <_printf_i+0x222>
 800fe36:	bf00      	nop
 800fe38:	08013e22 	.word	0x08013e22
 800fe3c:	08013e33 	.word	0x08013e33

0800fe40 <sniprintf>:
 800fe40:	b40c      	push	{r2, r3}
 800fe42:	b530      	push	{r4, r5, lr}
 800fe44:	4b17      	ldr	r3, [pc, #92]	@ (800fea4 <sniprintf+0x64>)
 800fe46:	1e0c      	subs	r4, r1, #0
 800fe48:	681d      	ldr	r5, [r3, #0]
 800fe4a:	b09d      	sub	sp, #116	@ 0x74
 800fe4c:	da08      	bge.n	800fe60 <sniprintf+0x20>
 800fe4e:	238b      	movs	r3, #139	@ 0x8b
 800fe50:	602b      	str	r3, [r5, #0]
 800fe52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe56:	b01d      	add	sp, #116	@ 0x74
 800fe58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe5c:	b002      	add	sp, #8
 800fe5e:	4770      	bx	lr
 800fe60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fe64:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fe68:	bf14      	ite	ne
 800fe6a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800fe6e:	4623      	moveq	r3, r4
 800fe70:	9304      	str	r3, [sp, #16]
 800fe72:	9307      	str	r3, [sp, #28]
 800fe74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fe78:	9002      	str	r0, [sp, #8]
 800fe7a:	9006      	str	r0, [sp, #24]
 800fe7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fe80:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fe82:	ab21      	add	r3, sp, #132	@ 0x84
 800fe84:	a902      	add	r1, sp, #8
 800fe86:	4628      	mov	r0, r5
 800fe88:	9301      	str	r3, [sp, #4]
 800fe8a:	f001 f865 	bl	8010f58 <_svfiprintf_r>
 800fe8e:	1c43      	adds	r3, r0, #1
 800fe90:	bfbc      	itt	lt
 800fe92:	238b      	movlt	r3, #139	@ 0x8b
 800fe94:	602b      	strlt	r3, [r5, #0]
 800fe96:	2c00      	cmp	r4, #0
 800fe98:	d0dd      	beq.n	800fe56 <sniprintf+0x16>
 800fe9a:	9b02      	ldr	r3, [sp, #8]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	701a      	strb	r2, [r3, #0]
 800fea0:	e7d9      	b.n	800fe56 <sniprintf+0x16>
 800fea2:	bf00      	nop
 800fea4:	20000164 	.word	0x20000164

0800fea8 <siprintf>:
 800fea8:	b40e      	push	{r1, r2, r3}
 800feaa:	b500      	push	{lr}
 800feac:	b09c      	sub	sp, #112	@ 0x70
 800feae:	ab1d      	add	r3, sp, #116	@ 0x74
 800feb0:	9002      	str	r0, [sp, #8]
 800feb2:	9006      	str	r0, [sp, #24]
 800feb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800feb8:	4809      	ldr	r0, [pc, #36]	@ (800fee0 <siprintf+0x38>)
 800feba:	9107      	str	r1, [sp, #28]
 800febc:	9104      	str	r1, [sp, #16]
 800febe:	4909      	ldr	r1, [pc, #36]	@ (800fee4 <siprintf+0x3c>)
 800fec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fec4:	9105      	str	r1, [sp, #20]
 800fec6:	6800      	ldr	r0, [r0, #0]
 800fec8:	9301      	str	r3, [sp, #4]
 800feca:	a902      	add	r1, sp, #8
 800fecc:	f001 f844 	bl	8010f58 <_svfiprintf_r>
 800fed0:	9b02      	ldr	r3, [sp, #8]
 800fed2:	2200      	movs	r2, #0
 800fed4:	701a      	strb	r2, [r3, #0]
 800fed6:	b01c      	add	sp, #112	@ 0x70
 800fed8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fedc:	b003      	add	sp, #12
 800fede:	4770      	bx	lr
 800fee0:	20000164 	.word	0x20000164
 800fee4:	ffff0208 	.word	0xffff0208

0800fee8 <std>:
 800fee8:	2300      	movs	r3, #0
 800feea:	b510      	push	{r4, lr}
 800feec:	4604      	mov	r4, r0
 800feee:	e9c0 3300 	strd	r3, r3, [r0]
 800fef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fef6:	6083      	str	r3, [r0, #8]
 800fef8:	8181      	strh	r1, [r0, #12]
 800fefa:	6643      	str	r3, [r0, #100]	@ 0x64
 800fefc:	81c2      	strh	r2, [r0, #14]
 800fefe:	6183      	str	r3, [r0, #24]
 800ff00:	4619      	mov	r1, r3
 800ff02:	2208      	movs	r2, #8
 800ff04:	305c      	adds	r0, #92	@ 0x5c
 800ff06:	f000 f935 	bl	8010174 <memset>
 800ff0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ff40 <std+0x58>)
 800ff0c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ff0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ff44 <std+0x5c>)
 800ff10:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ff12:	4b0d      	ldr	r3, [pc, #52]	@ (800ff48 <std+0x60>)
 800ff14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ff16:	4b0d      	ldr	r3, [pc, #52]	@ (800ff4c <std+0x64>)
 800ff18:	6323      	str	r3, [r4, #48]	@ 0x30
 800ff1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ff50 <std+0x68>)
 800ff1c:	6224      	str	r4, [r4, #32]
 800ff1e:	429c      	cmp	r4, r3
 800ff20:	d006      	beq.n	800ff30 <std+0x48>
 800ff22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ff26:	4294      	cmp	r4, r2
 800ff28:	d002      	beq.n	800ff30 <std+0x48>
 800ff2a:	33d0      	adds	r3, #208	@ 0xd0
 800ff2c:	429c      	cmp	r4, r3
 800ff2e:	d105      	bne.n	800ff3c <std+0x54>
 800ff30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ff34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff38:	f000 b952 	b.w	80101e0 <__retarget_lock_init_recursive>
 800ff3c:	bd10      	pop	{r4, pc}
 800ff3e:	bf00      	nop
 800ff40:	08011b19 	.word	0x08011b19
 800ff44:	08011b3b 	.word	0x08011b3b
 800ff48:	08011b73 	.word	0x08011b73
 800ff4c:	08011b97 	.word	0x08011b97
 800ff50:	200054b8 	.word	0x200054b8

0800ff54 <stdio_exit_handler>:
 800ff54:	4a02      	ldr	r2, [pc, #8]	@ (800ff60 <stdio_exit_handler+0xc>)
 800ff56:	4903      	ldr	r1, [pc, #12]	@ (800ff64 <stdio_exit_handler+0x10>)
 800ff58:	4803      	ldr	r0, [pc, #12]	@ (800ff68 <stdio_exit_handler+0x14>)
 800ff5a:	f000 b8ed 	b.w	8010138 <_fwalk_sglue>
 800ff5e:	bf00      	nop
 800ff60:	20000158 	.word	0x20000158
 800ff64:	080113ad 	.word	0x080113ad
 800ff68:	20000168 	.word	0x20000168

0800ff6c <cleanup_stdio>:
 800ff6c:	6841      	ldr	r1, [r0, #4]
 800ff6e:	4b0c      	ldr	r3, [pc, #48]	@ (800ffa0 <cleanup_stdio+0x34>)
 800ff70:	4299      	cmp	r1, r3
 800ff72:	b510      	push	{r4, lr}
 800ff74:	4604      	mov	r4, r0
 800ff76:	d001      	beq.n	800ff7c <cleanup_stdio+0x10>
 800ff78:	f001 fa18 	bl	80113ac <_fflush_r>
 800ff7c:	68a1      	ldr	r1, [r4, #8]
 800ff7e:	4b09      	ldr	r3, [pc, #36]	@ (800ffa4 <cleanup_stdio+0x38>)
 800ff80:	4299      	cmp	r1, r3
 800ff82:	d002      	beq.n	800ff8a <cleanup_stdio+0x1e>
 800ff84:	4620      	mov	r0, r4
 800ff86:	f001 fa11 	bl	80113ac <_fflush_r>
 800ff8a:	68e1      	ldr	r1, [r4, #12]
 800ff8c:	4b06      	ldr	r3, [pc, #24]	@ (800ffa8 <cleanup_stdio+0x3c>)
 800ff8e:	4299      	cmp	r1, r3
 800ff90:	d004      	beq.n	800ff9c <cleanup_stdio+0x30>
 800ff92:	4620      	mov	r0, r4
 800ff94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff98:	f001 ba08 	b.w	80113ac <_fflush_r>
 800ff9c:	bd10      	pop	{r4, pc}
 800ff9e:	bf00      	nop
 800ffa0:	200054b8 	.word	0x200054b8
 800ffa4:	20005520 	.word	0x20005520
 800ffa8:	20005588 	.word	0x20005588

0800ffac <global_stdio_init.part.0>:
 800ffac:	b510      	push	{r4, lr}
 800ffae:	4b0b      	ldr	r3, [pc, #44]	@ (800ffdc <global_stdio_init.part.0+0x30>)
 800ffb0:	4c0b      	ldr	r4, [pc, #44]	@ (800ffe0 <global_stdio_init.part.0+0x34>)
 800ffb2:	4a0c      	ldr	r2, [pc, #48]	@ (800ffe4 <global_stdio_init.part.0+0x38>)
 800ffb4:	601a      	str	r2, [r3, #0]
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	2200      	movs	r2, #0
 800ffba:	2104      	movs	r1, #4
 800ffbc:	f7ff ff94 	bl	800fee8 <std>
 800ffc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	2109      	movs	r1, #9
 800ffc8:	f7ff ff8e 	bl	800fee8 <std>
 800ffcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ffd0:	2202      	movs	r2, #2
 800ffd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffd6:	2112      	movs	r1, #18
 800ffd8:	f7ff bf86 	b.w	800fee8 <std>
 800ffdc:	200055f0 	.word	0x200055f0
 800ffe0:	200054b8 	.word	0x200054b8
 800ffe4:	0800ff55 	.word	0x0800ff55

0800ffe8 <__sfp_lock_acquire>:
 800ffe8:	4801      	ldr	r0, [pc, #4]	@ (800fff0 <__sfp_lock_acquire+0x8>)
 800ffea:	f000 b8fa 	b.w	80101e2 <__retarget_lock_acquire_recursive>
 800ffee:	bf00      	nop
 800fff0:	200055f5 	.word	0x200055f5

0800fff4 <__sfp_lock_release>:
 800fff4:	4801      	ldr	r0, [pc, #4]	@ (800fffc <__sfp_lock_release+0x8>)
 800fff6:	f000 b8f5 	b.w	80101e4 <__retarget_lock_release_recursive>
 800fffa:	bf00      	nop
 800fffc:	200055f5 	.word	0x200055f5

08010000 <__sinit>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4604      	mov	r4, r0
 8010004:	f7ff fff0 	bl	800ffe8 <__sfp_lock_acquire>
 8010008:	6a23      	ldr	r3, [r4, #32]
 801000a:	b11b      	cbz	r3, 8010014 <__sinit+0x14>
 801000c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010010:	f7ff bff0 	b.w	800fff4 <__sfp_lock_release>
 8010014:	4b04      	ldr	r3, [pc, #16]	@ (8010028 <__sinit+0x28>)
 8010016:	6223      	str	r3, [r4, #32]
 8010018:	4b04      	ldr	r3, [pc, #16]	@ (801002c <__sinit+0x2c>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d1f5      	bne.n	801000c <__sinit+0xc>
 8010020:	f7ff ffc4 	bl	800ffac <global_stdio_init.part.0>
 8010024:	e7f2      	b.n	801000c <__sinit+0xc>
 8010026:	bf00      	nop
 8010028:	0800ff6d 	.word	0x0800ff6d
 801002c:	200055f0 	.word	0x200055f0

08010030 <_strtol_l.constprop.0>:
 8010030:	2b24      	cmp	r3, #36	@ 0x24
 8010032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010036:	4686      	mov	lr, r0
 8010038:	4690      	mov	r8, r2
 801003a:	d801      	bhi.n	8010040 <_strtol_l.constprop.0+0x10>
 801003c:	2b01      	cmp	r3, #1
 801003e:	d106      	bne.n	801004e <_strtol_l.constprop.0+0x1e>
 8010040:	f000 f8a4 	bl	801018c <__errno>
 8010044:	2316      	movs	r3, #22
 8010046:	6003      	str	r3, [r0, #0]
 8010048:	2000      	movs	r0, #0
 801004a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801004e:	4834      	ldr	r0, [pc, #208]	@ (8010120 <_strtol_l.constprop.0+0xf0>)
 8010050:	460d      	mov	r5, r1
 8010052:	462a      	mov	r2, r5
 8010054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010058:	5d06      	ldrb	r6, [r0, r4]
 801005a:	f016 0608 	ands.w	r6, r6, #8
 801005e:	d1f8      	bne.n	8010052 <_strtol_l.constprop.0+0x22>
 8010060:	2c2d      	cmp	r4, #45	@ 0x2d
 8010062:	d12d      	bne.n	80100c0 <_strtol_l.constprop.0+0x90>
 8010064:	782c      	ldrb	r4, [r5, #0]
 8010066:	2601      	movs	r6, #1
 8010068:	1c95      	adds	r5, r2, #2
 801006a:	f033 0210 	bics.w	r2, r3, #16
 801006e:	d109      	bne.n	8010084 <_strtol_l.constprop.0+0x54>
 8010070:	2c30      	cmp	r4, #48	@ 0x30
 8010072:	d12a      	bne.n	80100ca <_strtol_l.constprop.0+0x9a>
 8010074:	782a      	ldrb	r2, [r5, #0]
 8010076:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801007a:	2a58      	cmp	r2, #88	@ 0x58
 801007c:	d125      	bne.n	80100ca <_strtol_l.constprop.0+0x9a>
 801007e:	786c      	ldrb	r4, [r5, #1]
 8010080:	2310      	movs	r3, #16
 8010082:	3502      	adds	r5, #2
 8010084:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010088:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801008c:	2200      	movs	r2, #0
 801008e:	fbbc f9f3 	udiv	r9, ip, r3
 8010092:	4610      	mov	r0, r2
 8010094:	fb03 ca19 	mls	sl, r3, r9, ip
 8010098:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801009c:	2f09      	cmp	r7, #9
 801009e:	d81b      	bhi.n	80100d8 <_strtol_l.constprop.0+0xa8>
 80100a0:	463c      	mov	r4, r7
 80100a2:	42a3      	cmp	r3, r4
 80100a4:	dd27      	ble.n	80100f6 <_strtol_l.constprop.0+0xc6>
 80100a6:	1c57      	adds	r7, r2, #1
 80100a8:	d007      	beq.n	80100ba <_strtol_l.constprop.0+0x8a>
 80100aa:	4581      	cmp	r9, r0
 80100ac:	d320      	bcc.n	80100f0 <_strtol_l.constprop.0+0xc0>
 80100ae:	d101      	bne.n	80100b4 <_strtol_l.constprop.0+0x84>
 80100b0:	45a2      	cmp	sl, r4
 80100b2:	db1d      	blt.n	80100f0 <_strtol_l.constprop.0+0xc0>
 80100b4:	fb00 4003 	mla	r0, r0, r3, r4
 80100b8:	2201      	movs	r2, #1
 80100ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80100be:	e7eb      	b.n	8010098 <_strtol_l.constprop.0+0x68>
 80100c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80100c2:	bf04      	itt	eq
 80100c4:	782c      	ldrbeq	r4, [r5, #0]
 80100c6:	1c95      	addeq	r5, r2, #2
 80100c8:	e7cf      	b.n	801006a <_strtol_l.constprop.0+0x3a>
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1da      	bne.n	8010084 <_strtol_l.constprop.0+0x54>
 80100ce:	2c30      	cmp	r4, #48	@ 0x30
 80100d0:	bf0c      	ite	eq
 80100d2:	2308      	moveq	r3, #8
 80100d4:	230a      	movne	r3, #10
 80100d6:	e7d5      	b.n	8010084 <_strtol_l.constprop.0+0x54>
 80100d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80100dc:	2f19      	cmp	r7, #25
 80100de:	d801      	bhi.n	80100e4 <_strtol_l.constprop.0+0xb4>
 80100e0:	3c37      	subs	r4, #55	@ 0x37
 80100e2:	e7de      	b.n	80100a2 <_strtol_l.constprop.0+0x72>
 80100e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80100e8:	2f19      	cmp	r7, #25
 80100ea:	d804      	bhi.n	80100f6 <_strtol_l.constprop.0+0xc6>
 80100ec:	3c57      	subs	r4, #87	@ 0x57
 80100ee:	e7d8      	b.n	80100a2 <_strtol_l.constprop.0+0x72>
 80100f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80100f4:	e7e1      	b.n	80100ba <_strtol_l.constprop.0+0x8a>
 80100f6:	1c53      	adds	r3, r2, #1
 80100f8:	d108      	bne.n	801010c <_strtol_l.constprop.0+0xdc>
 80100fa:	2322      	movs	r3, #34	@ 0x22
 80100fc:	f8ce 3000 	str.w	r3, [lr]
 8010100:	4660      	mov	r0, ip
 8010102:	f1b8 0f00 	cmp.w	r8, #0
 8010106:	d0a0      	beq.n	801004a <_strtol_l.constprop.0+0x1a>
 8010108:	1e69      	subs	r1, r5, #1
 801010a:	e006      	b.n	801011a <_strtol_l.constprop.0+0xea>
 801010c:	b106      	cbz	r6, 8010110 <_strtol_l.constprop.0+0xe0>
 801010e:	4240      	negs	r0, r0
 8010110:	f1b8 0f00 	cmp.w	r8, #0
 8010114:	d099      	beq.n	801004a <_strtol_l.constprop.0+0x1a>
 8010116:	2a00      	cmp	r2, #0
 8010118:	d1f6      	bne.n	8010108 <_strtol_l.constprop.0+0xd8>
 801011a:	f8c8 1000 	str.w	r1, [r8]
 801011e:	e794      	b.n	801004a <_strtol_l.constprop.0+0x1a>
 8010120:	08013e45 	.word	0x08013e45

08010124 <strtol>:
 8010124:	4613      	mov	r3, r2
 8010126:	460a      	mov	r2, r1
 8010128:	4601      	mov	r1, r0
 801012a:	4802      	ldr	r0, [pc, #8]	@ (8010134 <strtol+0x10>)
 801012c:	6800      	ldr	r0, [r0, #0]
 801012e:	f7ff bf7f 	b.w	8010030 <_strtol_l.constprop.0>
 8010132:	bf00      	nop
 8010134:	20000164 	.word	0x20000164

08010138 <_fwalk_sglue>:
 8010138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801013c:	4607      	mov	r7, r0
 801013e:	4688      	mov	r8, r1
 8010140:	4614      	mov	r4, r2
 8010142:	2600      	movs	r6, #0
 8010144:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010148:	f1b9 0901 	subs.w	r9, r9, #1
 801014c:	d505      	bpl.n	801015a <_fwalk_sglue+0x22>
 801014e:	6824      	ldr	r4, [r4, #0]
 8010150:	2c00      	cmp	r4, #0
 8010152:	d1f7      	bne.n	8010144 <_fwalk_sglue+0xc>
 8010154:	4630      	mov	r0, r6
 8010156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801015a:	89ab      	ldrh	r3, [r5, #12]
 801015c:	2b01      	cmp	r3, #1
 801015e:	d907      	bls.n	8010170 <_fwalk_sglue+0x38>
 8010160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010164:	3301      	adds	r3, #1
 8010166:	d003      	beq.n	8010170 <_fwalk_sglue+0x38>
 8010168:	4629      	mov	r1, r5
 801016a:	4638      	mov	r0, r7
 801016c:	47c0      	blx	r8
 801016e:	4306      	orrs	r6, r0
 8010170:	3568      	adds	r5, #104	@ 0x68
 8010172:	e7e9      	b.n	8010148 <_fwalk_sglue+0x10>

08010174 <memset>:
 8010174:	4402      	add	r2, r0
 8010176:	4603      	mov	r3, r0
 8010178:	4293      	cmp	r3, r2
 801017a:	d100      	bne.n	801017e <memset+0xa>
 801017c:	4770      	bx	lr
 801017e:	f803 1b01 	strb.w	r1, [r3], #1
 8010182:	e7f9      	b.n	8010178 <memset+0x4>

08010184 <_localeconv_r>:
 8010184:	4800      	ldr	r0, [pc, #0]	@ (8010188 <_localeconv_r+0x4>)
 8010186:	4770      	bx	lr
 8010188:	200002a4 	.word	0x200002a4

0801018c <__errno>:
 801018c:	4b01      	ldr	r3, [pc, #4]	@ (8010194 <__errno+0x8>)
 801018e:	6818      	ldr	r0, [r3, #0]
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop
 8010194:	20000164 	.word	0x20000164

08010198 <__libc_init_array>:
 8010198:	b570      	push	{r4, r5, r6, lr}
 801019a:	4d0d      	ldr	r5, [pc, #52]	@ (80101d0 <__libc_init_array+0x38>)
 801019c:	4c0d      	ldr	r4, [pc, #52]	@ (80101d4 <__libc_init_array+0x3c>)
 801019e:	1b64      	subs	r4, r4, r5
 80101a0:	10a4      	asrs	r4, r4, #2
 80101a2:	2600      	movs	r6, #0
 80101a4:	42a6      	cmp	r6, r4
 80101a6:	d109      	bne.n	80101bc <__libc_init_array+0x24>
 80101a8:	4d0b      	ldr	r5, [pc, #44]	@ (80101d8 <__libc_init_array+0x40>)
 80101aa:	4c0c      	ldr	r4, [pc, #48]	@ (80101dc <__libc_init_array+0x44>)
 80101ac:	f002 ff46 	bl	801303c <_init>
 80101b0:	1b64      	subs	r4, r4, r5
 80101b2:	10a4      	asrs	r4, r4, #2
 80101b4:	2600      	movs	r6, #0
 80101b6:	42a6      	cmp	r6, r4
 80101b8:	d105      	bne.n	80101c6 <__libc_init_array+0x2e>
 80101ba:	bd70      	pop	{r4, r5, r6, pc}
 80101bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80101c0:	4798      	blx	r3
 80101c2:	3601      	adds	r6, #1
 80101c4:	e7ee      	b.n	80101a4 <__libc_init_array+0xc>
 80101c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80101ca:	4798      	blx	r3
 80101cc:	3601      	adds	r6, #1
 80101ce:	e7f2      	b.n	80101b6 <__libc_init_array+0x1e>
 80101d0:	08014578 	.word	0x08014578
 80101d4:	08014578 	.word	0x08014578
 80101d8:	08014578 	.word	0x08014578
 80101dc:	0801457c 	.word	0x0801457c

080101e0 <__retarget_lock_init_recursive>:
 80101e0:	4770      	bx	lr

080101e2 <__retarget_lock_acquire_recursive>:
 80101e2:	4770      	bx	lr

080101e4 <__retarget_lock_release_recursive>:
 80101e4:	4770      	bx	lr

080101e6 <memcpy>:
 80101e6:	440a      	add	r2, r1
 80101e8:	4291      	cmp	r1, r2
 80101ea:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80101ee:	d100      	bne.n	80101f2 <memcpy+0xc>
 80101f0:	4770      	bx	lr
 80101f2:	b510      	push	{r4, lr}
 80101f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101fc:	4291      	cmp	r1, r2
 80101fe:	d1f9      	bne.n	80101f4 <memcpy+0xe>
 8010200:	bd10      	pop	{r4, pc}

08010202 <quorem>:
 8010202:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010206:	6903      	ldr	r3, [r0, #16]
 8010208:	690c      	ldr	r4, [r1, #16]
 801020a:	42a3      	cmp	r3, r4
 801020c:	4607      	mov	r7, r0
 801020e:	db7e      	blt.n	801030e <quorem+0x10c>
 8010210:	3c01      	subs	r4, #1
 8010212:	f101 0814 	add.w	r8, r1, #20
 8010216:	00a3      	lsls	r3, r4, #2
 8010218:	f100 0514 	add.w	r5, r0, #20
 801021c:	9300      	str	r3, [sp, #0]
 801021e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010222:	9301      	str	r3, [sp, #4]
 8010224:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801022c:	3301      	adds	r3, #1
 801022e:	429a      	cmp	r2, r3
 8010230:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010234:	fbb2 f6f3 	udiv	r6, r2, r3
 8010238:	d32e      	bcc.n	8010298 <quorem+0x96>
 801023a:	f04f 0a00 	mov.w	sl, #0
 801023e:	46c4      	mov	ip, r8
 8010240:	46ae      	mov	lr, r5
 8010242:	46d3      	mov	fp, sl
 8010244:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010248:	b298      	uxth	r0, r3
 801024a:	fb06 a000 	mla	r0, r6, r0, sl
 801024e:	0c02      	lsrs	r2, r0, #16
 8010250:	0c1b      	lsrs	r3, r3, #16
 8010252:	fb06 2303 	mla	r3, r6, r3, r2
 8010256:	f8de 2000 	ldr.w	r2, [lr]
 801025a:	b280      	uxth	r0, r0
 801025c:	b292      	uxth	r2, r2
 801025e:	1a12      	subs	r2, r2, r0
 8010260:	445a      	add	r2, fp
 8010262:	f8de 0000 	ldr.w	r0, [lr]
 8010266:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801026a:	b29b      	uxth	r3, r3
 801026c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010270:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010274:	b292      	uxth	r2, r2
 8010276:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801027a:	45e1      	cmp	r9, ip
 801027c:	f84e 2b04 	str.w	r2, [lr], #4
 8010280:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010284:	d2de      	bcs.n	8010244 <quorem+0x42>
 8010286:	9b00      	ldr	r3, [sp, #0]
 8010288:	58eb      	ldr	r3, [r5, r3]
 801028a:	b92b      	cbnz	r3, 8010298 <quorem+0x96>
 801028c:	9b01      	ldr	r3, [sp, #4]
 801028e:	3b04      	subs	r3, #4
 8010290:	429d      	cmp	r5, r3
 8010292:	461a      	mov	r2, r3
 8010294:	d32f      	bcc.n	80102f6 <quorem+0xf4>
 8010296:	613c      	str	r4, [r7, #16]
 8010298:	4638      	mov	r0, r7
 801029a:	f001 fb35 	bl	8011908 <__mcmp>
 801029e:	2800      	cmp	r0, #0
 80102a0:	db25      	blt.n	80102ee <quorem+0xec>
 80102a2:	4629      	mov	r1, r5
 80102a4:	2000      	movs	r0, #0
 80102a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80102aa:	f8d1 c000 	ldr.w	ip, [r1]
 80102ae:	fa1f fe82 	uxth.w	lr, r2
 80102b2:	fa1f f38c 	uxth.w	r3, ip
 80102b6:	eba3 030e 	sub.w	r3, r3, lr
 80102ba:	4403      	add	r3, r0
 80102bc:	0c12      	lsrs	r2, r2, #16
 80102be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80102c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102cc:	45c1      	cmp	r9, r8
 80102ce:	f841 3b04 	str.w	r3, [r1], #4
 80102d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80102d6:	d2e6      	bcs.n	80102a6 <quorem+0xa4>
 80102d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102e0:	b922      	cbnz	r2, 80102ec <quorem+0xea>
 80102e2:	3b04      	subs	r3, #4
 80102e4:	429d      	cmp	r5, r3
 80102e6:	461a      	mov	r2, r3
 80102e8:	d30b      	bcc.n	8010302 <quorem+0x100>
 80102ea:	613c      	str	r4, [r7, #16]
 80102ec:	3601      	adds	r6, #1
 80102ee:	4630      	mov	r0, r6
 80102f0:	b003      	add	sp, #12
 80102f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102f6:	6812      	ldr	r2, [r2, #0]
 80102f8:	3b04      	subs	r3, #4
 80102fa:	2a00      	cmp	r2, #0
 80102fc:	d1cb      	bne.n	8010296 <quorem+0x94>
 80102fe:	3c01      	subs	r4, #1
 8010300:	e7c6      	b.n	8010290 <quorem+0x8e>
 8010302:	6812      	ldr	r2, [r2, #0]
 8010304:	3b04      	subs	r3, #4
 8010306:	2a00      	cmp	r2, #0
 8010308:	d1ef      	bne.n	80102ea <quorem+0xe8>
 801030a:	3c01      	subs	r4, #1
 801030c:	e7ea      	b.n	80102e4 <quorem+0xe2>
 801030e:	2000      	movs	r0, #0
 8010310:	e7ee      	b.n	80102f0 <quorem+0xee>
 8010312:	0000      	movs	r0, r0
 8010314:	0000      	movs	r0, r0
	...

08010318 <_dtoa_r>:
 8010318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801031c:	69c7      	ldr	r7, [r0, #28]
 801031e:	b099      	sub	sp, #100	@ 0x64
 8010320:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010324:	ec55 4b10 	vmov	r4, r5, d0
 8010328:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801032a:	9109      	str	r1, [sp, #36]	@ 0x24
 801032c:	4683      	mov	fp, r0
 801032e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010330:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010332:	b97f      	cbnz	r7, 8010354 <_dtoa_r+0x3c>
 8010334:	2010      	movs	r0, #16
 8010336:	f000 ff0b 	bl	8011150 <malloc>
 801033a:	4602      	mov	r2, r0
 801033c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010340:	b920      	cbnz	r0, 801034c <_dtoa_r+0x34>
 8010342:	4ba7      	ldr	r3, [pc, #668]	@ (80105e0 <_dtoa_r+0x2c8>)
 8010344:	21ef      	movs	r1, #239	@ 0xef
 8010346:	48a7      	ldr	r0, [pc, #668]	@ (80105e4 <_dtoa_r+0x2cc>)
 8010348:	f001 fcc8 	bl	8011cdc <__assert_func>
 801034c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010350:	6007      	str	r7, [r0, #0]
 8010352:	60c7      	str	r7, [r0, #12]
 8010354:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010358:	6819      	ldr	r1, [r3, #0]
 801035a:	b159      	cbz	r1, 8010374 <_dtoa_r+0x5c>
 801035c:	685a      	ldr	r2, [r3, #4]
 801035e:	604a      	str	r2, [r1, #4]
 8010360:	2301      	movs	r3, #1
 8010362:	4093      	lsls	r3, r2
 8010364:	608b      	str	r3, [r1, #8]
 8010366:	4658      	mov	r0, fp
 8010368:	f001 f894 	bl	8011494 <_Bfree>
 801036c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010370:	2200      	movs	r2, #0
 8010372:	601a      	str	r2, [r3, #0]
 8010374:	1e2b      	subs	r3, r5, #0
 8010376:	bfb9      	ittee	lt
 8010378:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801037c:	9303      	strlt	r3, [sp, #12]
 801037e:	2300      	movge	r3, #0
 8010380:	6033      	strge	r3, [r6, #0]
 8010382:	9f03      	ldr	r7, [sp, #12]
 8010384:	4b98      	ldr	r3, [pc, #608]	@ (80105e8 <_dtoa_r+0x2d0>)
 8010386:	bfbc      	itt	lt
 8010388:	2201      	movlt	r2, #1
 801038a:	6032      	strlt	r2, [r6, #0]
 801038c:	43bb      	bics	r3, r7
 801038e:	d112      	bne.n	80103b6 <_dtoa_r+0x9e>
 8010390:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010392:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010396:	6013      	str	r3, [r2, #0]
 8010398:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801039c:	4323      	orrs	r3, r4
 801039e:	f000 854d 	beq.w	8010e3c <_dtoa_r+0xb24>
 80103a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80103a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80105fc <_dtoa_r+0x2e4>
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f000 854f 	beq.w	8010e4c <_dtoa_r+0xb34>
 80103ae:	f10a 0303 	add.w	r3, sl, #3
 80103b2:	f000 bd49 	b.w	8010e48 <_dtoa_r+0xb30>
 80103b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103ba:	2200      	movs	r2, #0
 80103bc:	ec51 0b17 	vmov	r0, r1, d7
 80103c0:	2300      	movs	r3, #0
 80103c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80103c6:	f7f0 fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80103ca:	4680      	mov	r8, r0
 80103cc:	b158      	cbz	r0, 80103e6 <_dtoa_r+0xce>
 80103ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80103d0:	2301      	movs	r3, #1
 80103d2:	6013      	str	r3, [r2, #0]
 80103d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80103d6:	b113      	cbz	r3, 80103de <_dtoa_r+0xc6>
 80103d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80103da:	4b84      	ldr	r3, [pc, #528]	@ (80105ec <_dtoa_r+0x2d4>)
 80103dc:	6013      	str	r3, [r2, #0]
 80103de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010600 <_dtoa_r+0x2e8>
 80103e2:	f000 bd33 	b.w	8010e4c <_dtoa_r+0xb34>
 80103e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80103ea:	aa16      	add	r2, sp, #88	@ 0x58
 80103ec:	a917      	add	r1, sp, #92	@ 0x5c
 80103ee:	4658      	mov	r0, fp
 80103f0:	f001 fb3a 	bl	8011a68 <__d2b>
 80103f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80103f8:	4681      	mov	r9, r0
 80103fa:	2e00      	cmp	r6, #0
 80103fc:	d077      	beq.n	80104ee <_dtoa_r+0x1d6>
 80103fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010400:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801040c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010410:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010414:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010418:	4619      	mov	r1, r3
 801041a:	2200      	movs	r2, #0
 801041c:	4b74      	ldr	r3, [pc, #464]	@ (80105f0 <_dtoa_r+0x2d8>)
 801041e:	f7ef ff33 	bl	8000288 <__aeabi_dsub>
 8010422:	a369      	add	r3, pc, #420	@ (adr r3, 80105c8 <_dtoa_r+0x2b0>)
 8010424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010428:	f7f0 f8e6 	bl	80005f8 <__aeabi_dmul>
 801042c:	a368      	add	r3, pc, #416	@ (adr r3, 80105d0 <_dtoa_r+0x2b8>)
 801042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010432:	f7ef ff2b 	bl	800028c <__adddf3>
 8010436:	4604      	mov	r4, r0
 8010438:	4630      	mov	r0, r6
 801043a:	460d      	mov	r5, r1
 801043c:	f7f0 f872 	bl	8000524 <__aeabi_i2d>
 8010440:	a365      	add	r3, pc, #404	@ (adr r3, 80105d8 <_dtoa_r+0x2c0>)
 8010442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010446:	f7f0 f8d7 	bl	80005f8 <__aeabi_dmul>
 801044a:	4602      	mov	r2, r0
 801044c:	460b      	mov	r3, r1
 801044e:	4620      	mov	r0, r4
 8010450:	4629      	mov	r1, r5
 8010452:	f7ef ff1b 	bl	800028c <__adddf3>
 8010456:	4604      	mov	r4, r0
 8010458:	460d      	mov	r5, r1
 801045a:	f7f0 fb7d 	bl	8000b58 <__aeabi_d2iz>
 801045e:	2200      	movs	r2, #0
 8010460:	4607      	mov	r7, r0
 8010462:	2300      	movs	r3, #0
 8010464:	4620      	mov	r0, r4
 8010466:	4629      	mov	r1, r5
 8010468:	f7f0 fb38 	bl	8000adc <__aeabi_dcmplt>
 801046c:	b140      	cbz	r0, 8010480 <_dtoa_r+0x168>
 801046e:	4638      	mov	r0, r7
 8010470:	f7f0 f858 	bl	8000524 <__aeabi_i2d>
 8010474:	4622      	mov	r2, r4
 8010476:	462b      	mov	r3, r5
 8010478:	f7f0 fb26 	bl	8000ac8 <__aeabi_dcmpeq>
 801047c:	b900      	cbnz	r0, 8010480 <_dtoa_r+0x168>
 801047e:	3f01      	subs	r7, #1
 8010480:	2f16      	cmp	r7, #22
 8010482:	d851      	bhi.n	8010528 <_dtoa_r+0x210>
 8010484:	4b5b      	ldr	r3, [pc, #364]	@ (80105f4 <_dtoa_r+0x2dc>)
 8010486:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801048a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010492:	f7f0 fb23 	bl	8000adc <__aeabi_dcmplt>
 8010496:	2800      	cmp	r0, #0
 8010498:	d048      	beq.n	801052c <_dtoa_r+0x214>
 801049a:	3f01      	subs	r7, #1
 801049c:	2300      	movs	r3, #0
 801049e:	9312      	str	r3, [sp, #72]	@ 0x48
 80104a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80104a2:	1b9b      	subs	r3, r3, r6
 80104a4:	1e5a      	subs	r2, r3, #1
 80104a6:	bf44      	itt	mi
 80104a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80104ac:	2300      	movmi	r3, #0
 80104ae:	9208      	str	r2, [sp, #32]
 80104b0:	bf54      	ite	pl
 80104b2:	f04f 0800 	movpl.w	r8, #0
 80104b6:	9308      	strmi	r3, [sp, #32]
 80104b8:	2f00      	cmp	r7, #0
 80104ba:	db39      	blt.n	8010530 <_dtoa_r+0x218>
 80104bc:	9b08      	ldr	r3, [sp, #32]
 80104be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80104c0:	443b      	add	r3, r7
 80104c2:	9308      	str	r3, [sp, #32]
 80104c4:	2300      	movs	r3, #0
 80104c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80104c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ca:	2b09      	cmp	r3, #9
 80104cc:	d864      	bhi.n	8010598 <_dtoa_r+0x280>
 80104ce:	2b05      	cmp	r3, #5
 80104d0:	bfc4      	itt	gt
 80104d2:	3b04      	subgt	r3, #4
 80104d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80104d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104d8:	f1a3 0302 	sub.w	r3, r3, #2
 80104dc:	bfcc      	ite	gt
 80104de:	2400      	movgt	r4, #0
 80104e0:	2401      	movle	r4, #1
 80104e2:	2b03      	cmp	r3, #3
 80104e4:	d863      	bhi.n	80105ae <_dtoa_r+0x296>
 80104e6:	e8df f003 	tbb	[pc, r3]
 80104ea:	372a      	.short	0x372a
 80104ec:	5535      	.short	0x5535
 80104ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80104f2:	441e      	add	r6, r3
 80104f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80104f8:	2b20      	cmp	r3, #32
 80104fa:	bfc1      	itttt	gt
 80104fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010500:	409f      	lslgt	r7, r3
 8010502:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010506:	fa24 f303 	lsrgt.w	r3, r4, r3
 801050a:	bfd6      	itet	le
 801050c:	f1c3 0320 	rsble	r3, r3, #32
 8010510:	ea47 0003 	orrgt.w	r0, r7, r3
 8010514:	fa04 f003 	lslle.w	r0, r4, r3
 8010518:	f7ef fff4 	bl	8000504 <__aeabi_ui2d>
 801051c:	2201      	movs	r2, #1
 801051e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010522:	3e01      	subs	r6, #1
 8010524:	9214      	str	r2, [sp, #80]	@ 0x50
 8010526:	e777      	b.n	8010418 <_dtoa_r+0x100>
 8010528:	2301      	movs	r3, #1
 801052a:	e7b8      	b.n	801049e <_dtoa_r+0x186>
 801052c:	9012      	str	r0, [sp, #72]	@ 0x48
 801052e:	e7b7      	b.n	80104a0 <_dtoa_r+0x188>
 8010530:	427b      	negs	r3, r7
 8010532:	930a      	str	r3, [sp, #40]	@ 0x28
 8010534:	2300      	movs	r3, #0
 8010536:	eba8 0807 	sub.w	r8, r8, r7
 801053a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801053c:	e7c4      	b.n	80104c8 <_dtoa_r+0x1b0>
 801053e:	2300      	movs	r3, #0
 8010540:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010544:	2b00      	cmp	r3, #0
 8010546:	dc35      	bgt.n	80105b4 <_dtoa_r+0x29c>
 8010548:	2301      	movs	r3, #1
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	9307      	str	r3, [sp, #28]
 801054e:	461a      	mov	r2, r3
 8010550:	920e      	str	r2, [sp, #56]	@ 0x38
 8010552:	e00b      	b.n	801056c <_dtoa_r+0x254>
 8010554:	2301      	movs	r3, #1
 8010556:	e7f3      	b.n	8010540 <_dtoa_r+0x228>
 8010558:	2300      	movs	r3, #0
 801055a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801055c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801055e:	18fb      	adds	r3, r7, r3
 8010560:	9300      	str	r3, [sp, #0]
 8010562:	3301      	adds	r3, #1
 8010564:	2b01      	cmp	r3, #1
 8010566:	9307      	str	r3, [sp, #28]
 8010568:	bfb8      	it	lt
 801056a:	2301      	movlt	r3, #1
 801056c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010570:	2100      	movs	r1, #0
 8010572:	2204      	movs	r2, #4
 8010574:	f102 0514 	add.w	r5, r2, #20
 8010578:	429d      	cmp	r5, r3
 801057a:	d91f      	bls.n	80105bc <_dtoa_r+0x2a4>
 801057c:	6041      	str	r1, [r0, #4]
 801057e:	4658      	mov	r0, fp
 8010580:	f000 ff48 	bl	8011414 <_Balloc>
 8010584:	4682      	mov	sl, r0
 8010586:	2800      	cmp	r0, #0
 8010588:	d13c      	bne.n	8010604 <_dtoa_r+0x2ec>
 801058a:	4b1b      	ldr	r3, [pc, #108]	@ (80105f8 <_dtoa_r+0x2e0>)
 801058c:	4602      	mov	r2, r0
 801058e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010592:	e6d8      	b.n	8010346 <_dtoa_r+0x2e>
 8010594:	2301      	movs	r3, #1
 8010596:	e7e0      	b.n	801055a <_dtoa_r+0x242>
 8010598:	2401      	movs	r4, #1
 801059a:	2300      	movs	r3, #0
 801059c:	9309      	str	r3, [sp, #36]	@ 0x24
 801059e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80105a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80105a4:	9300      	str	r3, [sp, #0]
 80105a6:	9307      	str	r3, [sp, #28]
 80105a8:	2200      	movs	r2, #0
 80105aa:	2312      	movs	r3, #18
 80105ac:	e7d0      	b.n	8010550 <_dtoa_r+0x238>
 80105ae:	2301      	movs	r3, #1
 80105b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80105b2:	e7f5      	b.n	80105a0 <_dtoa_r+0x288>
 80105b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105b6:	9300      	str	r3, [sp, #0]
 80105b8:	9307      	str	r3, [sp, #28]
 80105ba:	e7d7      	b.n	801056c <_dtoa_r+0x254>
 80105bc:	3101      	adds	r1, #1
 80105be:	0052      	lsls	r2, r2, #1
 80105c0:	e7d8      	b.n	8010574 <_dtoa_r+0x25c>
 80105c2:	bf00      	nop
 80105c4:	f3af 8000 	nop.w
 80105c8:	636f4361 	.word	0x636f4361
 80105cc:	3fd287a7 	.word	0x3fd287a7
 80105d0:	8b60c8b3 	.word	0x8b60c8b3
 80105d4:	3fc68a28 	.word	0x3fc68a28
 80105d8:	509f79fb 	.word	0x509f79fb
 80105dc:	3fd34413 	.word	0x3fd34413
 80105e0:	08013f52 	.word	0x08013f52
 80105e4:	08013f69 	.word	0x08013f69
 80105e8:	7ff00000 	.word	0x7ff00000
 80105ec:	08013e21 	.word	0x08013e21
 80105f0:	3ff80000 	.word	0x3ff80000
 80105f4:	08014070 	.word	0x08014070
 80105f8:	08013fc1 	.word	0x08013fc1
 80105fc:	08013f4e 	.word	0x08013f4e
 8010600:	08013e20 	.word	0x08013e20
 8010604:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010608:	6018      	str	r0, [r3, #0]
 801060a:	9b07      	ldr	r3, [sp, #28]
 801060c:	2b0e      	cmp	r3, #14
 801060e:	f200 80a4 	bhi.w	801075a <_dtoa_r+0x442>
 8010612:	2c00      	cmp	r4, #0
 8010614:	f000 80a1 	beq.w	801075a <_dtoa_r+0x442>
 8010618:	2f00      	cmp	r7, #0
 801061a:	dd33      	ble.n	8010684 <_dtoa_r+0x36c>
 801061c:	4bad      	ldr	r3, [pc, #692]	@ (80108d4 <_dtoa_r+0x5bc>)
 801061e:	f007 020f 	and.w	r2, r7, #15
 8010622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010626:	ed93 7b00 	vldr	d7, [r3]
 801062a:	05f8      	lsls	r0, r7, #23
 801062c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010630:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010634:	d516      	bpl.n	8010664 <_dtoa_r+0x34c>
 8010636:	4ba8      	ldr	r3, [pc, #672]	@ (80108d8 <_dtoa_r+0x5c0>)
 8010638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801063c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010640:	f7f0 f904 	bl	800084c <__aeabi_ddiv>
 8010644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010648:	f004 040f 	and.w	r4, r4, #15
 801064c:	2603      	movs	r6, #3
 801064e:	4da2      	ldr	r5, [pc, #648]	@ (80108d8 <_dtoa_r+0x5c0>)
 8010650:	b954      	cbnz	r4, 8010668 <_dtoa_r+0x350>
 8010652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801065a:	f7f0 f8f7 	bl	800084c <__aeabi_ddiv>
 801065e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010662:	e028      	b.n	80106b6 <_dtoa_r+0x39e>
 8010664:	2602      	movs	r6, #2
 8010666:	e7f2      	b.n	801064e <_dtoa_r+0x336>
 8010668:	07e1      	lsls	r1, r4, #31
 801066a:	d508      	bpl.n	801067e <_dtoa_r+0x366>
 801066c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010670:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010674:	f7ef ffc0 	bl	80005f8 <__aeabi_dmul>
 8010678:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801067c:	3601      	adds	r6, #1
 801067e:	1064      	asrs	r4, r4, #1
 8010680:	3508      	adds	r5, #8
 8010682:	e7e5      	b.n	8010650 <_dtoa_r+0x338>
 8010684:	f000 80d2 	beq.w	801082c <_dtoa_r+0x514>
 8010688:	427c      	negs	r4, r7
 801068a:	4b92      	ldr	r3, [pc, #584]	@ (80108d4 <_dtoa_r+0x5bc>)
 801068c:	4d92      	ldr	r5, [pc, #584]	@ (80108d8 <_dtoa_r+0x5c0>)
 801068e:	f004 020f 	and.w	r2, r4, #15
 8010692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801069e:	f7ef ffab 	bl	80005f8 <__aeabi_dmul>
 80106a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106a6:	1124      	asrs	r4, r4, #4
 80106a8:	2300      	movs	r3, #0
 80106aa:	2602      	movs	r6, #2
 80106ac:	2c00      	cmp	r4, #0
 80106ae:	f040 80b2 	bne.w	8010816 <_dtoa_r+0x4fe>
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1d3      	bne.n	801065e <_dtoa_r+0x346>
 80106b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80106b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f000 80b7 	beq.w	8010830 <_dtoa_r+0x518>
 80106c2:	4b86      	ldr	r3, [pc, #536]	@ (80108dc <_dtoa_r+0x5c4>)
 80106c4:	2200      	movs	r2, #0
 80106c6:	4620      	mov	r0, r4
 80106c8:	4629      	mov	r1, r5
 80106ca:	f7f0 fa07 	bl	8000adc <__aeabi_dcmplt>
 80106ce:	2800      	cmp	r0, #0
 80106d0:	f000 80ae 	beq.w	8010830 <_dtoa_r+0x518>
 80106d4:	9b07      	ldr	r3, [sp, #28]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f000 80aa 	beq.w	8010830 <_dtoa_r+0x518>
 80106dc:	9b00      	ldr	r3, [sp, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	dd37      	ble.n	8010752 <_dtoa_r+0x43a>
 80106e2:	1e7b      	subs	r3, r7, #1
 80106e4:	9304      	str	r3, [sp, #16]
 80106e6:	4620      	mov	r0, r4
 80106e8:	4b7d      	ldr	r3, [pc, #500]	@ (80108e0 <_dtoa_r+0x5c8>)
 80106ea:	2200      	movs	r2, #0
 80106ec:	4629      	mov	r1, r5
 80106ee:	f7ef ff83 	bl	80005f8 <__aeabi_dmul>
 80106f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106f6:	9c00      	ldr	r4, [sp, #0]
 80106f8:	3601      	adds	r6, #1
 80106fa:	4630      	mov	r0, r6
 80106fc:	f7ef ff12 	bl	8000524 <__aeabi_i2d>
 8010700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010704:	f7ef ff78 	bl	80005f8 <__aeabi_dmul>
 8010708:	4b76      	ldr	r3, [pc, #472]	@ (80108e4 <_dtoa_r+0x5cc>)
 801070a:	2200      	movs	r2, #0
 801070c:	f7ef fdbe 	bl	800028c <__adddf3>
 8010710:	4605      	mov	r5, r0
 8010712:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010716:	2c00      	cmp	r4, #0
 8010718:	f040 808d 	bne.w	8010836 <_dtoa_r+0x51e>
 801071c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010720:	4b71      	ldr	r3, [pc, #452]	@ (80108e8 <_dtoa_r+0x5d0>)
 8010722:	2200      	movs	r2, #0
 8010724:	f7ef fdb0 	bl	8000288 <__aeabi_dsub>
 8010728:	4602      	mov	r2, r0
 801072a:	460b      	mov	r3, r1
 801072c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010730:	462a      	mov	r2, r5
 8010732:	4633      	mov	r3, r6
 8010734:	f7f0 f9f0 	bl	8000b18 <__aeabi_dcmpgt>
 8010738:	2800      	cmp	r0, #0
 801073a:	f040 828b 	bne.w	8010c54 <_dtoa_r+0x93c>
 801073e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010742:	462a      	mov	r2, r5
 8010744:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010748:	f7f0 f9c8 	bl	8000adc <__aeabi_dcmplt>
 801074c:	2800      	cmp	r0, #0
 801074e:	f040 8128 	bne.w	80109a2 <_dtoa_r+0x68a>
 8010752:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010756:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801075a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801075c:	2b00      	cmp	r3, #0
 801075e:	f2c0 815a 	blt.w	8010a16 <_dtoa_r+0x6fe>
 8010762:	2f0e      	cmp	r7, #14
 8010764:	f300 8157 	bgt.w	8010a16 <_dtoa_r+0x6fe>
 8010768:	4b5a      	ldr	r3, [pc, #360]	@ (80108d4 <_dtoa_r+0x5bc>)
 801076a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801076e:	ed93 7b00 	vldr	d7, [r3]
 8010772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010774:	2b00      	cmp	r3, #0
 8010776:	ed8d 7b00 	vstr	d7, [sp]
 801077a:	da03      	bge.n	8010784 <_dtoa_r+0x46c>
 801077c:	9b07      	ldr	r3, [sp, #28]
 801077e:	2b00      	cmp	r3, #0
 8010780:	f340 8101 	ble.w	8010986 <_dtoa_r+0x66e>
 8010784:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010788:	4656      	mov	r6, sl
 801078a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801078e:	4620      	mov	r0, r4
 8010790:	4629      	mov	r1, r5
 8010792:	f7f0 f85b 	bl	800084c <__aeabi_ddiv>
 8010796:	f7f0 f9df 	bl	8000b58 <__aeabi_d2iz>
 801079a:	4680      	mov	r8, r0
 801079c:	f7ef fec2 	bl	8000524 <__aeabi_i2d>
 80107a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107a4:	f7ef ff28 	bl	80005f8 <__aeabi_dmul>
 80107a8:	4602      	mov	r2, r0
 80107aa:	460b      	mov	r3, r1
 80107ac:	4620      	mov	r0, r4
 80107ae:	4629      	mov	r1, r5
 80107b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80107b4:	f7ef fd68 	bl	8000288 <__aeabi_dsub>
 80107b8:	f806 4b01 	strb.w	r4, [r6], #1
 80107bc:	9d07      	ldr	r5, [sp, #28]
 80107be:	eba6 040a 	sub.w	r4, r6, sl
 80107c2:	42a5      	cmp	r5, r4
 80107c4:	4602      	mov	r2, r0
 80107c6:	460b      	mov	r3, r1
 80107c8:	f040 8117 	bne.w	80109fa <_dtoa_r+0x6e2>
 80107cc:	f7ef fd5e 	bl	800028c <__adddf3>
 80107d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107d4:	4604      	mov	r4, r0
 80107d6:	460d      	mov	r5, r1
 80107d8:	f7f0 f99e 	bl	8000b18 <__aeabi_dcmpgt>
 80107dc:	2800      	cmp	r0, #0
 80107de:	f040 80f9 	bne.w	80109d4 <_dtoa_r+0x6bc>
 80107e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107e6:	4620      	mov	r0, r4
 80107e8:	4629      	mov	r1, r5
 80107ea:	f7f0 f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 80107ee:	b118      	cbz	r0, 80107f8 <_dtoa_r+0x4e0>
 80107f0:	f018 0f01 	tst.w	r8, #1
 80107f4:	f040 80ee 	bne.w	80109d4 <_dtoa_r+0x6bc>
 80107f8:	4649      	mov	r1, r9
 80107fa:	4658      	mov	r0, fp
 80107fc:	f000 fe4a 	bl	8011494 <_Bfree>
 8010800:	2300      	movs	r3, #0
 8010802:	7033      	strb	r3, [r6, #0]
 8010804:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010806:	3701      	adds	r7, #1
 8010808:	601f      	str	r7, [r3, #0]
 801080a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801080c:	2b00      	cmp	r3, #0
 801080e:	f000 831d 	beq.w	8010e4c <_dtoa_r+0xb34>
 8010812:	601e      	str	r6, [r3, #0]
 8010814:	e31a      	b.n	8010e4c <_dtoa_r+0xb34>
 8010816:	07e2      	lsls	r2, r4, #31
 8010818:	d505      	bpl.n	8010826 <_dtoa_r+0x50e>
 801081a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801081e:	f7ef feeb 	bl	80005f8 <__aeabi_dmul>
 8010822:	3601      	adds	r6, #1
 8010824:	2301      	movs	r3, #1
 8010826:	1064      	asrs	r4, r4, #1
 8010828:	3508      	adds	r5, #8
 801082a:	e73f      	b.n	80106ac <_dtoa_r+0x394>
 801082c:	2602      	movs	r6, #2
 801082e:	e742      	b.n	80106b6 <_dtoa_r+0x39e>
 8010830:	9c07      	ldr	r4, [sp, #28]
 8010832:	9704      	str	r7, [sp, #16]
 8010834:	e761      	b.n	80106fa <_dtoa_r+0x3e2>
 8010836:	4b27      	ldr	r3, [pc, #156]	@ (80108d4 <_dtoa_r+0x5bc>)
 8010838:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801083a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801083e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010842:	4454      	add	r4, sl
 8010844:	2900      	cmp	r1, #0
 8010846:	d053      	beq.n	80108f0 <_dtoa_r+0x5d8>
 8010848:	4928      	ldr	r1, [pc, #160]	@ (80108ec <_dtoa_r+0x5d4>)
 801084a:	2000      	movs	r0, #0
 801084c:	f7ef fffe 	bl	800084c <__aeabi_ddiv>
 8010850:	4633      	mov	r3, r6
 8010852:	462a      	mov	r2, r5
 8010854:	f7ef fd18 	bl	8000288 <__aeabi_dsub>
 8010858:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801085c:	4656      	mov	r6, sl
 801085e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010862:	f7f0 f979 	bl	8000b58 <__aeabi_d2iz>
 8010866:	4605      	mov	r5, r0
 8010868:	f7ef fe5c 	bl	8000524 <__aeabi_i2d>
 801086c:	4602      	mov	r2, r0
 801086e:	460b      	mov	r3, r1
 8010870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010874:	f7ef fd08 	bl	8000288 <__aeabi_dsub>
 8010878:	3530      	adds	r5, #48	@ 0x30
 801087a:	4602      	mov	r2, r0
 801087c:	460b      	mov	r3, r1
 801087e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010882:	f806 5b01 	strb.w	r5, [r6], #1
 8010886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801088a:	f7f0 f927 	bl	8000adc <__aeabi_dcmplt>
 801088e:	2800      	cmp	r0, #0
 8010890:	d171      	bne.n	8010976 <_dtoa_r+0x65e>
 8010892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010896:	4911      	ldr	r1, [pc, #68]	@ (80108dc <_dtoa_r+0x5c4>)
 8010898:	2000      	movs	r0, #0
 801089a:	f7ef fcf5 	bl	8000288 <__aeabi_dsub>
 801089e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80108a2:	f7f0 f91b 	bl	8000adc <__aeabi_dcmplt>
 80108a6:	2800      	cmp	r0, #0
 80108a8:	f040 8095 	bne.w	80109d6 <_dtoa_r+0x6be>
 80108ac:	42a6      	cmp	r6, r4
 80108ae:	f43f af50 	beq.w	8010752 <_dtoa_r+0x43a>
 80108b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80108b6:	4b0a      	ldr	r3, [pc, #40]	@ (80108e0 <_dtoa_r+0x5c8>)
 80108b8:	2200      	movs	r2, #0
 80108ba:	f7ef fe9d 	bl	80005f8 <__aeabi_dmul>
 80108be:	4b08      	ldr	r3, [pc, #32]	@ (80108e0 <_dtoa_r+0x5c8>)
 80108c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80108c4:	2200      	movs	r2, #0
 80108c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108ca:	f7ef fe95 	bl	80005f8 <__aeabi_dmul>
 80108ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108d2:	e7c4      	b.n	801085e <_dtoa_r+0x546>
 80108d4:	08014070 	.word	0x08014070
 80108d8:	08014048 	.word	0x08014048
 80108dc:	3ff00000 	.word	0x3ff00000
 80108e0:	40240000 	.word	0x40240000
 80108e4:	401c0000 	.word	0x401c0000
 80108e8:	40140000 	.word	0x40140000
 80108ec:	3fe00000 	.word	0x3fe00000
 80108f0:	4631      	mov	r1, r6
 80108f2:	4628      	mov	r0, r5
 80108f4:	f7ef fe80 	bl	80005f8 <__aeabi_dmul>
 80108f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80108fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80108fe:	4656      	mov	r6, sl
 8010900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010904:	f7f0 f928 	bl	8000b58 <__aeabi_d2iz>
 8010908:	4605      	mov	r5, r0
 801090a:	f7ef fe0b 	bl	8000524 <__aeabi_i2d>
 801090e:	4602      	mov	r2, r0
 8010910:	460b      	mov	r3, r1
 8010912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010916:	f7ef fcb7 	bl	8000288 <__aeabi_dsub>
 801091a:	3530      	adds	r5, #48	@ 0x30
 801091c:	f806 5b01 	strb.w	r5, [r6], #1
 8010920:	4602      	mov	r2, r0
 8010922:	460b      	mov	r3, r1
 8010924:	42a6      	cmp	r6, r4
 8010926:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801092a:	f04f 0200 	mov.w	r2, #0
 801092e:	d124      	bne.n	801097a <_dtoa_r+0x662>
 8010930:	4bac      	ldr	r3, [pc, #688]	@ (8010be4 <_dtoa_r+0x8cc>)
 8010932:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010936:	f7ef fca9 	bl	800028c <__adddf3>
 801093a:	4602      	mov	r2, r0
 801093c:	460b      	mov	r3, r1
 801093e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010942:	f7f0 f8e9 	bl	8000b18 <__aeabi_dcmpgt>
 8010946:	2800      	cmp	r0, #0
 8010948:	d145      	bne.n	80109d6 <_dtoa_r+0x6be>
 801094a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801094e:	49a5      	ldr	r1, [pc, #660]	@ (8010be4 <_dtoa_r+0x8cc>)
 8010950:	2000      	movs	r0, #0
 8010952:	f7ef fc99 	bl	8000288 <__aeabi_dsub>
 8010956:	4602      	mov	r2, r0
 8010958:	460b      	mov	r3, r1
 801095a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801095e:	f7f0 f8bd 	bl	8000adc <__aeabi_dcmplt>
 8010962:	2800      	cmp	r0, #0
 8010964:	f43f aef5 	beq.w	8010752 <_dtoa_r+0x43a>
 8010968:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801096a:	1e73      	subs	r3, r6, #1
 801096c:	9315      	str	r3, [sp, #84]	@ 0x54
 801096e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010972:	2b30      	cmp	r3, #48	@ 0x30
 8010974:	d0f8      	beq.n	8010968 <_dtoa_r+0x650>
 8010976:	9f04      	ldr	r7, [sp, #16]
 8010978:	e73e      	b.n	80107f8 <_dtoa_r+0x4e0>
 801097a:	4b9b      	ldr	r3, [pc, #620]	@ (8010be8 <_dtoa_r+0x8d0>)
 801097c:	f7ef fe3c 	bl	80005f8 <__aeabi_dmul>
 8010980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010984:	e7bc      	b.n	8010900 <_dtoa_r+0x5e8>
 8010986:	d10c      	bne.n	80109a2 <_dtoa_r+0x68a>
 8010988:	4b98      	ldr	r3, [pc, #608]	@ (8010bec <_dtoa_r+0x8d4>)
 801098a:	2200      	movs	r2, #0
 801098c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010990:	f7ef fe32 	bl	80005f8 <__aeabi_dmul>
 8010994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010998:	f7f0 f8b4 	bl	8000b04 <__aeabi_dcmpge>
 801099c:	2800      	cmp	r0, #0
 801099e:	f000 8157 	beq.w	8010c50 <_dtoa_r+0x938>
 80109a2:	2400      	movs	r4, #0
 80109a4:	4625      	mov	r5, r4
 80109a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109a8:	43db      	mvns	r3, r3
 80109aa:	9304      	str	r3, [sp, #16]
 80109ac:	4656      	mov	r6, sl
 80109ae:	2700      	movs	r7, #0
 80109b0:	4621      	mov	r1, r4
 80109b2:	4658      	mov	r0, fp
 80109b4:	f000 fd6e 	bl	8011494 <_Bfree>
 80109b8:	2d00      	cmp	r5, #0
 80109ba:	d0dc      	beq.n	8010976 <_dtoa_r+0x65e>
 80109bc:	b12f      	cbz	r7, 80109ca <_dtoa_r+0x6b2>
 80109be:	42af      	cmp	r7, r5
 80109c0:	d003      	beq.n	80109ca <_dtoa_r+0x6b2>
 80109c2:	4639      	mov	r1, r7
 80109c4:	4658      	mov	r0, fp
 80109c6:	f000 fd65 	bl	8011494 <_Bfree>
 80109ca:	4629      	mov	r1, r5
 80109cc:	4658      	mov	r0, fp
 80109ce:	f000 fd61 	bl	8011494 <_Bfree>
 80109d2:	e7d0      	b.n	8010976 <_dtoa_r+0x65e>
 80109d4:	9704      	str	r7, [sp, #16]
 80109d6:	4633      	mov	r3, r6
 80109d8:	461e      	mov	r6, r3
 80109da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109de:	2a39      	cmp	r2, #57	@ 0x39
 80109e0:	d107      	bne.n	80109f2 <_dtoa_r+0x6da>
 80109e2:	459a      	cmp	sl, r3
 80109e4:	d1f8      	bne.n	80109d8 <_dtoa_r+0x6c0>
 80109e6:	9a04      	ldr	r2, [sp, #16]
 80109e8:	3201      	adds	r2, #1
 80109ea:	9204      	str	r2, [sp, #16]
 80109ec:	2230      	movs	r2, #48	@ 0x30
 80109ee:	f88a 2000 	strb.w	r2, [sl]
 80109f2:	781a      	ldrb	r2, [r3, #0]
 80109f4:	3201      	adds	r2, #1
 80109f6:	701a      	strb	r2, [r3, #0]
 80109f8:	e7bd      	b.n	8010976 <_dtoa_r+0x65e>
 80109fa:	4b7b      	ldr	r3, [pc, #492]	@ (8010be8 <_dtoa_r+0x8d0>)
 80109fc:	2200      	movs	r2, #0
 80109fe:	f7ef fdfb 	bl	80005f8 <__aeabi_dmul>
 8010a02:	2200      	movs	r2, #0
 8010a04:	2300      	movs	r3, #0
 8010a06:	4604      	mov	r4, r0
 8010a08:	460d      	mov	r5, r1
 8010a0a:	f7f0 f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	f43f aebb 	beq.w	801078a <_dtoa_r+0x472>
 8010a14:	e6f0      	b.n	80107f8 <_dtoa_r+0x4e0>
 8010a16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010a18:	2a00      	cmp	r2, #0
 8010a1a:	f000 80db 	beq.w	8010bd4 <_dtoa_r+0x8bc>
 8010a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a20:	2a01      	cmp	r2, #1
 8010a22:	f300 80bf 	bgt.w	8010ba4 <_dtoa_r+0x88c>
 8010a26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010a28:	2a00      	cmp	r2, #0
 8010a2a:	f000 80b7 	beq.w	8010b9c <_dtoa_r+0x884>
 8010a2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010a32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010a34:	4646      	mov	r6, r8
 8010a36:	9a08      	ldr	r2, [sp, #32]
 8010a38:	2101      	movs	r1, #1
 8010a3a:	441a      	add	r2, r3
 8010a3c:	4658      	mov	r0, fp
 8010a3e:	4498      	add	r8, r3
 8010a40:	9208      	str	r2, [sp, #32]
 8010a42:	f000 fddb 	bl	80115fc <__i2b>
 8010a46:	4605      	mov	r5, r0
 8010a48:	b15e      	cbz	r6, 8010a62 <_dtoa_r+0x74a>
 8010a4a:	9b08      	ldr	r3, [sp, #32]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	dd08      	ble.n	8010a62 <_dtoa_r+0x74a>
 8010a50:	42b3      	cmp	r3, r6
 8010a52:	9a08      	ldr	r2, [sp, #32]
 8010a54:	bfa8      	it	ge
 8010a56:	4633      	movge	r3, r6
 8010a58:	eba8 0803 	sub.w	r8, r8, r3
 8010a5c:	1af6      	subs	r6, r6, r3
 8010a5e:	1ad3      	subs	r3, r2, r3
 8010a60:	9308      	str	r3, [sp, #32]
 8010a62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a64:	b1f3      	cbz	r3, 8010aa4 <_dtoa_r+0x78c>
 8010a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	f000 80b7 	beq.w	8010bdc <_dtoa_r+0x8c4>
 8010a6e:	b18c      	cbz	r4, 8010a94 <_dtoa_r+0x77c>
 8010a70:	4629      	mov	r1, r5
 8010a72:	4622      	mov	r2, r4
 8010a74:	4658      	mov	r0, fp
 8010a76:	f000 fe81 	bl	801177c <__pow5mult>
 8010a7a:	464a      	mov	r2, r9
 8010a7c:	4601      	mov	r1, r0
 8010a7e:	4605      	mov	r5, r0
 8010a80:	4658      	mov	r0, fp
 8010a82:	f000 fdd1 	bl	8011628 <__multiply>
 8010a86:	4649      	mov	r1, r9
 8010a88:	9004      	str	r0, [sp, #16]
 8010a8a:	4658      	mov	r0, fp
 8010a8c:	f000 fd02 	bl	8011494 <_Bfree>
 8010a90:	9b04      	ldr	r3, [sp, #16]
 8010a92:	4699      	mov	r9, r3
 8010a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a96:	1b1a      	subs	r2, r3, r4
 8010a98:	d004      	beq.n	8010aa4 <_dtoa_r+0x78c>
 8010a9a:	4649      	mov	r1, r9
 8010a9c:	4658      	mov	r0, fp
 8010a9e:	f000 fe6d 	bl	801177c <__pow5mult>
 8010aa2:	4681      	mov	r9, r0
 8010aa4:	2101      	movs	r1, #1
 8010aa6:	4658      	mov	r0, fp
 8010aa8:	f000 fda8 	bl	80115fc <__i2b>
 8010aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010aae:	4604      	mov	r4, r0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	f000 81cf 	beq.w	8010e54 <_dtoa_r+0xb3c>
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	4601      	mov	r1, r0
 8010aba:	4658      	mov	r0, fp
 8010abc:	f000 fe5e 	bl	801177c <__pow5mult>
 8010ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ac2:	2b01      	cmp	r3, #1
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	f300 8095 	bgt.w	8010bf4 <_dtoa_r+0x8dc>
 8010aca:	9b02      	ldr	r3, [sp, #8]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	f040 8087 	bne.w	8010be0 <_dtoa_r+0x8c8>
 8010ad2:	9b03      	ldr	r3, [sp, #12]
 8010ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	f040 8089 	bne.w	8010bf0 <_dtoa_r+0x8d8>
 8010ade:	9b03      	ldr	r3, [sp, #12]
 8010ae0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ae4:	0d1b      	lsrs	r3, r3, #20
 8010ae6:	051b      	lsls	r3, r3, #20
 8010ae8:	b12b      	cbz	r3, 8010af6 <_dtoa_r+0x7de>
 8010aea:	9b08      	ldr	r3, [sp, #32]
 8010aec:	3301      	adds	r3, #1
 8010aee:	9308      	str	r3, [sp, #32]
 8010af0:	f108 0801 	add.w	r8, r8, #1
 8010af4:	2301      	movs	r3, #1
 8010af6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	f000 81b0 	beq.w	8010e60 <_dtoa_r+0xb48>
 8010b00:	6923      	ldr	r3, [r4, #16]
 8010b02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010b06:	6918      	ldr	r0, [r3, #16]
 8010b08:	f000 fd2c 	bl	8011564 <__hi0bits>
 8010b0c:	f1c0 0020 	rsb	r0, r0, #32
 8010b10:	9b08      	ldr	r3, [sp, #32]
 8010b12:	4418      	add	r0, r3
 8010b14:	f010 001f 	ands.w	r0, r0, #31
 8010b18:	d077      	beq.n	8010c0a <_dtoa_r+0x8f2>
 8010b1a:	f1c0 0320 	rsb	r3, r0, #32
 8010b1e:	2b04      	cmp	r3, #4
 8010b20:	dd6b      	ble.n	8010bfa <_dtoa_r+0x8e2>
 8010b22:	9b08      	ldr	r3, [sp, #32]
 8010b24:	f1c0 001c 	rsb	r0, r0, #28
 8010b28:	4403      	add	r3, r0
 8010b2a:	4480      	add	r8, r0
 8010b2c:	4406      	add	r6, r0
 8010b2e:	9308      	str	r3, [sp, #32]
 8010b30:	f1b8 0f00 	cmp.w	r8, #0
 8010b34:	dd05      	ble.n	8010b42 <_dtoa_r+0x82a>
 8010b36:	4649      	mov	r1, r9
 8010b38:	4642      	mov	r2, r8
 8010b3a:	4658      	mov	r0, fp
 8010b3c:	f000 fe78 	bl	8011830 <__lshift>
 8010b40:	4681      	mov	r9, r0
 8010b42:	9b08      	ldr	r3, [sp, #32]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	dd05      	ble.n	8010b54 <_dtoa_r+0x83c>
 8010b48:	4621      	mov	r1, r4
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	4658      	mov	r0, fp
 8010b4e:	f000 fe6f 	bl	8011830 <__lshift>
 8010b52:	4604      	mov	r4, r0
 8010b54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d059      	beq.n	8010c0e <_dtoa_r+0x8f6>
 8010b5a:	4621      	mov	r1, r4
 8010b5c:	4648      	mov	r0, r9
 8010b5e:	f000 fed3 	bl	8011908 <__mcmp>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	da53      	bge.n	8010c0e <_dtoa_r+0x8f6>
 8010b66:	1e7b      	subs	r3, r7, #1
 8010b68:	9304      	str	r3, [sp, #16]
 8010b6a:	4649      	mov	r1, r9
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	220a      	movs	r2, #10
 8010b70:	4658      	mov	r0, fp
 8010b72:	f000 fcb1 	bl	80114d8 <__multadd>
 8010b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b78:	4681      	mov	r9, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	f000 8172 	beq.w	8010e64 <_dtoa_r+0xb4c>
 8010b80:	2300      	movs	r3, #0
 8010b82:	4629      	mov	r1, r5
 8010b84:	220a      	movs	r2, #10
 8010b86:	4658      	mov	r0, fp
 8010b88:	f000 fca6 	bl	80114d8 <__multadd>
 8010b8c:	9b00      	ldr	r3, [sp, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	4605      	mov	r5, r0
 8010b92:	dc67      	bgt.n	8010c64 <_dtoa_r+0x94c>
 8010b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b96:	2b02      	cmp	r3, #2
 8010b98:	dc41      	bgt.n	8010c1e <_dtoa_r+0x906>
 8010b9a:	e063      	b.n	8010c64 <_dtoa_r+0x94c>
 8010b9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010b9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010ba2:	e746      	b.n	8010a32 <_dtoa_r+0x71a>
 8010ba4:	9b07      	ldr	r3, [sp, #28]
 8010ba6:	1e5c      	subs	r4, r3, #1
 8010ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010baa:	42a3      	cmp	r3, r4
 8010bac:	bfbf      	itttt	lt
 8010bae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010bb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010bb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010bb4:	1ae3      	sublt	r3, r4, r3
 8010bb6:	bfb4      	ite	lt
 8010bb8:	18d2      	addlt	r2, r2, r3
 8010bba:	1b1c      	subge	r4, r3, r4
 8010bbc:	9b07      	ldr	r3, [sp, #28]
 8010bbe:	bfbc      	itt	lt
 8010bc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010bc2:	2400      	movlt	r4, #0
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	bfb5      	itete	lt
 8010bc8:	eba8 0603 	sublt.w	r6, r8, r3
 8010bcc:	9b07      	ldrge	r3, [sp, #28]
 8010bce:	2300      	movlt	r3, #0
 8010bd0:	4646      	movge	r6, r8
 8010bd2:	e730      	b.n	8010a36 <_dtoa_r+0x71e>
 8010bd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010bd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010bd8:	4646      	mov	r6, r8
 8010bda:	e735      	b.n	8010a48 <_dtoa_r+0x730>
 8010bdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010bde:	e75c      	b.n	8010a9a <_dtoa_r+0x782>
 8010be0:	2300      	movs	r3, #0
 8010be2:	e788      	b.n	8010af6 <_dtoa_r+0x7de>
 8010be4:	3fe00000 	.word	0x3fe00000
 8010be8:	40240000 	.word	0x40240000
 8010bec:	40140000 	.word	0x40140000
 8010bf0:	9b02      	ldr	r3, [sp, #8]
 8010bf2:	e780      	b.n	8010af6 <_dtoa_r+0x7de>
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010bf8:	e782      	b.n	8010b00 <_dtoa_r+0x7e8>
 8010bfa:	d099      	beq.n	8010b30 <_dtoa_r+0x818>
 8010bfc:	9a08      	ldr	r2, [sp, #32]
 8010bfe:	331c      	adds	r3, #28
 8010c00:	441a      	add	r2, r3
 8010c02:	4498      	add	r8, r3
 8010c04:	441e      	add	r6, r3
 8010c06:	9208      	str	r2, [sp, #32]
 8010c08:	e792      	b.n	8010b30 <_dtoa_r+0x818>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	e7f6      	b.n	8010bfc <_dtoa_r+0x8e4>
 8010c0e:	9b07      	ldr	r3, [sp, #28]
 8010c10:	9704      	str	r7, [sp, #16]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	dc20      	bgt.n	8010c58 <_dtoa_r+0x940>
 8010c16:	9300      	str	r3, [sp, #0]
 8010c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	dd1e      	ble.n	8010c5c <_dtoa_r+0x944>
 8010c1e:	9b00      	ldr	r3, [sp, #0]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f47f aec0 	bne.w	80109a6 <_dtoa_r+0x68e>
 8010c26:	4621      	mov	r1, r4
 8010c28:	2205      	movs	r2, #5
 8010c2a:	4658      	mov	r0, fp
 8010c2c:	f000 fc54 	bl	80114d8 <__multadd>
 8010c30:	4601      	mov	r1, r0
 8010c32:	4604      	mov	r4, r0
 8010c34:	4648      	mov	r0, r9
 8010c36:	f000 fe67 	bl	8011908 <__mcmp>
 8010c3a:	2800      	cmp	r0, #0
 8010c3c:	f77f aeb3 	ble.w	80109a6 <_dtoa_r+0x68e>
 8010c40:	4656      	mov	r6, sl
 8010c42:	2331      	movs	r3, #49	@ 0x31
 8010c44:	f806 3b01 	strb.w	r3, [r6], #1
 8010c48:	9b04      	ldr	r3, [sp, #16]
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	9304      	str	r3, [sp, #16]
 8010c4e:	e6ae      	b.n	80109ae <_dtoa_r+0x696>
 8010c50:	9c07      	ldr	r4, [sp, #28]
 8010c52:	9704      	str	r7, [sp, #16]
 8010c54:	4625      	mov	r5, r4
 8010c56:	e7f3      	b.n	8010c40 <_dtoa_r+0x928>
 8010c58:	9b07      	ldr	r3, [sp, #28]
 8010c5a:	9300      	str	r3, [sp, #0]
 8010c5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	f000 8104 	beq.w	8010e6c <_dtoa_r+0xb54>
 8010c64:	2e00      	cmp	r6, #0
 8010c66:	dd05      	ble.n	8010c74 <_dtoa_r+0x95c>
 8010c68:	4629      	mov	r1, r5
 8010c6a:	4632      	mov	r2, r6
 8010c6c:	4658      	mov	r0, fp
 8010c6e:	f000 fddf 	bl	8011830 <__lshift>
 8010c72:	4605      	mov	r5, r0
 8010c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d05a      	beq.n	8010d30 <_dtoa_r+0xa18>
 8010c7a:	6869      	ldr	r1, [r5, #4]
 8010c7c:	4658      	mov	r0, fp
 8010c7e:	f000 fbc9 	bl	8011414 <_Balloc>
 8010c82:	4606      	mov	r6, r0
 8010c84:	b928      	cbnz	r0, 8010c92 <_dtoa_r+0x97a>
 8010c86:	4b84      	ldr	r3, [pc, #528]	@ (8010e98 <_dtoa_r+0xb80>)
 8010c88:	4602      	mov	r2, r0
 8010c8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010c8e:	f7ff bb5a 	b.w	8010346 <_dtoa_r+0x2e>
 8010c92:	692a      	ldr	r2, [r5, #16]
 8010c94:	3202      	adds	r2, #2
 8010c96:	0092      	lsls	r2, r2, #2
 8010c98:	f105 010c 	add.w	r1, r5, #12
 8010c9c:	300c      	adds	r0, #12
 8010c9e:	f7ff faa2 	bl	80101e6 <memcpy>
 8010ca2:	2201      	movs	r2, #1
 8010ca4:	4631      	mov	r1, r6
 8010ca6:	4658      	mov	r0, fp
 8010ca8:	f000 fdc2 	bl	8011830 <__lshift>
 8010cac:	f10a 0301 	add.w	r3, sl, #1
 8010cb0:	9307      	str	r3, [sp, #28]
 8010cb2:	9b00      	ldr	r3, [sp, #0]
 8010cb4:	4453      	add	r3, sl
 8010cb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010cb8:	9b02      	ldr	r3, [sp, #8]
 8010cba:	f003 0301 	and.w	r3, r3, #1
 8010cbe:	462f      	mov	r7, r5
 8010cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cc2:	4605      	mov	r5, r0
 8010cc4:	9b07      	ldr	r3, [sp, #28]
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	3b01      	subs	r3, #1
 8010cca:	4648      	mov	r0, r9
 8010ccc:	9300      	str	r3, [sp, #0]
 8010cce:	f7ff fa98 	bl	8010202 <quorem>
 8010cd2:	4639      	mov	r1, r7
 8010cd4:	9002      	str	r0, [sp, #8]
 8010cd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010cda:	4648      	mov	r0, r9
 8010cdc:	f000 fe14 	bl	8011908 <__mcmp>
 8010ce0:	462a      	mov	r2, r5
 8010ce2:	9008      	str	r0, [sp, #32]
 8010ce4:	4621      	mov	r1, r4
 8010ce6:	4658      	mov	r0, fp
 8010ce8:	f000 fe2a 	bl	8011940 <__mdiff>
 8010cec:	68c2      	ldr	r2, [r0, #12]
 8010cee:	4606      	mov	r6, r0
 8010cf0:	bb02      	cbnz	r2, 8010d34 <_dtoa_r+0xa1c>
 8010cf2:	4601      	mov	r1, r0
 8010cf4:	4648      	mov	r0, r9
 8010cf6:	f000 fe07 	bl	8011908 <__mcmp>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	4631      	mov	r1, r6
 8010cfe:	4658      	mov	r0, fp
 8010d00:	920e      	str	r2, [sp, #56]	@ 0x38
 8010d02:	f000 fbc7 	bl	8011494 <_Bfree>
 8010d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d0a:	9e07      	ldr	r6, [sp, #28]
 8010d0c:	ea43 0102 	orr.w	r1, r3, r2
 8010d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d12:	4319      	orrs	r1, r3
 8010d14:	d110      	bne.n	8010d38 <_dtoa_r+0xa20>
 8010d16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010d1a:	d029      	beq.n	8010d70 <_dtoa_r+0xa58>
 8010d1c:	9b08      	ldr	r3, [sp, #32]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	dd02      	ble.n	8010d28 <_dtoa_r+0xa10>
 8010d22:	9b02      	ldr	r3, [sp, #8]
 8010d24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010d28:	9b00      	ldr	r3, [sp, #0]
 8010d2a:	f883 8000 	strb.w	r8, [r3]
 8010d2e:	e63f      	b.n	80109b0 <_dtoa_r+0x698>
 8010d30:	4628      	mov	r0, r5
 8010d32:	e7bb      	b.n	8010cac <_dtoa_r+0x994>
 8010d34:	2201      	movs	r2, #1
 8010d36:	e7e1      	b.n	8010cfc <_dtoa_r+0x9e4>
 8010d38:	9b08      	ldr	r3, [sp, #32]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	db04      	blt.n	8010d48 <_dtoa_r+0xa30>
 8010d3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010d40:	430b      	orrs	r3, r1
 8010d42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010d44:	430b      	orrs	r3, r1
 8010d46:	d120      	bne.n	8010d8a <_dtoa_r+0xa72>
 8010d48:	2a00      	cmp	r2, #0
 8010d4a:	dded      	ble.n	8010d28 <_dtoa_r+0xa10>
 8010d4c:	4649      	mov	r1, r9
 8010d4e:	2201      	movs	r2, #1
 8010d50:	4658      	mov	r0, fp
 8010d52:	f000 fd6d 	bl	8011830 <__lshift>
 8010d56:	4621      	mov	r1, r4
 8010d58:	4681      	mov	r9, r0
 8010d5a:	f000 fdd5 	bl	8011908 <__mcmp>
 8010d5e:	2800      	cmp	r0, #0
 8010d60:	dc03      	bgt.n	8010d6a <_dtoa_r+0xa52>
 8010d62:	d1e1      	bne.n	8010d28 <_dtoa_r+0xa10>
 8010d64:	f018 0f01 	tst.w	r8, #1
 8010d68:	d0de      	beq.n	8010d28 <_dtoa_r+0xa10>
 8010d6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010d6e:	d1d8      	bne.n	8010d22 <_dtoa_r+0xa0a>
 8010d70:	9a00      	ldr	r2, [sp, #0]
 8010d72:	2339      	movs	r3, #57	@ 0x39
 8010d74:	7013      	strb	r3, [r2, #0]
 8010d76:	4633      	mov	r3, r6
 8010d78:	461e      	mov	r6, r3
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010d80:	2a39      	cmp	r2, #57	@ 0x39
 8010d82:	d052      	beq.n	8010e2a <_dtoa_r+0xb12>
 8010d84:	3201      	adds	r2, #1
 8010d86:	701a      	strb	r2, [r3, #0]
 8010d88:	e612      	b.n	80109b0 <_dtoa_r+0x698>
 8010d8a:	2a00      	cmp	r2, #0
 8010d8c:	dd07      	ble.n	8010d9e <_dtoa_r+0xa86>
 8010d8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010d92:	d0ed      	beq.n	8010d70 <_dtoa_r+0xa58>
 8010d94:	9a00      	ldr	r2, [sp, #0]
 8010d96:	f108 0301 	add.w	r3, r8, #1
 8010d9a:	7013      	strb	r3, [r2, #0]
 8010d9c:	e608      	b.n	80109b0 <_dtoa_r+0x698>
 8010d9e:	9b07      	ldr	r3, [sp, #28]
 8010da0:	9a07      	ldr	r2, [sp, #28]
 8010da2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010da6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d028      	beq.n	8010dfe <_dtoa_r+0xae6>
 8010dac:	4649      	mov	r1, r9
 8010dae:	2300      	movs	r3, #0
 8010db0:	220a      	movs	r2, #10
 8010db2:	4658      	mov	r0, fp
 8010db4:	f000 fb90 	bl	80114d8 <__multadd>
 8010db8:	42af      	cmp	r7, r5
 8010dba:	4681      	mov	r9, r0
 8010dbc:	f04f 0300 	mov.w	r3, #0
 8010dc0:	f04f 020a 	mov.w	r2, #10
 8010dc4:	4639      	mov	r1, r7
 8010dc6:	4658      	mov	r0, fp
 8010dc8:	d107      	bne.n	8010dda <_dtoa_r+0xac2>
 8010dca:	f000 fb85 	bl	80114d8 <__multadd>
 8010dce:	4607      	mov	r7, r0
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	9b07      	ldr	r3, [sp, #28]
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	9307      	str	r3, [sp, #28]
 8010dd8:	e774      	b.n	8010cc4 <_dtoa_r+0x9ac>
 8010dda:	f000 fb7d 	bl	80114d8 <__multadd>
 8010dde:	4629      	mov	r1, r5
 8010de0:	4607      	mov	r7, r0
 8010de2:	2300      	movs	r3, #0
 8010de4:	220a      	movs	r2, #10
 8010de6:	4658      	mov	r0, fp
 8010de8:	f000 fb76 	bl	80114d8 <__multadd>
 8010dec:	4605      	mov	r5, r0
 8010dee:	e7f0      	b.n	8010dd2 <_dtoa_r+0xaba>
 8010df0:	9b00      	ldr	r3, [sp, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	bfcc      	ite	gt
 8010df6:	461e      	movgt	r6, r3
 8010df8:	2601      	movle	r6, #1
 8010dfa:	4456      	add	r6, sl
 8010dfc:	2700      	movs	r7, #0
 8010dfe:	4649      	mov	r1, r9
 8010e00:	2201      	movs	r2, #1
 8010e02:	4658      	mov	r0, fp
 8010e04:	f000 fd14 	bl	8011830 <__lshift>
 8010e08:	4621      	mov	r1, r4
 8010e0a:	4681      	mov	r9, r0
 8010e0c:	f000 fd7c 	bl	8011908 <__mcmp>
 8010e10:	2800      	cmp	r0, #0
 8010e12:	dcb0      	bgt.n	8010d76 <_dtoa_r+0xa5e>
 8010e14:	d102      	bne.n	8010e1c <_dtoa_r+0xb04>
 8010e16:	f018 0f01 	tst.w	r8, #1
 8010e1a:	d1ac      	bne.n	8010d76 <_dtoa_r+0xa5e>
 8010e1c:	4633      	mov	r3, r6
 8010e1e:	461e      	mov	r6, r3
 8010e20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e24:	2a30      	cmp	r2, #48	@ 0x30
 8010e26:	d0fa      	beq.n	8010e1e <_dtoa_r+0xb06>
 8010e28:	e5c2      	b.n	80109b0 <_dtoa_r+0x698>
 8010e2a:	459a      	cmp	sl, r3
 8010e2c:	d1a4      	bne.n	8010d78 <_dtoa_r+0xa60>
 8010e2e:	9b04      	ldr	r3, [sp, #16]
 8010e30:	3301      	adds	r3, #1
 8010e32:	9304      	str	r3, [sp, #16]
 8010e34:	2331      	movs	r3, #49	@ 0x31
 8010e36:	f88a 3000 	strb.w	r3, [sl]
 8010e3a:	e5b9      	b.n	80109b0 <_dtoa_r+0x698>
 8010e3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010e9c <_dtoa_r+0xb84>
 8010e42:	b11b      	cbz	r3, 8010e4c <_dtoa_r+0xb34>
 8010e44:	f10a 0308 	add.w	r3, sl, #8
 8010e48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010e4a:	6013      	str	r3, [r2, #0]
 8010e4c:	4650      	mov	r0, sl
 8010e4e:	b019      	add	sp, #100	@ 0x64
 8010e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	f77f ae37 	ble.w	8010aca <_dtoa_r+0x7b2>
 8010e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e60:	2001      	movs	r0, #1
 8010e62:	e655      	b.n	8010b10 <_dtoa_r+0x7f8>
 8010e64:	9b00      	ldr	r3, [sp, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f77f aed6 	ble.w	8010c18 <_dtoa_r+0x900>
 8010e6c:	4656      	mov	r6, sl
 8010e6e:	4621      	mov	r1, r4
 8010e70:	4648      	mov	r0, r9
 8010e72:	f7ff f9c6 	bl	8010202 <quorem>
 8010e76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010e7a:	f806 8b01 	strb.w	r8, [r6], #1
 8010e7e:	9b00      	ldr	r3, [sp, #0]
 8010e80:	eba6 020a 	sub.w	r2, r6, sl
 8010e84:	4293      	cmp	r3, r2
 8010e86:	ddb3      	ble.n	8010df0 <_dtoa_r+0xad8>
 8010e88:	4649      	mov	r1, r9
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	220a      	movs	r2, #10
 8010e8e:	4658      	mov	r0, fp
 8010e90:	f000 fb22 	bl	80114d8 <__multadd>
 8010e94:	4681      	mov	r9, r0
 8010e96:	e7ea      	b.n	8010e6e <_dtoa_r+0xb56>
 8010e98:	08013fc1 	.word	0x08013fc1
 8010e9c:	08013f45 	.word	0x08013f45

08010ea0 <__ssputs_r>:
 8010ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ea4:	688e      	ldr	r6, [r1, #8]
 8010ea6:	461f      	mov	r7, r3
 8010ea8:	42be      	cmp	r6, r7
 8010eaa:	680b      	ldr	r3, [r1, #0]
 8010eac:	4682      	mov	sl, r0
 8010eae:	460c      	mov	r4, r1
 8010eb0:	4690      	mov	r8, r2
 8010eb2:	d82d      	bhi.n	8010f10 <__ssputs_r+0x70>
 8010eb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010eb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010ebc:	d026      	beq.n	8010f0c <__ssputs_r+0x6c>
 8010ebe:	6965      	ldr	r5, [r4, #20]
 8010ec0:	6909      	ldr	r1, [r1, #16]
 8010ec2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ec6:	eba3 0901 	sub.w	r9, r3, r1
 8010eca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ece:	1c7b      	adds	r3, r7, #1
 8010ed0:	444b      	add	r3, r9
 8010ed2:	106d      	asrs	r5, r5, #1
 8010ed4:	429d      	cmp	r5, r3
 8010ed6:	bf38      	it	cc
 8010ed8:	461d      	movcc	r5, r3
 8010eda:	0553      	lsls	r3, r2, #21
 8010edc:	d527      	bpl.n	8010f2e <__ssputs_r+0x8e>
 8010ede:	4629      	mov	r1, r5
 8010ee0:	f000 f960 	bl	80111a4 <_malloc_r>
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	b360      	cbz	r0, 8010f42 <__ssputs_r+0xa2>
 8010ee8:	6921      	ldr	r1, [r4, #16]
 8010eea:	464a      	mov	r2, r9
 8010eec:	f7ff f97b 	bl	80101e6 <memcpy>
 8010ef0:	89a3      	ldrh	r3, [r4, #12]
 8010ef2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010efa:	81a3      	strh	r3, [r4, #12]
 8010efc:	6126      	str	r6, [r4, #16]
 8010efe:	6165      	str	r5, [r4, #20]
 8010f00:	444e      	add	r6, r9
 8010f02:	eba5 0509 	sub.w	r5, r5, r9
 8010f06:	6026      	str	r6, [r4, #0]
 8010f08:	60a5      	str	r5, [r4, #8]
 8010f0a:	463e      	mov	r6, r7
 8010f0c:	42be      	cmp	r6, r7
 8010f0e:	d900      	bls.n	8010f12 <__ssputs_r+0x72>
 8010f10:	463e      	mov	r6, r7
 8010f12:	6820      	ldr	r0, [r4, #0]
 8010f14:	4632      	mov	r2, r6
 8010f16:	4641      	mov	r1, r8
 8010f18:	f000 fe6f 	bl	8011bfa <memmove>
 8010f1c:	68a3      	ldr	r3, [r4, #8]
 8010f1e:	1b9b      	subs	r3, r3, r6
 8010f20:	60a3      	str	r3, [r4, #8]
 8010f22:	6823      	ldr	r3, [r4, #0]
 8010f24:	4433      	add	r3, r6
 8010f26:	6023      	str	r3, [r4, #0]
 8010f28:	2000      	movs	r0, #0
 8010f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f2e:	462a      	mov	r2, r5
 8010f30:	f000 fe35 	bl	8011b9e <_realloc_r>
 8010f34:	4606      	mov	r6, r0
 8010f36:	2800      	cmp	r0, #0
 8010f38:	d1e0      	bne.n	8010efc <__ssputs_r+0x5c>
 8010f3a:	6921      	ldr	r1, [r4, #16]
 8010f3c:	4650      	mov	r0, sl
 8010f3e:	f000 feff 	bl	8011d40 <_free_r>
 8010f42:	230c      	movs	r3, #12
 8010f44:	f8ca 3000 	str.w	r3, [sl]
 8010f48:	89a3      	ldrh	r3, [r4, #12]
 8010f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f4e:	81a3      	strh	r3, [r4, #12]
 8010f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f54:	e7e9      	b.n	8010f2a <__ssputs_r+0x8a>
	...

08010f58 <_svfiprintf_r>:
 8010f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f5c:	4698      	mov	r8, r3
 8010f5e:	898b      	ldrh	r3, [r1, #12]
 8010f60:	061b      	lsls	r3, r3, #24
 8010f62:	b09d      	sub	sp, #116	@ 0x74
 8010f64:	4607      	mov	r7, r0
 8010f66:	460d      	mov	r5, r1
 8010f68:	4614      	mov	r4, r2
 8010f6a:	d510      	bpl.n	8010f8e <_svfiprintf_r+0x36>
 8010f6c:	690b      	ldr	r3, [r1, #16]
 8010f6e:	b973      	cbnz	r3, 8010f8e <_svfiprintf_r+0x36>
 8010f70:	2140      	movs	r1, #64	@ 0x40
 8010f72:	f000 f917 	bl	80111a4 <_malloc_r>
 8010f76:	6028      	str	r0, [r5, #0]
 8010f78:	6128      	str	r0, [r5, #16]
 8010f7a:	b930      	cbnz	r0, 8010f8a <_svfiprintf_r+0x32>
 8010f7c:	230c      	movs	r3, #12
 8010f7e:	603b      	str	r3, [r7, #0]
 8010f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f84:	b01d      	add	sp, #116	@ 0x74
 8010f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f8a:	2340      	movs	r3, #64	@ 0x40
 8010f8c:	616b      	str	r3, [r5, #20]
 8010f8e:	2300      	movs	r3, #0
 8010f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f92:	2320      	movs	r3, #32
 8010f94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f9c:	2330      	movs	r3, #48	@ 0x30
 8010f9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801113c <_svfiprintf_r+0x1e4>
 8010fa2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010fa6:	f04f 0901 	mov.w	r9, #1
 8010faa:	4623      	mov	r3, r4
 8010fac:	469a      	mov	sl, r3
 8010fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fb2:	b10a      	cbz	r2, 8010fb8 <_svfiprintf_r+0x60>
 8010fb4:	2a25      	cmp	r2, #37	@ 0x25
 8010fb6:	d1f9      	bne.n	8010fac <_svfiprintf_r+0x54>
 8010fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8010fbc:	d00b      	beq.n	8010fd6 <_svfiprintf_r+0x7e>
 8010fbe:	465b      	mov	r3, fp
 8010fc0:	4622      	mov	r2, r4
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	4638      	mov	r0, r7
 8010fc6:	f7ff ff6b 	bl	8010ea0 <__ssputs_r>
 8010fca:	3001      	adds	r0, #1
 8010fcc:	f000 80a7 	beq.w	801111e <_svfiprintf_r+0x1c6>
 8010fd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010fd2:	445a      	add	r2, fp
 8010fd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8010fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f000 809f 	beq.w	801111e <_svfiprintf_r+0x1c6>
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fea:	f10a 0a01 	add.w	sl, sl, #1
 8010fee:	9304      	str	r3, [sp, #16]
 8010ff0:	9307      	str	r3, [sp, #28]
 8010ff2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ff6:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ff8:	4654      	mov	r4, sl
 8010ffa:	2205      	movs	r2, #5
 8010ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011000:	484e      	ldr	r0, [pc, #312]	@ (801113c <_svfiprintf_r+0x1e4>)
 8011002:	f7ef f8e5 	bl	80001d0 <memchr>
 8011006:	9a04      	ldr	r2, [sp, #16]
 8011008:	b9d8      	cbnz	r0, 8011042 <_svfiprintf_r+0xea>
 801100a:	06d0      	lsls	r0, r2, #27
 801100c:	bf44      	itt	mi
 801100e:	2320      	movmi	r3, #32
 8011010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011014:	0711      	lsls	r1, r2, #28
 8011016:	bf44      	itt	mi
 8011018:	232b      	movmi	r3, #43	@ 0x2b
 801101a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801101e:	f89a 3000 	ldrb.w	r3, [sl]
 8011022:	2b2a      	cmp	r3, #42	@ 0x2a
 8011024:	d015      	beq.n	8011052 <_svfiprintf_r+0xfa>
 8011026:	9a07      	ldr	r2, [sp, #28]
 8011028:	4654      	mov	r4, sl
 801102a:	2000      	movs	r0, #0
 801102c:	f04f 0c0a 	mov.w	ip, #10
 8011030:	4621      	mov	r1, r4
 8011032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011036:	3b30      	subs	r3, #48	@ 0x30
 8011038:	2b09      	cmp	r3, #9
 801103a:	d94b      	bls.n	80110d4 <_svfiprintf_r+0x17c>
 801103c:	b1b0      	cbz	r0, 801106c <_svfiprintf_r+0x114>
 801103e:	9207      	str	r2, [sp, #28]
 8011040:	e014      	b.n	801106c <_svfiprintf_r+0x114>
 8011042:	eba0 0308 	sub.w	r3, r0, r8
 8011046:	fa09 f303 	lsl.w	r3, r9, r3
 801104a:	4313      	orrs	r3, r2
 801104c:	9304      	str	r3, [sp, #16]
 801104e:	46a2      	mov	sl, r4
 8011050:	e7d2      	b.n	8010ff8 <_svfiprintf_r+0xa0>
 8011052:	9b03      	ldr	r3, [sp, #12]
 8011054:	1d19      	adds	r1, r3, #4
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	9103      	str	r1, [sp, #12]
 801105a:	2b00      	cmp	r3, #0
 801105c:	bfbb      	ittet	lt
 801105e:	425b      	neglt	r3, r3
 8011060:	f042 0202 	orrlt.w	r2, r2, #2
 8011064:	9307      	strge	r3, [sp, #28]
 8011066:	9307      	strlt	r3, [sp, #28]
 8011068:	bfb8      	it	lt
 801106a:	9204      	strlt	r2, [sp, #16]
 801106c:	7823      	ldrb	r3, [r4, #0]
 801106e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011070:	d10a      	bne.n	8011088 <_svfiprintf_r+0x130>
 8011072:	7863      	ldrb	r3, [r4, #1]
 8011074:	2b2a      	cmp	r3, #42	@ 0x2a
 8011076:	d132      	bne.n	80110de <_svfiprintf_r+0x186>
 8011078:	9b03      	ldr	r3, [sp, #12]
 801107a:	1d1a      	adds	r2, r3, #4
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	9203      	str	r2, [sp, #12]
 8011080:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011084:	3402      	adds	r4, #2
 8011086:	9305      	str	r3, [sp, #20]
 8011088:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801114c <_svfiprintf_r+0x1f4>
 801108c:	7821      	ldrb	r1, [r4, #0]
 801108e:	2203      	movs	r2, #3
 8011090:	4650      	mov	r0, sl
 8011092:	f7ef f89d 	bl	80001d0 <memchr>
 8011096:	b138      	cbz	r0, 80110a8 <_svfiprintf_r+0x150>
 8011098:	9b04      	ldr	r3, [sp, #16]
 801109a:	eba0 000a 	sub.w	r0, r0, sl
 801109e:	2240      	movs	r2, #64	@ 0x40
 80110a0:	4082      	lsls	r2, r0
 80110a2:	4313      	orrs	r3, r2
 80110a4:	3401      	adds	r4, #1
 80110a6:	9304      	str	r3, [sp, #16]
 80110a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ac:	4824      	ldr	r0, [pc, #144]	@ (8011140 <_svfiprintf_r+0x1e8>)
 80110ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80110b2:	2206      	movs	r2, #6
 80110b4:	f7ef f88c 	bl	80001d0 <memchr>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	d036      	beq.n	801112a <_svfiprintf_r+0x1d2>
 80110bc:	4b21      	ldr	r3, [pc, #132]	@ (8011144 <_svfiprintf_r+0x1ec>)
 80110be:	bb1b      	cbnz	r3, 8011108 <_svfiprintf_r+0x1b0>
 80110c0:	9b03      	ldr	r3, [sp, #12]
 80110c2:	3307      	adds	r3, #7
 80110c4:	f023 0307 	bic.w	r3, r3, #7
 80110c8:	3308      	adds	r3, #8
 80110ca:	9303      	str	r3, [sp, #12]
 80110cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110ce:	4433      	add	r3, r6
 80110d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80110d2:	e76a      	b.n	8010faa <_svfiprintf_r+0x52>
 80110d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80110d8:	460c      	mov	r4, r1
 80110da:	2001      	movs	r0, #1
 80110dc:	e7a8      	b.n	8011030 <_svfiprintf_r+0xd8>
 80110de:	2300      	movs	r3, #0
 80110e0:	3401      	adds	r4, #1
 80110e2:	9305      	str	r3, [sp, #20]
 80110e4:	4619      	mov	r1, r3
 80110e6:	f04f 0c0a 	mov.w	ip, #10
 80110ea:	4620      	mov	r0, r4
 80110ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110f0:	3a30      	subs	r2, #48	@ 0x30
 80110f2:	2a09      	cmp	r2, #9
 80110f4:	d903      	bls.n	80110fe <_svfiprintf_r+0x1a6>
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d0c6      	beq.n	8011088 <_svfiprintf_r+0x130>
 80110fa:	9105      	str	r1, [sp, #20]
 80110fc:	e7c4      	b.n	8011088 <_svfiprintf_r+0x130>
 80110fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8011102:	4604      	mov	r4, r0
 8011104:	2301      	movs	r3, #1
 8011106:	e7f0      	b.n	80110ea <_svfiprintf_r+0x192>
 8011108:	ab03      	add	r3, sp, #12
 801110a:	9300      	str	r3, [sp, #0]
 801110c:	462a      	mov	r2, r5
 801110e:	4b0e      	ldr	r3, [pc, #56]	@ (8011148 <_svfiprintf_r+0x1f0>)
 8011110:	a904      	add	r1, sp, #16
 8011112:	4638      	mov	r0, r7
 8011114:	f7fe fadc 	bl	800f6d0 <_printf_float>
 8011118:	1c42      	adds	r2, r0, #1
 801111a:	4606      	mov	r6, r0
 801111c:	d1d6      	bne.n	80110cc <_svfiprintf_r+0x174>
 801111e:	89ab      	ldrh	r3, [r5, #12]
 8011120:	065b      	lsls	r3, r3, #25
 8011122:	f53f af2d 	bmi.w	8010f80 <_svfiprintf_r+0x28>
 8011126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011128:	e72c      	b.n	8010f84 <_svfiprintf_r+0x2c>
 801112a:	ab03      	add	r3, sp, #12
 801112c:	9300      	str	r3, [sp, #0]
 801112e:	462a      	mov	r2, r5
 8011130:	4b05      	ldr	r3, [pc, #20]	@ (8011148 <_svfiprintf_r+0x1f0>)
 8011132:	a904      	add	r1, sp, #16
 8011134:	4638      	mov	r0, r7
 8011136:	f7fe fd63 	bl	800fc00 <_printf_i>
 801113a:	e7ed      	b.n	8011118 <_svfiprintf_r+0x1c0>
 801113c:	08013fd2 	.word	0x08013fd2
 8011140:	08013fdc 	.word	0x08013fdc
 8011144:	0800f6d1 	.word	0x0800f6d1
 8011148:	08010ea1 	.word	0x08010ea1
 801114c:	08013fd8 	.word	0x08013fd8

08011150 <malloc>:
 8011150:	4b02      	ldr	r3, [pc, #8]	@ (801115c <malloc+0xc>)
 8011152:	4601      	mov	r1, r0
 8011154:	6818      	ldr	r0, [r3, #0]
 8011156:	f000 b825 	b.w	80111a4 <_malloc_r>
 801115a:	bf00      	nop
 801115c:	20000164 	.word	0x20000164

08011160 <sbrk_aligned>:
 8011160:	b570      	push	{r4, r5, r6, lr}
 8011162:	4e0f      	ldr	r6, [pc, #60]	@ (80111a0 <sbrk_aligned+0x40>)
 8011164:	460c      	mov	r4, r1
 8011166:	6831      	ldr	r1, [r6, #0]
 8011168:	4605      	mov	r5, r0
 801116a:	b911      	cbnz	r1, 8011172 <sbrk_aligned+0x12>
 801116c:	f000 fd94 	bl	8011c98 <_sbrk_r>
 8011170:	6030      	str	r0, [r6, #0]
 8011172:	4621      	mov	r1, r4
 8011174:	4628      	mov	r0, r5
 8011176:	f000 fd8f 	bl	8011c98 <_sbrk_r>
 801117a:	1c43      	adds	r3, r0, #1
 801117c:	d103      	bne.n	8011186 <sbrk_aligned+0x26>
 801117e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011182:	4620      	mov	r0, r4
 8011184:	bd70      	pop	{r4, r5, r6, pc}
 8011186:	1cc4      	adds	r4, r0, #3
 8011188:	f024 0403 	bic.w	r4, r4, #3
 801118c:	42a0      	cmp	r0, r4
 801118e:	d0f8      	beq.n	8011182 <sbrk_aligned+0x22>
 8011190:	1a21      	subs	r1, r4, r0
 8011192:	4628      	mov	r0, r5
 8011194:	f000 fd80 	bl	8011c98 <_sbrk_r>
 8011198:	3001      	adds	r0, #1
 801119a:	d1f2      	bne.n	8011182 <sbrk_aligned+0x22>
 801119c:	e7ef      	b.n	801117e <sbrk_aligned+0x1e>
 801119e:	bf00      	nop
 80111a0:	200055f8 	.word	0x200055f8

080111a4 <_malloc_r>:
 80111a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111a8:	1ccd      	adds	r5, r1, #3
 80111aa:	f025 0503 	bic.w	r5, r5, #3
 80111ae:	3508      	adds	r5, #8
 80111b0:	2d0c      	cmp	r5, #12
 80111b2:	bf38      	it	cc
 80111b4:	250c      	movcc	r5, #12
 80111b6:	2d00      	cmp	r5, #0
 80111b8:	4606      	mov	r6, r0
 80111ba:	db01      	blt.n	80111c0 <_malloc_r+0x1c>
 80111bc:	42a9      	cmp	r1, r5
 80111be:	d904      	bls.n	80111ca <_malloc_r+0x26>
 80111c0:	230c      	movs	r3, #12
 80111c2:	6033      	str	r3, [r6, #0]
 80111c4:	2000      	movs	r0, #0
 80111c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80112a0 <_malloc_r+0xfc>
 80111ce:	f000 f915 	bl	80113fc <__malloc_lock>
 80111d2:	f8d8 3000 	ldr.w	r3, [r8]
 80111d6:	461c      	mov	r4, r3
 80111d8:	bb44      	cbnz	r4, 801122c <_malloc_r+0x88>
 80111da:	4629      	mov	r1, r5
 80111dc:	4630      	mov	r0, r6
 80111de:	f7ff ffbf 	bl	8011160 <sbrk_aligned>
 80111e2:	1c43      	adds	r3, r0, #1
 80111e4:	4604      	mov	r4, r0
 80111e6:	d158      	bne.n	801129a <_malloc_r+0xf6>
 80111e8:	f8d8 4000 	ldr.w	r4, [r8]
 80111ec:	4627      	mov	r7, r4
 80111ee:	2f00      	cmp	r7, #0
 80111f0:	d143      	bne.n	801127a <_malloc_r+0xd6>
 80111f2:	2c00      	cmp	r4, #0
 80111f4:	d04b      	beq.n	801128e <_malloc_r+0xea>
 80111f6:	6823      	ldr	r3, [r4, #0]
 80111f8:	4639      	mov	r1, r7
 80111fa:	4630      	mov	r0, r6
 80111fc:	eb04 0903 	add.w	r9, r4, r3
 8011200:	f000 fd4a 	bl	8011c98 <_sbrk_r>
 8011204:	4581      	cmp	r9, r0
 8011206:	d142      	bne.n	801128e <_malloc_r+0xea>
 8011208:	6821      	ldr	r1, [r4, #0]
 801120a:	1a6d      	subs	r5, r5, r1
 801120c:	4629      	mov	r1, r5
 801120e:	4630      	mov	r0, r6
 8011210:	f7ff ffa6 	bl	8011160 <sbrk_aligned>
 8011214:	3001      	adds	r0, #1
 8011216:	d03a      	beq.n	801128e <_malloc_r+0xea>
 8011218:	6823      	ldr	r3, [r4, #0]
 801121a:	442b      	add	r3, r5
 801121c:	6023      	str	r3, [r4, #0]
 801121e:	f8d8 3000 	ldr.w	r3, [r8]
 8011222:	685a      	ldr	r2, [r3, #4]
 8011224:	bb62      	cbnz	r2, 8011280 <_malloc_r+0xdc>
 8011226:	f8c8 7000 	str.w	r7, [r8]
 801122a:	e00f      	b.n	801124c <_malloc_r+0xa8>
 801122c:	6822      	ldr	r2, [r4, #0]
 801122e:	1b52      	subs	r2, r2, r5
 8011230:	d420      	bmi.n	8011274 <_malloc_r+0xd0>
 8011232:	2a0b      	cmp	r2, #11
 8011234:	d917      	bls.n	8011266 <_malloc_r+0xc2>
 8011236:	1961      	adds	r1, r4, r5
 8011238:	42a3      	cmp	r3, r4
 801123a:	6025      	str	r5, [r4, #0]
 801123c:	bf18      	it	ne
 801123e:	6059      	strne	r1, [r3, #4]
 8011240:	6863      	ldr	r3, [r4, #4]
 8011242:	bf08      	it	eq
 8011244:	f8c8 1000 	streq.w	r1, [r8]
 8011248:	5162      	str	r2, [r4, r5]
 801124a:	604b      	str	r3, [r1, #4]
 801124c:	4630      	mov	r0, r6
 801124e:	f000 f8db 	bl	8011408 <__malloc_unlock>
 8011252:	f104 000b 	add.w	r0, r4, #11
 8011256:	1d23      	adds	r3, r4, #4
 8011258:	f020 0007 	bic.w	r0, r0, #7
 801125c:	1ac2      	subs	r2, r0, r3
 801125e:	bf1c      	itt	ne
 8011260:	1a1b      	subne	r3, r3, r0
 8011262:	50a3      	strne	r3, [r4, r2]
 8011264:	e7af      	b.n	80111c6 <_malloc_r+0x22>
 8011266:	6862      	ldr	r2, [r4, #4]
 8011268:	42a3      	cmp	r3, r4
 801126a:	bf0c      	ite	eq
 801126c:	f8c8 2000 	streq.w	r2, [r8]
 8011270:	605a      	strne	r2, [r3, #4]
 8011272:	e7eb      	b.n	801124c <_malloc_r+0xa8>
 8011274:	4623      	mov	r3, r4
 8011276:	6864      	ldr	r4, [r4, #4]
 8011278:	e7ae      	b.n	80111d8 <_malloc_r+0x34>
 801127a:	463c      	mov	r4, r7
 801127c:	687f      	ldr	r7, [r7, #4]
 801127e:	e7b6      	b.n	80111ee <_malloc_r+0x4a>
 8011280:	461a      	mov	r2, r3
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	42a3      	cmp	r3, r4
 8011286:	d1fb      	bne.n	8011280 <_malloc_r+0xdc>
 8011288:	2300      	movs	r3, #0
 801128a:	6053      	str	r3, [r2, #4]
 801128c:	e7de      	b.n	801124c <_malloc_r+0xa8>
 801128e:	230c      	movs	r3, #12
 8011290:	6033      	str	r3, [r6, #0]
 8011292:	4630      	mov	r0, r6
 8011294:	f000 f8b8 	bl	8011408 <__malloc_unlock>
 8011298:	e794      	b.n	80111c4 <_malloc_r+0x20>
 801129a:	6005      	str	r5, [r0, #0]
 801129c:	e7d6      	b.n	801124c <_malloc_r+0xa8>
 801129e:	bf00      	nop
 80112a0:	200055fc 	.word	0x200055fc

080112a4 <__sflush_r>:
 80112a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80112a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ac:	0716      	lsls	r6, r2, #28
 80112ae:	4605      	mov	r5, r0
 80112b0:	460c      	mov	r4, r1
 80112b2:	d454      	bmi.n	801135e <__sflush_r+0xba>
 80112b4:	684b      	ldr	r3, [r1, #4]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	dc02      	bgt.n	80112c0 <__sflush_r+0x1c>
 80112ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80112bc:	2b00      	cmp	r3, #0
 80112be:	dd48      	ble.n	8011352 <__sflush_r+0xae>
 80112c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112c2:	2e00      	cmp	r6, #0
 80112c4:	d045      	beq.n	8011352 <__sflush_r+0xae>
 80112c6:	2300      	movs	r3, #0
 80112c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80112cc:	682f      	ldr	r7, [r5, #0]
 80112ce:	6a21      	ldr	r1, [r4, #32]
 80112d0:	602b      	str	r3, [r5, #0]
 80112d2:	d030      	beq.n	8011336 <__sflush_r+0x92>
 80112d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80112d6:	89a3      	ldrh	r3, [r4, #12]
 80112d8:	0759      	lsls	r1, r3, #29
 80112da:	d505      	bpl.n	80112e8 <__sflush_r+0x44>
 80112dc:	6863      	ldr	r3, [r4, #4]
 80112de:	1ad2      	subs	r2, r2, r3
 80112e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80112e2:	b10b      	cbz	r3, 80112e8 <__sflush_r+0x44>
 80112e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80112e6:	1ad2      	subs	r2, r2, r3
 80112e8:	2300      	movs	r3, #0
 80112ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112ec:	6a21      	ldr	r1, [r4, #32]
 80112ee:	4628      	mov	r0, r5
 80112f0:	47b0      	blx	r6
 80112f2:	1c43      	adds	r3, r0, #1
 80112f4:	89a3      	ldrh	r3, [r4, #12]
 80112f6:	d106      	bne.n	8011306 <__sflush_r+0x62>
 80112f8:	6829      	ldr	r1, [r5, #0]
 80112fa:	291d      	cmp	r1, #29
 80112fc:	d82b      	bhi.n	8011356 <__sflush_r+0xb2>
 80112fe:	4a2a      	ldr	r2, [pc, #168]	@ (80113a8 <__sflush_r+0x104>)
 8011300:	410a      	asrs	r2, r1
 8011302:	07d6      	lsls	r6, r2, #31
 8011304:	d427      	bmi.n	8011356 <__sflush_r+0xb2>
 8011306:	2200      	movs	r2, #0
 8011308:	6062      	str	r2, [r4, #4]
 801130a:	04d9      	lsls	r1, r3, #19
 801130c:	6922      	ldr	r2, [r4, #16]
 801130e:	6022      	str	r2, [r4, #0]
 8011310:	d504      	bpl.n	801131c <__sflush_r+0x78>
 8011312:	1c42      	adds	r2, r0, #1
 8011314:	d101      	bne.n	801131a <__sflush_r+0x76>
 8011316:	682b      	ldr	r3, [r5, #0]
 8011318:	b903      	cbnz	r3, 801131c <__sflush_r+0x78>
 801131a:	6560      	str	r0, [r4, #84]	@ 0x54
 801131c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801131e:	602f      	str	r7, [r5, #0]
 8011320:	b1b9      	cbz	r1, 8011352 <__sflush_r+0xae>
 8011322:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011326:	4299      	cmp	r1, r3
 8011328:	d002      	beq.n	8011330 <__sflush_r+0x8c>
 801132a:	4628      	mov	r0, r5
 801132c:	f000 fd08 	bl	8011d40 <_free_r>
 8011330:	2300      	movs	r3, #0
 8011332:	6363      	str	r3, [r4, #52]	@ 0x34
 8011334:	e00d      	b.n	8011352 <__sflush_r+0xae>
 8011336:	2301      	movs	r3, #1
 8011338:	4628      	mov	r0, r5
 801133a:	47b0      	blx	r6
 801133c:	4602      	mov	r2, r0
 801133e:	1c50      	adds	r0, r2, #1
 8011340:	d1c9      	bne.n	80112d6 <__sflush_r+0x32>
 8011342:	682b      	ldr	r3, [r5, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d0c6      	beq.n	80112d6 <__sflush_r+0x32>
 8011348:	2b1d      	cmp	r3, #29
 801134a:	d001      	beq.n	8011350 <__sflush_r+0xac>
 801134c:	2b16      	cmp	r3, #22
 801134e:	d11e      	bne.n	801138e <__sflush_r+0xea>
 8011350:	602f      	str	r7, [r5, #0]
 8011352:	2000      	movs	r0, #0
 8011354:	e022      	b.n	801139c <__sflush_r+0xf8>
 8011356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801135a:	b21b      	sxth	r3, r3
 801135c:	e01b      	b.n	8011396 <__sflush_r+0xf2>
 801135e:	690f      	ldr	r7, [r1, #16]
 8011360:	2f00      	cmp	r7, #0
 8011362:	d0f6      	beq.n	8011352 <__sflush_r+0xae>
 8011364:	0793      	lsls	r3, r2, #30
 8011366:	680e      	ldr	r6, [r1, #0]
 8011368:	bf08      	it	eq
 801136a:	694b      	ldreq	r3, [r1, #20]
 801136c:	600f      	str	r7, [r1, #0]
 801136e:	bf18      	it	ne
 8011370:	2300      	movne	r3, #0
 8011372:	eba6 0807 	sub.w	r8, r6, r7
 8011376:	608b      	str	r3, [r1, #8]
 8011378:	f1b8 0f00 	cmp.w	r8, #0
 801137c:	dde9      	ble.n	8011352 <__sflush_r+0xae>
 801137e:	6a21      	ldr	r1, [r4, #32]
 8011380:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011382:	4643      	mov	r3, r8
 8011384:	463a      	mov	r2, r7
 8011386:	4628      	mov	r0, r5
 8011388:	47b0      	blx	r6
 801138a:	2800      	cmp	r0, #0
 801138c:	dc08      	bgt.n	80113a0 <__sflush_r+0xfc>
 801138e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011396:	81a3      	strh	r3, [r4, #12]
 8011398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801139c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113a0:	4407      	add	r7, r0
 80113a2:	eba8 0800 	sub.w	r8, r8, r0
 80113a6:	e7e7      	b.n	8011378 <__sflush_r+0xd4>
 80113a8:	dfbffffe 	.word	0xdfbffffe

080113ac <_fflush_r>:
 80113ac:	b538      	push	{r3, r4, r5, lr}
 80113ae:	690b      	ldr	r3, [r1, #16]
 80113b0:	4605      	mov	r5, r0
 80113b2:	460c      	mov	r4, r1
 80113b4:	b913      	cbnz	r3, 80113bc <_fflush_r+0x10>
 80113b6:	2500      	movs	r5, #0
 80113b8:	4628      	mov	r0, r5
 80113ba:	bd38      	pop	{r3, r4, r5, pc}
 80113bc:	b118      	cbz	r0, 80113c6 <_fflush_r+0x1a>
 80113be:	6a03      	ldr	r3, [r0, #32]
 80113c0:	b90b      	cbnz	r3, 80113c6 <_fflush_r+0x1a>
 80113c2:	f7fe fe1d 	bl	8010000 <__sinit>
 80113c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d0f3      	beq.n	80113b6 <_fflush_r+0xa>
 80113ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80113d0:	07d0      	lsls	r0, r2, #31
 80113d2:	d404      	bmi.n	80113de <_fflush_r+0x32>
 80113d4:	0599      	lsls	r1, r3, #22
 80113d6:	d402      	bmi.n	80113de <_fflush_r+0x32>
 80113d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113da:	f7fe ff02 	bl	80101e2 <__retarget_lock_acquire_recursive>
 80113de:	4628      	mov	r0, r5
 80113e0:	4621      	mov	r1, r4
 80113e2:	f7ff ff5f 	bl	80112a4 <__sflush_r>
 80113e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113e8:	07da      	lsls	r2, r3, #31
 80113ea:	4605      	mov	r5, r0
 80113ec:	d4e4      	bmi.n	80113b8 <_fflush_r+0xc>
 80113ee:	89a3      	ldrh	r3, [r4, #12]
 80113f0:	059b      	lsls	r3, r3, #22
 80113f2:	d4e1      	bmi.n	80113b8 <_fflush_r+0xc>
 80113f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113f6:	f7fe fef5 	bl	80101e4 <__retarget_lock_release_recursive>
 80113fa:	e7dd      	b.n	80113b8 <_fflush_r+0xc>

080113fc <__malloc_lock>:
 80113fc:	4801      	ldr	r0, [pc, #4]	@ (8011404 <__malloc_lock+0x8>)
 80113fe:	f7fe bef0 	b.w	80101e2 <__retarget_lock_acquire_recursive>
 8011402:	bf00      	nop
 8011404:	200055f4 	.word	0x200055f4

08011408 <__malloc_unlock>:
 8011408:	4801      	ldr	r0, [pc, #4]	@ (8011410 <__malloc_unlock+0x8>)
 801140a:	f7fe beeb 	b.w	80101e4 <__retarget_lock_release_recursive>
 801140e:	bf00      	nop
 8011410:	200055f4 	.word	0x200055f4

08011414 <_Balloc>:
 8011414:	b570      	push	{r4, r5, r6, lr}
 8011416:	69c6      	ldr	r6, [r0, #28]
 8011418:	4604      	mov	r4, r0
 801141a:	460d      	mov	r5, r1
 801141c:	b976      	cbnz	r6, 801143c <_Balloc+0x28>
 801141e:	2010      	movs	r0, #16
 8011420:	f7ff fe96 	bl	8011150 <malloc>
 8011424:	4602      	mov	r2, r0
 8011426:	61e0      	str	r0, [r4, #28]
 8011428:	b920      	cbnz	r0, 8011434 <_Balloc+0x20>
 801142a:	4b18      	ldr	r3, [pc, #96]	@ (801148c <_Balloc+0x78>)
 801142c:	4818      	ldr	r0, [pc, #96]	@ (8011490 <_Balloc+0x7c>)
 801142e:	216b      	movs	r1, #107	@ 0x6b
 8011430:	f000 fc54 	bl	8011cdc <__assert_func>
 8011434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011438:	6006      	str	r6, [r0, #0]
 801143a:	60c6      	str	r6, [r0, #12]
 801143c:	69e6      	ldr	r6, [r4, #28]
 801143e:	68f3      	ldr	r3, [r6, #12]
 8011440:	b183      	cbz	r3, 8011464 <_Balloc+0x50>
 8011442:	69e3      	ldr	r3, [r4, #28]
 8011444:	68db      	ldr	r3, [r3, #12]
 8011446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801144a:	b9b8      	cbnz	r0, 801147c <_Balloc+0x68>
 801144c:	2101      	movs	r1, #1
 801144e:	fa01 f605 	lsl.w	r6, r1, r5
 8011452:	1d72      	adds	r2, r6, #5
 8011454:	0092      	lsls	r2, r2, #2
 8011456:	4620      	mov	r0, r4
 8011458:	f000 fc5e 	bl	8011d18 <_calloc_r>
 801145c:	b160      	cbz	r0, 8011478 <_Balloc+0x64>
 801145e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011462:	e00e      	b.n	8011482 <_Balloc+0x6e>
 8011464:	2221      	movs	r2, #33	@ 0x21
 8011466:	2104      	movs	r1, #4
 8011468:	4620      	mov	r0, r4
 801146a:	f000 fc55 	bl	8011d18 <_calloc_r>
 801146e:	69e3      	ldr	r3, [r4, #28]
 8011470:	60f0      	str	r0, [r6, #12]
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d1e4      	bne.n	8011442 <_Balloc+0x2e>
 8011478:	2000      	movs	r0, #0
 801147a:	bd70      	pop	{r4, r5, r6, pc}
 801147c:	6802      	ldr	r2, [r0, #0]
 801147e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011482:	2300      	movs	r3, #0
 8011484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011488:	e7f7      	b.n	801147a <_Balloc+0x66>
 801148a:	bf00      	nop
 801148c:	08013f52 	.word	0x08013f52
 8011490:	08013fe3 	.word	0x08013fe3

08011494 <_Bfree>:
 8011494:	b570      	push	{r4, r5, r6, lr}
 8011496:	69c6      	ldr	r6, [r0, #28]
 8011498:	4605      	mov	r5, r0
 801149a:	460c      	mov	r4, r1
 801149c:	b976      	cbnz	r6, 80114bc <_Bfree+0x28>
 801149e:	2010      	movs	r0, #16
 80114a0:	f7ff fe56 	bl	8011150 <malloc>
 80114a4:	4602      	mov	r2, r0
 80114a6:	61e8      	str	r0, [r5, #28]
 80114a8:	b920      	cbnz	r0, 80114b4 <_Bfree+0x20>
 80114aa:	4b09      	ldr	r3, [pc, #36]	@ (80114d0 <_Bfree+0x3c>)
 80114ac:	4809      	ldr	r0, [pc, #36]	@ (80114d4 <_Bfree+0x40>)
 80114ae:	218f      	movs	r1, #143	@ 0x8f
 80114b0:	f000 fc14 	bl	8011cdc <__assert_func>
 80114b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114b8:	6006      	str	r6, [r0, #0]
 80114ba:	60c6      	str	r6, [r0, #12]
 80114bc:	b13c      	cbz	r4, 80114ce <_Bfree+0x3a>
 80114be:	69eb      	ldr	r3, [r5, #28]
 80114c0:	6862      	ldr	r2, [r4, #4]
 80114c2:	68db      	ldr	r3, [r3, #12]
 80114c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80114c8:	6021      	str	r1, [r4, #0]
 80114ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80114ce:	bd70      	pop	{r4, r5, r6, pc}
 80114d0:	08013f52 	.word	0x08013f52
 80114d4:	08013fe3 	.word	0x08013fe3

080114d8 <__multadd>:
 80114d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114dc:	690d      	ldr	r5, [r1, #16]
 80114de:	4607      	mov	r7, r0
 80114e0:	460c      	mov	r4, r1
 80114e2:	461e      	mov	r6, r3
 80114e4:	f101 0c14 	add.w	ip, r1, #20
 80114e8:	2000      	movs	r0, #0
 80114ea:	f8dc 3000 	ldr.w	r3, [ip]
 80114ee:	b299      	uxth	r1, r3
 80114f0:	fb02 6101 	mla	r1, r2, r1, r6
 80114f4:	0c1e      	lsrs	r6, r3, #16
 80114f6:	0c0b      	lsrs	r3, r1, #16
 80114f8:	fb02 3306 	mla	r3, r2, r6, r3
 80114fc:	b289      	uxth	r1, r1
 80114fe:	3001      	adds	r0, #1
 8011500:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011504:	4285      	cmp	r5, r0
 8011506:	f84c 1b04 	str.w	r1, [ip], #4
 801150a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801150e:	dcec      	bgt.n	80114ea <__multadd+0x12>
 8011510:	b30e      	cbz	r6, 8011556 <__multadd+0x7e>
 8011512:	68a3      	ldr	r3, [r4, #8]
 8011514:	42ab      	cmp	r3, r5
 8011516:	dc19      	bgt.n	801154c <__multadd+0x74>
 8011518:	6861      	ldr	r1, [r4, #4]
 801151a:	4638      	mov	r0, r7
 801151c:	3101      	adds	r1, #1
 801151e:	f7ff ff79 	bl	8011414 <_Balloc>
 8011522:	4680      	mov	r8, r0
 8011524:	b928      	cbnz	r0, 8011532 <__multadd+0x5a>
 8011526:	4602      	mov	r2, r0
 8011528:	4b0c      	ldr	r3, [pc, #48]	@ (801155c <__multadd+0x84>)
 801152a:	480d      	ldr	r0, [pc, #52]	@ (8011560 <__multadd+0x88>)
 801152c:	21ba      	movs	r1, #186	@ 0xba
 801152e:	f000 fbd5 	bl	8011cdc <__assert_func>
 8011532:	6922      	ldr	r2, [r4, #16]
 8011534:	3202      	adds	r2, #2
 8011536:	f104 010c 	add.w	r1, r4, #12
 801153a:	0092      	lsls	r2, r2, #2
 801153c:	300c      	adds	r0, #12
 801153e:	f7fe fe52 	bl	80101e6 <memcpy>
 8011542:	4621      	mov	r1, r4
 8011544:	4638      	mov	r0, r7
 8011546:	f7ff ffa5 	bl	8011494 <_Bfree>
 801154a:	4644      	mov	r4, r8
 801154c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011550:	3501      	adds	r5, #1
 8011552:	615e      	str	r6, [r3, #20]
 8011554:	6125      	str	r5, [r4, #16]
 8011556:	4620      	mov	r0, r4
 8011558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801155c:	08013fc1 	.word	0x08013fc1
 8011560:	08013fe3 	.word	0x08013fe3

08011564 <__hi0bits>:
 8011564:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011568:	4603      	mov	r3, r0
 801156a:	bf36      	itet	cc
 801156c:	0403      	lslcc	r3, r0, #16
 801156e:	2000      	movcs	r0, #0
 8011570:	2010      	movcc	r0, #16
 8011572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011576:	bf3c      	itt	cc
 8011578:	021b      	lslcc	r3, r3, #8
 801157a:	3008      	addcc	r0, #8
 801157c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011580:	bf3c      	itt	cc
 8011582:	011b      	lslcc	r3, r3, #4
 8011584:	3004      	addcc	r0, #4
 8011586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801158a:	bf3c      	itt	cc
 801158c:	009b      	lslcc	r3, r3, #2
 801158e:	3002      	addcc	r0, #2
 8011590:	2b00      	cmp	r3, #0
 8011592:	db05      	blt.n	80115a0 <__hi0bits+0x3c>
 8011594:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011598:	f100 0001 	add.w	r0, r0, #1
 801159c:	bf08      	it	eq
 801159e:	2020      	moveq	r0, #32
 80115a0:	4770      	bx	lr

080115a2 <__lo0bits>:
 80115a2:	6803      	ldr	r3, [r0, #0]
 80115a4:	4602      	mov	r2, r0
 80115a6:	f013 0007 	ands.w	r0, r3, #7
 80115aa:	d00b      	beq.n	80115c4 <__lo0bits+0x22>
 80115ac:	07d9      	lsls	r1, r3, #31
 80115ae:	d421      	bmi.n	80115f4 <__lo0bits+0x52>
 80115b0:	0798      	lsls	r0, r3, #30
 80115b2:	bf49      	itett	mi
 80115b4:	085b      	lsrmi	r3, r3, #1
 80115b6:	089b      	lsrpl	r3, r3, #2
 80115b8:	2001      	movmi	r0, #1
 80115ba:	6013      	strmi	r3, [r2, #0]
 80115bc:	bf5c      	itt	pl
 80115be:	6013      	strpl	r3, [r2, #0]
 80115c0:	2002      	movpl	r0, #2
 80115c2:	4770      	bx	lr
 80115c4:	b299      	uxth	r1, r3
 80115c6:	b909      	cbnz	r1, 80115cc <__lo0bits+0x2a>
 80115c8:	0c1b      	lsrs	r3, r3, #16
 80115ca:	2010      	movs	r0, #16
 80115cc:	b2d9      	uxtb	r1, r3
 80115ce:	b909      	cbnz	r1, 80115d4 <__lo0bits+0x32>
 80115d0:	3008      	adds	r0, #8
 80115d2:	0a1b      	lsrs	r3, r3, #8
 80115d4:	0719      	lsls	r1, r3, #28
 80115d6:	bf04      	itt	eq
 80115d8:	091b      	lsreq	r3, r3, #4
 80115da:	3004      	addeq	r0, #4
 80115dc:	0799      	lsls	r1, r3, #30
 80115de:	bf04      	itt	eq
 80115e0:	089b      	lsreq	r3, r3, #2
 80115e2:	3002      	addeq	r0, #2
 80115e4:	07d9      	lsls	r1, r3, #31
 80115e6:	d403      	bmi.n	80115f0 <__lo0bits+0x4e>
 80115e8:	085b      	lsrs	r3, r3, #1
 80115ea:	f100 0001 	add.w	r0, r0, #1
 80115ee:	d003      	beq.n	80115f8 <__lo0bits+0x56>
 80115f0:	6013      	str	r3, [r2, #0]
 80115f2:	4770      	bx	lr
 80115f4:	2000      	movs	r0, #0
 80115f6:	4770      	bx	lr
 80115f8:	2020      	movs	r0, #32
 80115fa:	4770      	bx	lr

080115fc <__i2b>:
 80115fc:	b510      	push	{r4, lr}
 80115fe:	460c      	mov	r4, r1
 8011600:	2101      	movs	r1, #1
 8011602:	f7ff ff07 	bl	8011414 <_Balloc>
 8011606:	4602      	mov	r2, r0
 8011608:	b928      	cbnz	r0, 8011616 <__i2b+0x1a>
 801160a:	4b05      	ldr	r3, [pc, #20]	@ (8011620 <__i2b+0x24>)
 801160c:	4805      	ldr	r0, [pc, #20]	@ (8011624 <__i2b+0x28>)
 801160e:	f240 1145 	movw	r1, #325	@ 0x145
 8011612:	f000 fb63 	bl	8011cdc <__assert_func>
 8011616:	2301      	movs	r3, #1
 8011618:	6144      	str	r4, [r0, #20]
 801161a:	6103      	str	r3, [r0, #16]
 801161c:	bd10      	pop	{r4, pc}
 801161e:	bf00      	nop
 8011620:	08013fc1 	.word	0x08013fc1
 8011624:	08013fe3 	.word	0x08013fe3

08011628 <__multiply>:
 8011628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801162c:	4614      	mov	r4, r2
 801162e:	690a      	ldr	r2, [r1, #16]
 8011630:	6923      	ldr	r3, [r4, #16]
 8011632:	429a      	cmp	r2, r3
 8011634:	bfa8      	it	ge
 8011636:	4623      	movge	r3, r4
 8011638:	460f      	mov	r7, r1
 801163a:	bfa4      	itt	ge
 801163c:	460c      	movge	r4, r1
 801163e:	461f      	movge	r7, r3
 8011640:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011644:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011648:	68a3      	ldr	r3, [r4, #8]
 801164a:	6861      	ldr	r1, [r4, #4]
 801164c:	eb0a 0609 	add.w	r6, sl, r9
 8011650:	42b3      	cmp	r3, r6
 8011652:	b085      	sub	sp, #20
 8011654:	bfb8      	it	lt
 8011656:	3101      	addlt	r1, #1
 8011658:	f7ff fedc 	bl	8011414 <_Balloc>
 801165c:	b930      	cbnz	r0, 801166c <__multiply+0x44>
 801165e:	4602      	mov	r2, r0
 8011660:	4b44      	ldr	r3, [pc, #272]	@ (8011774 <__multiply+0x14c>)
 8011662:	4845      	ldr	r0, [pc, #276]	@ (8011778 <__multiply+0x150>)
 8011664:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011668:	f000 fb38 	bl	8011cdc <__assert_func>
 801166c:	f100 0514 	add.w	r5, r0, #20
 8011670:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011674:	462b      	mov	r3, r5
 8011676:	2200      	movs	r2, #0
 8011678:	4543      	cmp	r3, r8
 801167a:	d321      	bcc.n	80116c0 <__multiply+0x98>
 801167c:	f107 0114 	add.w	r1, r7, #20
 8011680:	f104 0214 	add.w	r2, r4, #20
 8011684:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011688:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801168c:	9302      	str	r3, [sp, #8]
 801168e:	1b13      	subs	r3, r2, r4
 8011690:	3b15      	subs	r3, #21
 8011692:	f023 0303 	bic.w	r3, r3, #3
 8011696:	3304      	adds	r3, #4
 8011698:	f104 0715 	add.w	r7, r4, #21
 801169c:	42ba      	cmp	r2, r7
 801169e:	bf38      	it	cc
 80116a0:	2304      	movcc	r3, #4
 80116a2:	9301      	str	r3, [sp, #4]
 80116a4:	9b02      	ldr	r3, [sp, #8]
 80116a6:	9103      	str	r1, [sp, #12]
 80116a8:	428b      	cmp	r3, r1
 80116aa:	d80c      	bhi.n	80116c6 <__multiply+0x9e>
 80116ac:	2e00      	cmp	r6, #0
 80116ae:	dd03      	ble.n	80116b8 <__multiply+0x90>
 80116b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d05b      	beq.n	8011770 <__multiply+0x148>
 80116b8:	6106      	str	r6, [r0, #16]
 80116ba:	b005      	add	sp, #20
 80116bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c0:	f843 2b04 	str.w	r2, [r3], #4
 80116c4:	e7d8      	b.n	8011678 <__multiply+0x50>
 80116c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80116ca:	f1ba 0f00 	cmp.w	sl, #0
 80116ce:	d024      	beq.n	801171a <__multiply+0xf2>
 80116d0:	f104 0e14 	add.w	lr, r4, #20
 80116d4:	46a9      	mov	r9, r5
 80116d6:	f04f 0c00 	mov.w	ip, #0
 80116da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80116de:	f8d9 3000 	ldr.w	r3, [r9]
 80116e2:	fa1f fb87 	uxth.w	fp, r7
 80116e6:	b29b      	uxth	r3, r3
 80116e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80116ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80116f0:	f8d9 7000 	ldr.w	r7, [r9]
 80116f4:	4463      	add	r3, ip
 80116f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80116fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80116fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011702:	b29b      	uxth	r3, r3
 8011704:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011708:	4572      	cmp	r2, lr
 801170a:	f849 3b04 	str.w	r3, [r9], #4
 801170e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011712:	d8e2      	bhi.n	80116da <__multiply+0xb2>
 8011714:	9b01      	ldr	r3, [sp, #4]
 8011716:	f845 c003 	str.w	ip, [r5, r3]
 801171a:	9b03      	ldr	r3, [sp, #12]
 801171c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011720:	3104      	adds	r1, #4
 8011722:	f1b9 0f00 	cmp.w	r9, #0
 8011726:	d021      	beq.n	801176c <__multiply+0x144>
 8011728:	682b      	ldr	r3, [r5, #0]
 801172a:	f104 0c14 	add.w	ip, r4, #20
 801172e:	46ae      	mov	lr, r5
 8011730:	f04f 0a00 	mov.w	sl, #0
 8011734:	f8bc b000 	ldrh.w	fp, [ip]
 8011738:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801173c:	fb09 770b 	mla	r7, r9, fp, r7
 8011740:	4457      	add	r7, sl
 8011742:	b29b      	uxth	r3, r3
 8011744:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011748:	f84e 3b04 	str.w	r3, [lr], #4
 801174c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011750:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011754:	f8be 3000 	ldrh.w	r3, [lr]
 8011758:	fb09 330a 	mla	r3, r9, sl, r3
 801175c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011760:	4562      	cmp	r2, ip
 8011762:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011766:	d8e5      	bhi.n	8011734 <__multiply+0x10c>
 8011768:	9f01      	ldr	r7, [sp, #4]
 801176a:	51eb      	str	r3, [r5, r7]
 801176c:	3504      	adds	r5, #4
 801176e:	e799      	b.n	80116a4 <__multiply+0x7c>
 8011770:	3e01      	subs	r6, #1
 8011772:	e79b      	b.n	80116ac <__multiply+0x84>
 8011774:	08013fc1 	.word	0x08013fc1
 8011778:	08013fe3 	.word	0x08013fe3

0801177c <__pow5mult>:
 801177c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011780:	4615      	mov	r5, r2
 8011782:	f012 0203 	ands.w	r2, r2, #3
 8011786:	4607      	mov	r7, r0
 8011788:	460e      	mov	r6, r1
 801178a:	d007      	beq.n	801179c <__pow5mult+0x20>
 801178c:	4c25      	ldr	r4, [pc, #148]	@ (8011824 <__pow5mult+0xa8>)
 801178e:	3a01      	subs	r2, #1
 8011790:	2300      	movs	r3, #0
 8011792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011796:	f7ff fe9f 	bl	80114d8 <__multadd>
 801179a:	4606      	mov	r6, r0
 801179c:	10ad      	asrs	r5, r5, #2
 801179e:	d03d      	beq.n	801181c <__pow5mult+0xa0>
 80117a0:	69fc      	ldr	r4, [r7, #28]
 80117a2:	b97c      	cbnz	r4, 80117c4 <__pow5mult+0x48>
 80117a4:	2010      	movs	r0, #16
 80117a6:	f7ff fcd3 	bl	8011150 <malloc>
 80117aa:	4602      	mov	r2, r0
 80117ac:	61f8      	str	r0, [r7, #28]
 80117ae:	b928      	cbnz	r0, 80117bc <__pow5mult+0x40>
 80117b0:	4b1d      	ldr	r3, [pc, #116]	@ (8011828 <__pow5mult+0xac>)
 80117b2:	481e      	ldr	r0, [pc, #120]	@ (801182c <__pow5mult+0xb0>)
 80117b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80117b8:	f000 fa90 	bl	8011cdc <__assert_func>
 80117bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80117c0:	6004      	str	r4, [r0, #0]
 80117c2:	60c4      	str	r4, [r0, #12]
 80117c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80117c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80117cc:	b94c      	cbnz	r4, 80117e2 <__pow5mult+0x66>
 80117ce:	f240 2171 	movw	r1, #625	@ 0x271
 80117d2:	4638      	mov	r0, r7
 80117d4:	f7ff ff12 	bl	80115fc <__i2b>
 80117d8:	2300      	movs	r3, #0
 80117da:	f8c8 0008 	str.w	r0, [r8, #8]
 80117de:	4604      	mov	r4, r0
 80117e0:	6003      	str	r3, [r0, #0]
 80117e2:	f04f 0900 	mov.w	r9, #0
 80117e6:	07eb      	lsls	r3, r5, #31
 80117e8:	d50a      	bpl.n	8011800 <__pow5mult+0x84>
 80117ea:	4631      	mov	r1, r6
 80117ec:	4622      	mov	r2, r4
 80117ee:	4638      	mov	r0, r7
 80117f0:	f7ff ff1a 	bl	8011628 <__multiply>
 80117f4:	4631      	mov	r1, r6
 80117f6:	4680      	mov	r8, r0
 80117f8:	4638      	mov	r0, r7
 80117fa:	f7ff fe4b 	bl	8011494 <_Bfree>
 80117fe:	4646      	mov	r6, r8
 8011800:	106d      	asrs	r5, r5, #1
 8011802:	d00b      	beq.n	801181c <__pow5mult+0xa0>
 8011804:	6820      	ldr	r0, [r4, #0]
 8011806:	b938      	cbnz	r0, 8011818 <__pow5mult+0x9c>
 8011808:	4622      	mov	r2, r4
 801180a:	4621      	mov	r1, r4
 801180c:	4638      	mov	r0, r7
 801180e:	f7ff ff0b 	bl	8011628 <__multiply>
 8011812:	6020      	str	r0, [r4, #0]
 8011814:	f8c0 9000 	str.w	r9, [r0]
 8011818:	4604      	mov	r4, r0
 801181a:	e7e4      	b.n	80117e6 <__pow5mult+0x6a>
 801181c:	4630      	mov	r0, r6
 801181e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011822:	bf00      	nop
 8011824:	0801403c 	.word	0x0801403c
 8011828:	08013f52 	.word	0x08013f52
 801182c:	08013fe3 	.word	0x08013fe3

08011830 <__lshift>:
 8011830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011834:	460c      	mov	r4, r1
 8011836:	6849      	ldr	r1, [r1, #4]
 8011838:	6923      	ldr	r3, [r4, #16]
 801183a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801183e:	68a3      	ldr	r3, [r4, #8]
 8011840:	4607      	mov	r7, r0
 8011842:	4691      	mov	r9, r2
 8011844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011848:	f108 0601 	add.w	r6, r8, #1
 801184c:	42b3      	cmp	r3, r6
 801184e:	db0b      	blt.n	8011868 <__lshift+0x38>
 8011850:	4638      	mov	r0, r7
 8011852:	f7ff fddf 	bl	8011414 <_Balloc>
 8011856:	4605      	mov	r5, r0
 8011858:	b948      	cbnz	r0, 801186e <__lshift+0x3e>
 801185a:	4602      	mov	r2, r0
 801185c:	4b28      	ldr	r3, [pc, #160]	@ (8011900 <__lshift+0xd0>)
 801185e:	4829      	ldr	r0, [pc, #164]	@ (8011904 <__lshift+0xd4>)
 8011860:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011864:	f000 fa3a 	bl	8011cdc <__assert_func>
 8011868:	3101      	adds	r1, #1
 801186a:	005b      	lsls	r3, r3, #1
 801186c:	e7ee      	b.n	801184c <__lshift+0x1c>
 801186e:	2300      	movs	r3, #0
 8011870:	f100 0114 	add.w	r1, r0, #20
 8011874:	f100 0210 	add.w	r2, r0, #16
 8011878:	4618      	mov	r0, r3
 801187a:	4553      	cmp	r3, sl
 801187c:	db33      	blt.n	80118e6 <__lshift+0xb6>
 801187e:	6920      	ldr	r0, [r4, #16]
 8011880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011884:	f104 0314 	add.w	r3, r4, #20
 8011888:	f019 091f 	ands.w	r9, r9, #31
 801188c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011890:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011894:	d02b      	beq.n	80118ee <__lshift+0xbe>
 8011896:	f1c9 0e20 	rsb	lr, r9, #32
 801189a:	468a      	mov	sl, r1
 801189c:	2200      	movs	r2, #0
 801189e:	6818      	ldr	r0, [r3, #0]
 80118a0:	fa00 f009 	lsl.w	r0, r0, r9
 80118a4:	4310      	orrs	r0, r2
 80118a6:	f84a 0b04 	str.w	r0, [sl], #4
 80118aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ae:	459c      	cmp	ip, r3
 80118b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80118b4:	d8f3      	bhi.n	801189e <__lshift+0x6e>
 80118b6:	ebac 0304 	sub.w	r3, ip, r4
 80118ba:	3b15      	subs	r3, #21
 80118bc:	f023 0303 	bic.w	r3, r3, #3
 80118c0:	3304      	adds	r3, #4
 80118c2:	f104 0015 	add.w	r0, r4, #21
 80118c6:	4584      	cmp	ip, r0
 80118c8:	bf38      	it	cc
 80118ca:	2304      	movcc	r3, #4
 80118cc:	50ca      	str	r2, [r1, r3]
 80118ce:	b10a      	cbz	r2, 80118d4 <__lshift+0xa4>
 80118d0:	f108 0602 	add.w	r6, r8, #2
 80118d4:	3e01      	subs	r6, #1
 80118d6:	4638      	mov	r0, r7
 80118d8:	612e      	str	r6, [r5, #16]
 80118da:	4621      	mov	r1, r4
 80118dc:	f7ff fdda 	bl	8011494 <_Bfree>
 80118e0:	4628      	mov	r0, r5
 80118e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80118ea:	3301      	adds	r3, #1
 80118ec:	e7c5      	b.n	801187a <__lshift+0x4a>
 80118ee:	3904      	subs	r1, #4
 80118f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80118f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80118f8:	459c      	cmp	ip, r3
 80118fa:	d8f9      	bhi.n	80118f0 <__lshift+0xc0>
 80118fc:	e7ea      	b.n	80118d4 <__lshift+0xa4>
 80118fe:	bf00      	nop
 8011900:	08013fc1 	.word	0x08013fc1
 8011904:	08013fe3 	.word	0x08013fe3

08011908 <__mcmp>:
 8011908:	690a      	ldr	r2, [r1, #16]
 801190a:	4603      	mov	r3, r0
 801190c:	6900      	ldr	r0, [r0, #16]
 801190e:	1a80      	subs	r0, r0, r2
 8011910:	b530      	push	{r4, r5, lr}
 8011912:	d10e      	bne.n	8011932 <__mcmp+0x2a>
 8011914:	3314      	adds	r3, #20
 8011916:	3114      	adds	r1, #20
 8011918:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801191c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011920:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011924:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011928:	4295      	cmp	r5, r2
 801192a:	d003      	beq.n	8011934 <__mcmp+0x2c>
 801192c:	d205      	bcs.n	801193a <__mcmp+0x32>
 801192e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011932:	bd30      	pop	{r4, r5, pc}
 8011934:	42a3      	cmp	r3, r4
 8011936:	d3f3      	bcc.n	8011920 <__mcmp+0x18>
 8011938:	e7fb      	b.n	8011932 <__mcmp+0x2a>
 801193a:	2001      	movs	r0, #1
 801193c:	e7f9      	b.n	8011932 <__mcmp+0x2a>
	...

08011940 <__mdiff>:
 8011940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011944:	4689      	mov	r9, r1
 8011946:	4606      	mov	r6, r0
 8011948:	4611      	mov	r1, r2
 801194a:	4648      	mov	r0, r9
 801194c:	4614      	mov	r4, r2
 801194e:	f7ff ffdb 	bl	8011908 <__mcmp>
 8011952:	1e05      	subs	r5, r0, #0
 8011954:	d112      	bne.n	801197c <__mdiff+0x3c>
 8011956:	4629      	mov	r1, r5
 8011958:	4630      	mov	r0, r6
 801195a:	f7ff fd5b 	bl	8011414 <_Balloc>
 801195e:	4602      	mov	r2, r0
 8011960:	b928      	cbnz	r0, 801196e <__mdiff+0x2e>
 8011962:	4b3f      	ldr	r3, [pc, #252]	@ (8011a60 <__mdiff+0x120>)
 8011964:	f240 2137 	movw	r1, #567	@ 0x237
 8011968:	483e      	ldr	r0, [pc, #248]	@ (8011a64 <__mdiff+0x124>)
 801196a:	f000 f9b7 	bl	8011cdc <__assert_func>
 801196e:	2301      	movs	r3, #1
 8011970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011974:	4610      	mov	r0, r2
 8011976:	b003      	add	sp, #12
 8011978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801197c:	bfbc      	itt	lt
 801197e:	464b      	movlt	r3, r9
 8011980:	46a1      	movlt	r9, r4
 8011982:	4630      	mov	r0, r6
 8011984:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011988:	bfba      	itte	lt
 801198a:	461c      	movlt	r4, r3
 801198c:	2501      	movlt	r5, #1
 801198e:	2500      	movge	r5, #0
 8011990:	f7ff fd40 	bl	8011414 <_Balloc>
 8011994:	4602      	mov	r2, r0
 8011996:	b918      	cbnz	r0, 80119a0 <__mdiff+0x60>
 8011998:	4b31      	ldr	r3, [pc, #196]	@ (8011a60 <__mdiff+0x120>)
 801199a:	f240 2145 	movw	r1, #581	@ 0x245
 801199e:	e7e3      	b.n	8011968 <__mdiff+0x28>
 80119a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80119a4:	6926      	ldr	r6, [r4, #16]
 80119a6:	60c5      	str	r5, [r0, #12]
 80119a8:	f109 0310 	add.w	r3, r9, #16
 80119ac:	f109 0514 	add.w	r5, r9, #20
 80119b0:	f104 0e14 	add.w	lr, r4, #20
 80119b4:	f100 0b14 	add.w	fp, r0, #20
 80119b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80119bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80119c0:	9301      	str	r3, [sp, #4]
 80119c2:	46d9      	mov	r9, fp
 80119c4:	f04f 0c00 	mov.w	ip, #0
 80119c8:	9b01      	ldr	r3, [sp, #4]
 80119ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80119ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80119d2:	9301      	str	r3, [sp, #4]
 80119d4:	fa1f f38a 	uxth.w	r3, sl
 80119d8:	4619      	mov	r1, r3
 80119da:	b283      	uxth	r3, r0
 80119dc:	1acb      	subs	r3, r1, r3
 80119de:	0c00      	lsrs	r0, r0, #16
 80119e0:	4463      	add	r3, ip
 80119e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80119e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80119f0:	4576      	cmp	r6, lr
 80119f2:	f849 3b04 	str.w	r3, [r9], #4
 80119f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80119fa:	d8e5      	bhi.n	80119c8 <__mdiff+0x88>
 80119fc:	1b33      	subs	r3, r6, r4
 80119fe:	3b15      	subs	r3, #21
 8011a00:	f023 0303 	bic.w	r3, r3, #3
 8011a04:	3415      	adds	r4, #21
 8011a06:	3304      	adds	r3, #4
 8011a08:	42a6      	cmp	r6, r4
 8011a0a:	bf38      	it	cc
 8011a0c:	2304      	movcc	r3, #4
 8011a0e:	441d      	add	r5, r3
 8011a10:	445b      	add	r3, fp
 8011a12:	461e      	mov	r6, r3
 8011a14:	462c      	mov	r4, r5
 8011a16:	4544      	cmp	r4, r8
 8011a18:	d30e      	bcc.n	8011a38 <__mdiff+0xf8>
 8011a1a:	f108 0103 	add.w	r1, r8, #3
 8011a1e:	1b49      	subs	r1, r1, r5
 8011a20:	f021 0103 	bic.w	r1, r1, #3
 8011a24:	3d03      	subs	r5, #3
 8011a26:	45a8      	cmp	r8, r5
 8011a28:	bf38      	it	cc
 8011a2a:	2100      	movcc	r1, #0
 8011a2c:	440b      	add	r3, r1
 8011a2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a32:	b191      	cbz	r1, 8011a5a <__mdiff+0x11a>
 8011a34:	6117      	str	r7, [r2, #16]
 8011a36:	e79d      	b.n	8011974 <__mdiff+0x34>
 8011a38:	f854 1b04 	ldr.w	r1, [r4], #4
 8011a3c:	46e6      	mov	lr, ip
 8011a3e:	0c08      	lsrs	r0, r1, #16
 8011a40:	fa1c fc81 	uxtah	ip, ip, r1
 8011a44:	4471      	add	r1, lr
 8011a46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011a4a:	b289      	uxth	r1, r1
 8011a4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011a50:	f846 1b04 	str.w	r1, [r6], #4
 8011a54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011a58:	e7dd      	b.n	8011a16 <__mdiff+0xd6>
 8011a5a:	3f01      	subs	r7, #1
 8011a5c:	e7e7      	b.n	8011a2e <__mdiff+0xee>
 8011a5e:	bf00      	nop
 8011a60:	08013fc1 	.word	0x08013fc1
 8011a64:	08013fe3 	.word	0x08013fe3

08011a68 <__d2b>:
 8011a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a6c:	460f      	mov	r7, r1
 8011a6e:	2101      	movs	r1, #1
 8011a70:	ec59 8b10 	vmov	r8, r9, d0
 8011a74:	4616      	mov	r6, r2
 8011a76:	f7ff fccd 	bl	8011414 <_Balloc>
 8011a7a:	4604      	mov	r4, r0
 8011a7c:	b930      	cbnz	r0, 8011a8c <__d2b+0x24>
 8011a7e:	4602      	mov	r2, r0
 8011a80:	4b23      	ldr	r3, [pc, #140]	@ (8011b10 <__d2b+0xa8>)
 8011a82:	4824      	ldr	r0, [pc, #144]	@ (8011b14 <__d2b+0xac>)
 8011a84:	f240 310f 	movw	r1, #783	@ 0x30f
 8011a88:	f000 f928 	bl	8011cdc <__assert_func>
 8011a8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011a90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a94:	b10d      	cbz	r5, 8011a9a <__d2b+0x32>
 8011a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011a9a:	9301      	str	r3, [sp, #4]
 8011a9c:	f1b8 0300 	subs.w	r3, r8, #0
 8011aa0:	d023      	beq.n	8011aea <__d2b+0x82>
 8011aa2:	4668      	mov	r0, sp
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	f7ff fd7c 	bl	80115a2 <__lo0bits>
 8011aaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011aae:	b1d0      	cbz	r0, 8011ae6 <__d2b+0x7e>
 8011ab0:	f1c0 0320 	rsb	r3, r0, #32
 8011ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8011ab8:	430b      	orrs	r3, r1
 8011aba:	40c2      	lsrs	r2, r0
 8011abc:	6163      	str	r3, [r4, #20]
 8011abe:	9201      	str	r2, [sp, #4]
 8011ac0:	9b01      	ldr	r3, [sp, #4]
 8011ac2:	61a3      	str	r3, [r4, #24]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	bf0c      	ite	eq
 8011ac8:	2201      	moveq	r2, #1
 8011aca:	2202      	movne	r2, #2
 8011acc:	6122      	str	r2, [r4, #16]
 8011ace:	b1a5      	cbz	r5, 8011afa <__d2b+0x92>
 8011ad0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011ad4:	4405      	add	r5, r0
 8011ad6:	603d      	str	r5, [r7, #0]
 8011ad8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011adc:	6030      	str	r0, [r6, #0]
 8011ade:	4620      	mov	r0, r4
 8011ae0:	b003      	add	sp, #12
 8011ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ae6:	6161      	str	r1, [r4, #20]
 8011ae8:	e7ea      	b.n	8011ac0 <__d2b+0x58>
 8011aea:	a801      	add	r0, sp, #4
 8011aec:	f7ff fd59 	bl	80115a2 <__lo0bits>
 8011af0:	9b01      	ldr	r3, [sp, #4]
 8011af2:	6163      	str	r3, [r4, #20]
 8011af4:	3020      	adds	r0, #32
 8011af6:	2201      	movs	r2, #1
 8011af8:	e7e8      	b.n	8011acc <__d2b+0x64>
 8011afa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011afe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011b02:	6038      	str	r0, [r7, #0]
 8011b04:	6918      	ldr	r0, [r3, #16]
 8011b06:	f7ff fd2d 	bl	8011564 <__hi0bits>
 8011b0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b0e:	e7e5      	b.n	8011adc <__d2b+0x74>
 8011b10:	08013fc1 	.word	0x08013fc1
 8011b14:	08013fe3 	.word	0x08013fe3

08011b18 <__sread>:
 8011b18:	b510      	push	{r4, lr}
 8011b1a:	460c      	mov	r4, r1
 8011b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b20:	f000 f8a8 	bl	8011c74 <_read_r>
 8011b24:	2800      	cmp	r0, #0
 8011b26:	bfab      	itete	ge
 8011b28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011b2a:	89a3      	ldrhlt	r3, [r4, #12]
 8011b2c:	181b      	addge	r3, r3, r0
 8011b2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011b32:	bfac      	ite	ge
 8011b34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011b36:	81a3      	strhlt	r3, [r4, #12]
 8011b38:	bd10      	pop	{r4, pc}

08011b3a <__swrite>:
 8011b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b3e:	461f      	mov	r7, r3
 8011b40:	898b      	ldrh	r3, [r1, #12]
 8011b42:	05db      	lsls	r3, r3, #23
 8011b44:	4605      	mov	r5, r0
 8011b46:	460c      	mov	r4, r1
 8011b48:	4616      	mov	r6, r2
 8011b4a:	d505      	bpl.n	8011b58 <__swrite+0x1e>
 8011b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b50:	2302      	movs	r3, #2
 8011b52:	2200      	movs	r2, #0
 8011b54:	f000 f87c 	bl	8011c50 <_lseek_r>
 8011b58:	89a3      	ldrh	r3, [r4, #12]
 8011b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011b62:	81a3      	strh	r3, [r4, #12]
 8011b64:	4632      	mov	r2, r6
 8011b66:	463b      	mov	r3, r7
 8011b68:	4628      	mov	r0, r5
 8011b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b6e:	f000 b8a3 	b.w	8011cb8 <_write_r>

08011b72 <__sseek>:
 8011b72:	b510      	push	{r4, lr}
 8011b74:	460c      	mov	r4, r1
 8011b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b7a:	f000 f869 	bl	8011c50 <_lseek_r>
 8011b7e:	1c43      	adds	r3, r0, #1
 8011b80:	89a3      	ldrh	r3, [r4, #12]
 8011b82:	bf15      	itete	ne
 8011b84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011b86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011b8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011b8e:	81a3      	strheq	r3, [r4, #12]
 8011b90:	bf18      	it	ne
 8011b92:	81a3      	strhne	r3, [r4, #12]
 8011b94:	bd10      	pop	{r4, pc}

08011b96 <__sclose>:
 8011b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b9a:	f000 b849 	b.w	8011c30 <_close_r>

08011b9e <_realloc_r>:
 8011b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba2:	4680      	mov	r8, r0
 8011ba4:	4615      	mov	r5, r2
 8011ba6:	460c      	mov	r4, r1
 8011ba8:	b921      	cbnz	r1, 8011bb4 <_realloc_r+0x16>
 8011baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bae:	4611      	mov	r1, r2
 8011bb0:	f7ff baf8 	b.w	80111a4 <_malloc_r>
 8011bb4:	b92a      	cbnz	r2, 8011bc2 <_realloc_r+0x24>
 8011bb6:	f000 f8c3 	bl	8011d40 <_free_r>
 8011bba:	2400      	movs	r4, #0
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc2:	f000 f919 	bl	8011df8 <_malloc_usable_size_r>
 8011bc6:	4285      	cmp	r5, r0
 8011bc8:	4606      	mov	r6, r0
 8011bca:	d802      	bhi.n	8011bd2 <_realloc_r+0x34>
 8011bcc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011bd0:	d8f4      	bhi.n	8011bbc <_realloc_r+0x1e>
 8011bd2:	4629      	mov	r1, r5
 8011bd4:	4640      	mov	r0, r8
 8011bd6:	f7ff fae5 	bl	80111a4 <_malloc_r>
 8011bda:	4607      	mov	r7, r0
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	d0ec      	beq.n	8011bba <_realloc_r+0x1c>
 8011be0:	42b5      	cmp	r5, r6
 8011be2:	462a      	mov	r2, r5
 8011be4:	4621      	mov	r1, r4
 8011be6:	bf28      	it	cs
 8011be8:	4632      	movcs	r2, r6
 8011bea:	f7fe fafc 	bl	80101e6 <memcpy>
 8011bee:	4621      	mov	r1, r4
 8011bf0:	4640      	mov	r0, r8
 8011bf2:	f000 f8a5 	bl	8011d40 <_free_r>
 8011bf6:	463c      	mov	r4, r7
 8011bf8:	e7e0      	b.n	8011bbc <_realloc_r+0x1e>

08011bfa <memmove>:
 8011bfa:	4288      	cmp	r0, r1
 8011bfc:	b510      	push	{r4, lr}
 8011bfe:	eb01 0402 	add.w	r4, r1, r2
 8011c02:	d902      	bls.n	8011c0a <memmove+0x10>
 8011c04:	4284      	cmp	r4, r0
 8011c06:	4623      	mov	r3, r4
 8011c08:	d807      	bhi.n	8011c1a <memmove+0x20>
 8011c0a:	1e43      	subs	r3, r0, #1
 8011c0c:	42a1      	cmp	r1, r4
 8011c0e:	d008      	beq.n	8011c22 <memmove+0x28>
 8011c10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c18:	e7f8      	b.n	8011c0c <memmove+0x12>
 8011c1a:	4402      	add	r2, r0
 8011c1c:	4601      	mov	r1, r0
 8011c1e:	428a      	cmp	r2, r1
 8011c20:	d100      	bne.n	8011c24 <memmove+0x2a>
 8011c22:	bd10      	pop	{r4, pc}
 8011c24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c2c:	e7f7      	b.n	8011c1e <memmove+0x24>
	...

08011c30 <_close_r>:
 8011c30:	b538      	push	{r3, r4, r5, lr}
 8011c32:	4d06      	ldr	r5, [pc, #24]	@ (8011c4c <_close_r+0x1c>)
 8011c34:	2300      	movs	r3, #0
 8011c36:	4604      	mov	r4, r0
 8011c38:	4608      	mov	r0, r1
 8011c3a:	602b      	str	r3, [r5, #0]
 8011c3c:	f7f5 fa72 	bl	8007124 <_close>
 8011c40:	1c43      	adds	r3, r0, #1
 8011c42:	d102      	bne.n	8011c4a <_close_r+0x1a>
 8011c44:	682b      	ldr	r3, [r5, #0]
 8011c46:	b103      	cbz	r3, 8011c4a <_close_r+0x1a>
 8011c48:	6023      	str	r3, [r4, #0]
 8011c4a:	bd38      	pop	{r3, r4, r5, pc}
 8011c4c:	20005600 	.word	0x20005600

08011c50 <_lseek_r>:
 8011c50:	b538      	push	{r3, r4, r5, lr}
 8011c52:	4d07      	ldr	r5, [pc, #28]	@ (8011c70 <_lseek_r+0x20>)
 8011c54:	4604      	mov	r4, r0
 8011c56:	4608      	mov	r0, r1
 8011c58:	4611      	mov	r1, r2
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	602a      	str	r2, [r5, #0]
 8011c5e:	461a      	mov	r2, r3
 8011c60:	f7f5 fa87 	bl	8007172 <_lseek>
 8011c64:	1c43      	adds	r3, r0, #1
 8011c66:	d102      	bne.n	8011c6e <_lseek_r+0x1e>
 8011c68:	682b      	ldr	r3, [r5, #0]
 8011c6a:	b103      	cbz	r3, 8011c6e <_lseek_r+0x1e>
 8011c6c:	6023      	str	r3, [r4, #0]
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
 8011c70:	20005600 	.word	0x20005600

08011c74 <_read_r>:
 8011c74:	b538      	push	{r3, r4, r5, lr}
 8011c76:	4d07      	ldr	r5, [pc, #28]	@ (8011c94 <_read_r+0x20>)
 8011c78:	4604      	mov	r4, r0
 8011c7a:	4608      	mov	r0, r1
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	2200      	movs	r2, #0
 8011c80:	602a      	str	r2, [r5, #0]
 8011c82:	461a      	mov	r2, r3
 8011c84:	f7f5 fa15 	bl	80070b2 <_read>
 8011c88:	1c43      	adds	r3, r0, #1
 8011c8a:	d102      	bne.n	8011c92 <_read_r+0x1e>
 8011c8c:	682b      	ldr	r3, [r5, #0]
 8011c8e:	b103      	cbz	r3, 8011c92 <_read_r+0x1e>
 8011c90:	6023      	str	r3, [r4, #0]
 8011c92:	bd38      	pop	{r3, r4, r5, pc}
 8011c94:	20005600 	.word	0x20005600

08011c98 <_sbrk_r>:
 8011c98:	b538      	push	{r3, r4, r5, lr}
 8011c9a:	4d06      	ldr	r5, [pc, #24]	@ (8011cb4 <_sbrk_r+0x1c>)
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	4608      	mov	r0, r1
 8011ca2:	602b      	str	r3, [r5, #0]
 8011ca4:	f7f5 fa72 	bl	800718c <_sbrk>
 8011ca8:	1c43      	adds	r3, r0, #1
 8011caa:	d102      	bne.n	8011cb2 <_sbrk_r+0x1a>
 8011cac:	682b      	ldr	r3, [r5, #0]
 8011cae:	b103      	cbz	r3, 8011cb2 <_sbrk_r+0x1a>
 8011cb0:	6023      	str	r3, [r4, #0]
 8011cb2:	bd38      	pop	{r3, r4, r5, pc}
 8011cb4:	20005600 	.word	0x20005600

08011cb8 <_write_r>:
 8011cb8:	b538      	push	{r3, r4, r5, lr}
 8011cba:	4d07      	ldr	r5, [pc, #28]	@ (8011cd8 <_write_r+0x20>)
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	4608      	mov	r0, r1
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	602a      	str	r2, [r5, #0]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	f7f5 fa10 	bl	80070ec <_write>
 8011ccc:	1c43      	adds	r3, r0, #1
 8011cce:	d102      	bne.n	8011cd6 <_write_r+0x1e>
 8011cd0:	682b      	ldr	r3, [r5, #0]
 8011cd2:	b103      	cbz	r3, 8011cd6 <_write_r+0x1e>
 8011cd4:	6023      	str	r3, [r4, #0]
 8011cd6:	bd38      	pop	{r3, r4, r5, pc}
 8011cd8:	20005600 	.word	0x20005600

08011cdc <__assert_func>:
 8011cdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011cde:	4614      	mov	r4, r2
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	4b09      	ldr	r3, [pc, #36]	@ (8011d08 <__assert_func+0x2c>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	68d8      	ldr	r0, [r3, #12]
 8011cea:	b954      	cbnz	r4, 8011d02 <__assert_func+0x26>
 8011cec:	4b07      	ldr	r3, [pc, #28]	@ (8011d0c <__assert_func+0x30>)
 8011cee:	461c      	mov	r4, r3
 8011cf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011cf4:	9100      	str	r1, [sp, #0]
 8011cf6:	462b      	mov	r3, r5
 8011cf8:	4905      	ldr	r1, [pc, #20]	@ (8011d10 <__assert_func+0x34>)
 8011cfa:	f000 f885 	bl	8011e08 <fiprintf>
 8011cfe:	f000 f8a2 	bl	8011e46 <abort>
 8011d02:	4b04      	ldr	r3, [pc, #16]	@ (8011d14 <__assert_func+0x38>)
 8011d04:	e7f4      	b.n	8011cf0 <__assert_func+0x14>
 8011d06:	bf00      	nop
 8011d08:	20000164 	.word	0x20000164
 8011d0c:	0801417d 	.word	0x0801417d
 8011d10:	0801414f 	.word	0x0801414f
 8011d14:	08014142 	.word	0x08014142

08011d18 <_calloc_r>:
 8011d18:	b570      	push	{r4, r5, r6, lr}
 8011d1a:	fba1 5402 	umull	r5, r4, r1, r2
 8011d1e:	b93c      	cbnz	r4, 8011d30 <_calloc_r+0x18>
 8011d20:	4629      	mov	r1, r5
 8011d22:	f7ff fa3f 	bl	80111a4 <_malloc_r>
 8011d26:	4606      	mov	r6, r0
 8011d28:	b928      	cbnz	r0, 8011d36 <_calloc_r+0x1e>
 8011d2a:	2600      	movs	r6, #0
 8011d2c:	4630      	mov	r0, r6
 8011d2e:	bd70      	pop	{r4, r5, r6, pc}
 8011d30:	220c      	movs	r2, #12
 8011d32:	6002      	str	r2, [r0, #0]
 8011d34:	e7f9      	b.n	8011d2a <_calloc_r+0x12>
 8011d36:	462a      	mov	r2, r5
 8011d38:	4621      	mov	r1, r4
 8011d3a:	f7fe fa1b 	bl	8010174 <memset>
 8011d3e:	e7f5      	b.n	8011d2c <_calloc_r+0x14>

08011d40 <_free_r>:
 8011d40:	b538      	push	{r3, r4, r5, lr}
 8011d42:	4605      	mov	r5, r0
 8011d44:	2900      	cmp	r1, #0
 8011d46:	d041      	beq.n	8011dcc <_free_r+0x8c>
 8011d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d4c:	1f0c      	subs	r4, r1, #4
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	bfb8      	it	lt
 8011d52:	18e4      	addlt	r4, r4, r3
 8011d54:	f7ff fb52 	bl	80113fc <__malloc_lock>
 8011d58:	4a1d      	ldr	r2, [pc, #116]	@ (8011dd0 <_free_r+0x90>)
 8011d5a:	6813      	ldr	r3, [r2, #0]
 8011d5c:	b933      	cbnz	r3, 8011d6c <_free_r+0x2c>
 8011d5e:	6063      	str	r3, [r4, #4]
 8011d60:	6014      	str	r4, [r2, #0]
 8011d62:	4628      	mov	r0, r5
 8011d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d68:	f7ff bb4e 	b.w	8011408 <__malloc_unlock>
 8011d6c:	42a3      	cmp	r3, r4
 8011d6e:	d908      	bls.n	8011d82 <_free_r+0x42>
 8011d70:	6820      	ldr	r0, [r4, #0]
 8011d72:	1821      	adds	r1, r4, r0
 8011d74:	428b      	cmp	r3, r1
 8011d76:	bf01      	itttt	eq
 8011d78:	6819      	ldreq	r1, [r3, #0]
 8011d7a:	685b      	ldreq	r3, [r3, #4]
 8011d7c:	1809      	addeq	r1, r1, r0
 8011d7e:	6021      	streq	r1, [r4, #0]
 8011d80:	e7ed      	b.n	8011d5e <_free_r+0x1e>
 8011d82:	461a      	mov	r2, r3
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	b10b      	cbz	r3, 8011d8c <_free_r+0x4c>
 8011d88:	42a3      	cmp	r3, r4
 8011d8a:	d9fa      	bls.n	8011d82 <_free_r+0x42>
 8011d8c:	6811      	ldr	r1, [r2, #0]
 8011d8e:	1850      	adds	r0, r2, r1
 8011d90:	42a0      	cmp	r0, r4
 8011d92:	d10b      	bne.n	8011dac <_free_r+0x6c>
 8011d94:	6820      	ldr	r0, [r4, #0]
 8011d96:	4401      	add	r1, r0
 8011d98:	1850      	adds	r0, r2, r1
 8011d9a:	4283      	cmp	r3, r0
 8011d9c:	6011      	str	r1, [r2, #0]
 8011d9e:	d1e0      	bne.n	8011d62 <_free_r+0x22>
 8011da0:	6818      	ldr	r0, [r3, #0]
 8011da2:	685b      	ldr	r3, [r3, #4]
 8011da4:	6053      	str	r3, [r2, #4]
 8011da6:	4408      	add	r0, r1
 8011da8:	6010      	str	r0, [r2, #0]
 8011daa:	e7da      	b.n	8011d62 <_free_r+0x22>
 8011dac:	d902      	bls.n	8011db4 <_free_r+0x74>
 8011dae:	230c      	movs	r3, #12
 8011db0:	602b      	str	r3, [r5, #0]
 8011db2:	e7d6      	b.n	8011d62 <_free_r+0x22>
 8011db4:	6820      	ldr	r0, [r4, #0]
 8011db6:	1821      	adds	r1, r4, r0
 8011db8:	428b      	cmp	r3, r1
 8011dba:	bf04      	itt	eq
 8011dbc:	6819      	ldreq	r1, [r3, #0]
 8011dbe:	685b      	ldreq	r3, [r3, #4]
 8011dc0:	6063      	str	r3, [r4, #4]
 8011dc2:	bf04      	itt	eq
 8011dc4:	1809      	addeq	r1, r1, r0
 8011dc6:	6021      	streq	r1, [r4, #0]
 8011dc8:	6054      	str	r4, [r2, #4]
 8011dca:	e7ca      	b.n	8011d62 <_free_r+0x22>
 8011dcc:	bd38      	pop	{r3, r4, r5, pc}
 8011dce:	bf00      	nop
 8011dd0:	200055fc 	.word	0x200055fc

08011dd4 <__ascii_mbtowc>:
 8011dd4:	b082      	sub	sp, #8
 8011dd6:	b901      	cbnz	r1, 8011dda <__ascii_mbtowc+0x6>
 8011dd8:	a901      	add	r1, sp, #4
 8011dda:	b142      	cbz	r2, 8011dee <__ascii_mbtowc+0x1a>
 8011ddc:	b14b      	cbz	r3, 8011df2 <__ascii_mbtowc+0x1e>
 8011dde:	7813      	ldrb	r3, [r2, #0]
 8011de0:	600b      	str	r3, [r1, #0]
 8011de2:	7812      	ldrb	r2, [r2, #0]
 8011de4:	1e10      	subs	r0, r2, #0
 8011de6:	bf18      	it	ne
 8011de8:	2001      	movne	r0, #1
 8011dea:	b002      	add	sp, #8
 8011dec:	4770      	bx	lr
 8011dee:	4610      	mov	r0, r2
 8011df0:	e7fb      	b.n	8011dea <__ascii_mbtowc+0x16>
 8011df2:	f06f 0001 	mvn.w	r0, #1
 8011df6:	e7f8      	b.n	8011dea <__ascii_mbtowc+0x16>

08011df8 <_malloc_usable_size_r>:
 8011df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dfc:	1f18      	subs	r0, r3, #4
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	bfbc      	itt	lt
 8011e02:	580b      	ldrlt	r3, [r1, r0]
 8011e04:	18c0      	addlt	r0, r0, r3
 8011e06:	4770      	bx	lr

08011e08 <fiprintf>:
 8011e08:	b40e      	push	{r1, r2, r3}
 8011e0a:	b503      	push	{r0, r1, lr}
 8011e0c:	4601      	mov	r1, r0
 8011e0e:	ab03      	add	r3, sp, #12
 8011e10:	4805      	ldr	r0, [pc, #20]	@ (8011e28 <fiprintf+0x20>)
 8011e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e16:	6800      	ldr	r0, [r0, #0]
 8011e18:	9301      	str	r3, [sp, #4]
 8011e1a:	f000 f845 	bl	8011ea8 <_vfiprintf_r>
 8011e1e:	b002      	add	sp, #8
 8011e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e24:	b003      	add	sp, #12
 8011e26:	4770      	bx	lr
 8011e28:	20000164 	.word	0x20000164

08011e2c <__ascii_wctomb>:
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	4608      	mov	r0, r1
 8011e30:	b141      	cbz	r1, 8011e44 <__ascii_wctomb+0x18>
 8011e32:	2aff      	cmp	r2, #255	@ 0xff
 8011e34:	d904      	bls.n	8011e40 <__ascii_wctomb+0x14>
 8011e36:	228a      	movs	r2, #138	@ 0x8a
 8011e38:	601a      	str	r2, [r3, #0]
 8011e3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e3e:	4770      	bx	lr
 8011e40:	700a      	strb	r2, [r1, #0]
 8011e42:	2001      	movs	r0, #1
 8011e44:	4770      	bx	lr

08011e46 <abort>:
 8011e46:	b508      	push	{r3, lr}
 8011e48:	2006      	movs	r0, #6
 8011e4a:	f000 fa85 	bl	8012358 <raise>
 8011e4e:	2001      	movs	r0, #1
 8011e50:	f7f5 f924 	bl	800709c <_exit>

08011e54 <__sfputc_r>:
 8011e54:	6893      	ldr	r3, [r2, #8]
 8011e56:	3b01      	subs	r3, #1
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	b410      	push	{r4}
 8011e5c:	6093      	str	r3, [r2, #8]
 8011e5e:	da08      	bge.n	8011e72 <__sfputc_r+0x1e>
 8011e60:	6994      	ldr	r4, [r2, #24]
 8011e62:	42a3      	cmp	r3, r4
 8011e64:	db01      	blt.n	8011e6a <__sfputc_r+0x16>
 8011e66:	290a      	cmp	r1, #10
 8011e68:	d103      	bne.n	8011e72 <__sfputc_r+0x1e>
 8011e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e6e:	f000 b933 	b.w	80120d8 <__swbuf_r>
 8011e72:	6813      	ldr	r3, [r2, #0]
 8011e74:	1c58      	adds	r0, r3, #1
 8011e76:	6010      	str	r0, [r2, #0]
 8011e78:	7019      	strb	r1, [r3, #0]
 8011e7a:	4608      	mov	r0, r1
 8011e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e80:	4770      	bx	lr

08011e82 <__sfputs_r>:
 8011e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e84:	4606      	mov	r6, r0
 8011e86:	460f      	mov	r7, r1
 8011e88:	4614      	mov	r4, r2
 8011e8a:	18d5      	adds	r5, r2, r3
 8011e8c:	42ac      	cmp	r4, r5
 8011e8e:	d101      	bne.n	8011e94 <__sfputs_r+0x12>
 8011e90:	2000      	movs	r0, #0
 8011e92:	e007      	b.n	8011ea4 <__sfputs_r+0x22>
 8011e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e98:	463a      	mov	r2, r7
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	f7ff ffda 	bl	8011e54 <__sfputc_r>
 8011ea0:	1c43      	adds	r3, r0, #1
 8011ea2:	d1f3      	bne.n	8011e8c <__sfputs_r+0xa>
 8011ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ea8 <_vfiprintf_r>:
 8011ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eac:	460d      	mov	r5, r1
 8011eae:	b09d      	sub	sp, #116	@ 0x74
 8011eb0:	4614      	mov	r4, r2
 8011eb2:	4698      	mov	r8, r3
 8011eb4:	4606      	mov	r6, r0
 8011eb6:	b118      	cbz	r0, 8011ec0 <_vfiprintf_r+0x18>
 8011eb8:	6a03      	ldr	r3, [r0, #32]
 8011eba:	b90b      	cbnz	r3, 8011ec0 <_vfiprintf_r+0x18>
 8011ebc:	f7fe f8a0 	bl	8010000 <__sinit>
 8011ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ec2:	07d9      	lsls	r1, r3, #31
 8011ec4:	d405      	bmi.n	8011ed2 <_vfiprintf_r+0x2a>
 8011ec6:	89ab      	ldrh	r3, [r5, #12]
 8011ec8:	059a      	lsls	r2, r3, #22
 8011eca:	d402      	bmi.n	8011ed2 <_vfiprintf_r+0x2a>
 8011ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ece:	f7fe f988 	bl	80101e2 <__retarget_lock_acquire_recursive>
 8011ed2:	89ab      	ldrh	r3, [r5, #12]
 8011ed4:	071b      	lsls	r3, r3, #28
 8011ed6:	d501      	bpl.n	8011edc <_vfiprintf_r+0x34>
 8011ed8:	692b      	ldr	r3, [r5, #16]
 8011eda:	b99b      	cbnz	r3, 8011f04 <_vfiprintf_r+0x5c>
 8011edc:	4629      	mov	r1, r5
 8011ede:	4630      	mov	r0, r6
 8011ee0:	f000 f938 	bl	8012154 <__swsetup_r>
 8011ee4:	b170      	cbz	r0, 8011f04 <_vfiprintf_r+0x5c>
 8011ee6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ee8:	07dc      	lsls	r4, r3, #31
 8011eea:	d504      	bpl.n	8011ef6 <_vfiprintf_r+0x4e>
 8011eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ef0:	b01d      	add	sp, #116	@ 0x74
 8011ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef6:	89ab      	ldrh	r3, [r5, #12]
 8011ef8:	0598      	lsls	r0, r3, #22
 8011efa:	d4f7      	bmi.n	8011eec <_vfiprintf_r+0x44>
 8011efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011efe:	f7fe f971 	bl	80101e4 <__retarget_lock_release_recursive>
 8011f02:	e7f3      	b.n	8011eec <_vfiprintf_r+0x44>
 8011f04:	2300      	movs	r3, #0
 8011f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f08:	2320      	movs	r3, #32
 8011f0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f12:	2330      	movs	r3, #48	@ 0x30
 8011f14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80120c4 <_vfiprintf_r+0x21c>
 8011f18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011f1c:	f04f 0901 	mov.w	r9, #1
 8011f20:	4623      	mov	r3, r4
 8011f22:	469a      	mov	sl, r3
 8011f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f28:	b10a      	cbz	r2, 8011f2e <_vfiprintf_r+0x86>
 8011f2a:	2a25      	cmp	r2, #37	@ 0x25
 8011f2c:	d1f9      	bne.n	8011f22 <_vfiprintf_r+0x7a>
 8011f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8011f32:	d00b      	beq.n	8011f4c <_vfiprintf_r+0xa4>
 8011f34:	465b      	mov	r3, fp
 8011f36:	4622      	mov	r2, r4
 8011f38:	4629      	mov	r1, r5
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	f7ff ffa1 	bl	8011e82 <__sfputs_r>
 8011f40:	3001      	adds	r0, #1
 8011f42:	f000 80a7 	beq.w	8012094 <_vfiprintf_r+0x1ec>
 8011f46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f48:	445a      	add	r2, fp
 8011f4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	f000 809f 	beq.w	8012094 <_vfiprintf_r+0x1ec>
 8011f56:	2300      	movs	r3, #0
 8011f58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f60:	f10a 0a01 	add.w	sl, sl, #1
 8011f64:	9304      	str	r3, [sp, #16]
 8011f66:	9307      	str	r3, [sp, #28]
 8011f68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f6e:	4654      	mov	r4, sl
 8011f70:	2205      	movs	r2, #5
 8011f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f76:	4853      	ldr	r0, [pc, #332]	@ (80120c4 <_vfiprintf_r+0x21c>)
 8011f78:	f7ee f92a 	bl	80001d0 <memchr>
 8011f7c:	9a04      	ldr	r2, [sp, #16]
 8011f7e:	b9d8      	cbnz	r0, 8011fb8 <_vfiprintf_r+0x110>
 8011f80:	06d1      	lsls	r1, r2, #27
 8011f82:	bf44      	itt	mi
 8011f84:	2320      	movmi	r3, #32
 8011f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f8a:	0713      	lsls	r3, r2, #28
 8011f8c:	bf44      	itt	mi
 8011f8e:	232b      	movmi	r3, #43	@ 0x2b
 8011f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f94:	f89a 3000 	ldrb.w	r3, [sl]
 8011f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f9a:	d015      	beq.n	8011fc8 <_vfiprintf_r+0x120>
 8011f9c:	9a07      	ldr	r2, [sp, #28]
 8011f9e:	4654      	mov	r4, sl
 8011fa0:	2000      	movs	r0, #0
 8011fa2:	f04f 0c0a 	mov.w	ip, #10
 8011fa6:	4621      	mov	r1, r4
 8011fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fac:	3b30      	subs	r3, #48	@ 0x30
 8011fae:	2b09      	cmp	r3, #9
 8011fb0:	d94b      	bls.n	801204a <_vfiprintf_r+0x1a2>
 8011fb2:	b1b0      	cbz	r0, 8011fe2 <_vfiprintf_r+0x13a>
 8011fb4:	9207      	str	r2, [sp, #28]
 8011fb6:	e014      	b.n	8011fe2 <_vfiprintf_r+0x13a>
 8011fb8:	eba0 0308 	sub.w	r3, r0, r8
 8011fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8011fc0:	4313      	orrs	r3, r2
 8011fc2:	9304      	str	r3, [sp, #16]
 8011fc4:	46a2      	mov	sl, r4
 8011fc6:	e7d2      	b.n	8011f6e <_vfiprintf_r+0xc6>
 8011fc8:	9b03      	ldr	r3, [sp, #12]
 8011fca:	1d19      	adds	r1, r3, #4
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	9103      	str	r1, [sp, #12]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	bfbb      	ittet	lt
 8011fd4:	425b      	neglt	r3, r3
 8011fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8011fda:	9307      	strge	r3, [sp, #28]
 8011fdc:	9307      	strlt	r3, [sp, #28]
 8011fde:	bfb8      	it	lt
 8011fe0:	9204      	strlt	r2, [sp, #16]
 8011fe2:	7823      	ldrb	r3, [r4, #0]
 8011fe4:	2b2e      	cmp	r3, #46	@ 0x2e
 8011fe6:	d10a      	bne.n	8011ffe <_vfiprintf_r+0x156>
 8011fe8:	7863      	ldrb	r3, [r4, #1]
 8011fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fec:	d132      	bne.n	8012054 <_vfiprintf_r+0x1ac>
 8011fee:	9b03      	ldr	r3, [sp, #12]
 8011ff0:	1d1a      	adds	r2, r3, #4
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	9203      	str	r2, [sp, #12]
 8011ff6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ffa:	3402      	adds	r4, #2
 8011ffc:	9305      	str	r3, [sp, #20]
 8011ffe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80120d4 <_vfiprintf_r+0x22c>
 8012002:	7821      	ldrb	r1, [r4, #0]
 8012004:	2203      	movs	r2, #3
 8012006:	4650      	mov	r0, sl
 8012008:	f7ee f8e2 	bl	80001d0 <memchr>
 801200c:	b138      	cbz	r0, 801201e <_vfiprintf_r+0x176>
 801200e:	9b04      	ldr	r3, [sp, #16]
 8012010:	eba0 000a 	sub.w	r0, r0, sl
 8012014:	2240      	movs	r2, #64	@ 0x40
 8012016:	4082      	lsls	r2, r0
 8012018:	4313      	orrs	r3, r2
 801201a:	3401      	adds	r4, #1
 801201c:	9304      	str	r3, [sp, #16]
 801201e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012022:	4829      	ldr	r0, [pc, #164]	@ (80120c8 <_vfiprintf_r+0x220>)
 8012024:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012028:	2206      	movs	r2, #6
 801202a:	f7ee f8d1 	bl	80001d0 <memchr>
 801202e:	2800      	cmp	r0, #0
 8012030:	d03f      	beq.n	80120b2 <_vfiprintf_r+0x20a>
 8012032:	4b26      	ldr	r3, [pc, #152]	@ (80120cc <_vfiprintf_r+0x224>)
 8012034:	bb1b      	cbnz	r3, 801207e <_vfiprintf_r+0x1d6>
 8012036:	9b03      	ldr	r3, [sp, #12]
 8012038:	3307      	adds	r3, #7
 801203a:	f023 0307 	bic.w	r3, r3, #7
 801203e:	3308      	adds	r3, #8
 8012040:	9303      	str	r3, [sp, #12]
 8012042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012044:	443b      	add	r3, r7
 8012046:	9309      	str	r3, [sp, #36]	@ 0x24
 8012048:	e76a      	b.n	8011f20 <_vfiprintf_r+0x78>
 801204a:	fb0c 3202 	mla	r2, ip, r2, r3
 801204e:	460c      	mov	r4, r1
 8012050:	2001      	movs	r0, #1
 8012052:	e7a8      	b.n	8011fa6 <_vfiprintf_r+0xfe>
 8012054:	2300      	movs	r3, #0
 8012056:	3401      	adds	r4, #1
 8012058:	9305      	str	r3, [sp, #20]
 801205a:	4619      	mov	r1, r3
 801205c:	f04f 0c0a 	mov.w	ip, #10
 8012060:	4620      	mov	r0, r4
 8012062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012066:	3a30      	subs	r2, #48	@ 0x30
 8012068:	2a09      	cmp	r2, #9
 801206a:	d903      	bls.n	8012074 <_vfiprintf_r+0x1cc>
 801206c:	2b00      	cmp	r3, #0
 801206e:	d0c6      	beq.n	8011ffe <_vfiprintf_r+0x156>
 8012070:	9105      	str	r1, [sp, #20]
 8012072:	e7c4      	b.n	8011ffe <_vfiprintf_r+0x156>
 8012074:	fb0c 2101 	mla	r1, ip, r1, r2
 8012078:	4604      	mov	r4, r0
 801207a:	2301      	movs	r3, #1
 801207c:	e7f0      	b.n	8012060 <_vfiprintf_r+0x1b8>
 801207e:	ab03      	add	r3, sp, #12
 8012080:	9300      	str	r3, [sp, #0]
 8012082:	462a      	mov	r2, r5
 8012084:	4b12      	ldr	r3, [pc, #72]	@ (80120d0 <_vfiprintf_r+0x228>)
 8012086:	a904      	add	r1, sp, #16
 8012088:	4630      	mov	r0, r6
 801208a:	f7fd fb21 	bl	800f6d0 <_printf_float>
 801208e:	4607      	mov	r7, r0
 8012090:	1c78      	adds	r0, r7, #1
 8012092:	d1d6      	bne.n	8012042 <_vfiprintf_r+0x19a>
 8012094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012096:	07d9      	lsls	r1, r3, #31
 8012098:	d405      	bmi.n	80120a6 <_vfiprintf_r+0x1fe>
 801209a:	89ab      	ldrh	r3, [r5, #12]
 801209c:	059a      	lsls	r2, r3, #22
 801209e:	d402      	bmi.n	80120a6 <_vfiprintf_r+0x1fe>
 80120a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120a2:	f7fe f89f 	bl	80101e4 <__retarget_lock_release_recursive>
 80120a6:	89ab      	ldrh	r3, [r5, #12]
 80120a8:	065b      	lsls	r3, r3, #25
 80120aa:	f53f af1f 	bmi.w	8011eec <_vfiprintf_r+0x44>
 80120ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80120b0:	e71e      	b.n	8011ef0 <_vfiprintf_r+0x48>
 80120b2:	ab03      	add	r3, sp, #12
 80120b4:	9300      	str	r3, [sp, #0]
 80120b6:	462a      	mov	r2, r5
 80120b8:	4b05      	ldr	r3, [pc, #20]	@ (80120d0 <_vfiprintf_r+0x228>)
 80120ba:	a904      	add	r1, sp, #16
 80120bc:	4630      	mov	r0, r6
 80120be:	f7fd fd9f 	bl	800fc00 <_printf_i>
 80120c2:	e7e4      	b.n	801208e <_vfiprintf_r+0x1e6>
 80120c4:	08013fd2 	.word	0x08013fd2
 80120c8:	08013fdc 	.word	0x08013fdc
 80120cc:	0800f6d1 	.word	0x0800f6d1
 80120d0:	08011e83 	.word	0x08011e83
 80120d4:	08013fd8 	.word	0x08013fd8

080120d8 <__swbuf_r>:
 80120d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120da:	460e      	mov	r6, r1
 80120dc:	4614      	mov	r4, r2
 80120de:	4605      	mov	r5, r0
 80120e0:	b118      	cbz	r0, 80120ea <__swbuf_r+0x12>
 80120e2:	6a03      	ldr	r3, [r0, #32]
 80120e4:	b90b      	cbnz	r3, 80120ea <__swbuf_r+0x12>
 80120e6:	f7fd ff8b 	bl	8010000 <__sinit>
 80120ea:	69a3      	ldr	r3, [r4, #24]
 80120ec:	60a3      	str	r3, [r4, #8]
 80120ee:	89a3      	ldrh	r3, [r4, #12]
 80120f0:	071a      	lsls	r2, r3, #28
 80120f2:	d501      	bpl.n	80120f8 <__swbuf_r+0x20>
 80120f4:	6923      	ldr	r3, [r4, #16]
 80120f6:	b943      	cbnz	r3, 801210a <__swbuf_r+0x32>
 80120f8:	4621      	mov	r1, r4
 80120fa:	4628      	mov	r0, r5
 80120fc:	f000 f82a 	bl	8012154 <__swsetup_r>
 8012100:	b118      	cbz	r0, 801210a <__swbuf_r+0x32>
 8012102:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012106:	4638      	mov	r0, r7
 8012108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801210a:	6823      	ldr	r3, [r4, #0]
 801210c:	6922      	ldr	r2, [r4, #16]
 801210e:	1a98      	subs	r0, r3, r2
 8012110:	6963      	ldr	r3, [r4, #20]
 8012112:	b2f6      	uxtb	r6, r6
 8012114:	4283      	cmp	r3, r0
 8012116:	4637      	mov	r7, r6
 8012118:	dc05      	bgt.n	8012126 <__swbuf_r+0x4e>
 801211a:	4621      	mov	r1, r4
 801211c:	4628      	mov	r0, r5
 801211e:	f7ff f945 	bl	80113ac <_fflush_r>
 8012122:	2800      	cmp	r0, #0
 8012124:	d1ed      	bne.n	8012102 <__swbuf_r+0x2a>
 8012126:	68a3      	ldr	r3, [r4, #8]
 8012128:	3b01      	subs	r3, #1
 801212a:	60a3      	str	r3, [r4, #8]
 801212c:	6823      	ldr	r3, [r4, #0]
 801212e:	1c5a      	adds	r2, r3, #1
 8012130:	6022      	str	r2, [r4, #0]
 8012132:	701e      	strb	r6, [r3, #0]
 8012134:	6962      	ldr	r2, [r4, #20]
 8012136:	1c43      	adds	r3, r0, #1
 8012138:	429a      	cmp	r2, r3
 801213a:	d004      	beq.n	8012146 <__swbuf_r+0x6e>
 801213c:	89a3      	ldrh	r3, [r4, #12]
 801213e:	07db      	lsls	r3, r3, #31
 8012140:	d5e1      	bpl.n	8012106 <__swbuf_r+0x2e>
 8012142:	2e0a      	cmp	r6, #10
 8012144:	d1df      	bne.n	8012106 <__swbuf_r+0x2e>
 8012146:	4621      	mov	r1, r4
 8012148:	4628      	mov	r0, r5
 801214a:	f7ff f92f 	bl	80113ac <_fflush_r>
 801214e:	2800      	cmp	r0, #0
 8012150:	d0d9      	beq.n	8012106 <__swbuf_r+0x2e>
 8012152:	e7d6      	b.n	8012102 <__swbuf_r+0x2a>

08012154 <__swsetup_r>:
 8012154:	b538      	push	{r3, r4, r5, lr}
 8012156:	4b29      	ldr	r3, [pc, #164]	@ (80121fc <__swsetup_r+0xa8>)
 8012158:	4605      	mov	r5, r0
 801215a:	6818      	ldr	r0, [r3, #0]
 801215c:	460c      	mov	r4, r1
 801215e:	b118      	cbz	r0, 8012168 <__swsetup_r+0x14>
 8012160:	6a03      	ldr	r3, [r0, #32]
 8012162:	b90b      	cbnz	r3, 8012168 <__swsetup_r+0x14>
 8012164:	f7fd ff4c 	bl	8010000 <__sinit>
 8012168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801216c:	0719      	lsls	r1, r3, #28
 801216e:	d422      	bmi.n	80121b6 <__swsetup_r+0x62>
 8012170:	06da      	lsls	r2, r3, #27
 8012172:	d407      	bmi.n	8012184 <__swsetup_r+0x30>
 8012174:	2209      	movs	r2, #9
 8012176:	602a      	str	r2, [r5, #0]
 8012178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801217c:	81a3      	strh	r3, [r4, #12]
 801217e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012182:	e033      	b.n	80121ec <__swsetup_r+0x98>
 8012184:	0758      	lsls	r0, r3, #29
 8012186:	d512      	bpl.n	80121ae <__swsetup_r+0x5a>
 8012188:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801218a:	b141      	cbz	r1, 801219e <__swsetup_r+0x4a>
 801218c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012190:	4299      	cmp	r1, r3
 8012192:	d002      	beq.n	801219a <__swsetup_r+0x46>
 8012194:	4628      	mov	r0, r5
 8012196:	f7ff fdd3 	bl	8011d40 <_free_r>
 801219a:	2300      	movs	r3, #0
 801219c:	6363      	str	r3, [r4, #52]	@ 0x34
 801219e:	89a3      	ldrh	r3, [r4, #12]
 80121a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80121a4:	81a3      	strh	r3, [r4, #12]
 80121a6:	2300      	movs	r3, #0
 80121a8:	6063      	str	r3, [r4, #4]
 80121aa:	6923      	ldr	r3, [r4, #16]
 80121ac:	6023      	str	r3, [r4, #0]
 80121ae:	89a3      	ldrh	r3, [r4, #12]
 80121b0:	f043 0308 	orr.w	r3, r3, #8
 80121b4:	81a3      	strh	r3, [r4, #12]
 80121b6:	6923      	ldr	r3, [r4, #16]
 80121b8:	b94b      	cbnz	r3, 80121ce <__swsetup_r+0x7a>
 80121ba:	89a3      	ldrh	r3, [r4, #12]
 80121bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80121c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121c4:	d003      	beq.n	80121ce <__swsetup_r+0x7a>
 80121c6:	4621      	mov	r1, r4
 80121c8:	4628      	mov	r0, r5
 80121ca:	f000 f83f 	bl	801224c <__smakebuf_r>
 80121ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121d2:	f013 0201 	ands.w	r2, r3, #1
 80121d6:	d00a      	beq.n	80121ee <__swsetup_r+0x9a>
 80121d8:	2200      	movs	r2, #0
 80121da:	60a2      	str	r2, [r4, #8]
 80121dc:	6962      	ldr	r2, [r4, #20]
 80121de:	4252      	negs	r2, r2
 80121e0:	61a2      	str	r2, [r4, #24]
 80121e2:	6922      	ldr	r2, [r4, #16]
 80121e4:	b942      	cbnz	r2, 80121f8 <__swsetup_r+0xa4>
 80121e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80121ea:	d1c5      	bne.n	8012178 <__swsetup_r+0x24>
 80121ec:	bd38      	pop	{r3, r4, r5, pc}
 80121ee:	0799      	lsls	r1, r3, #30
 80121f0:	bf58      	it	pl
 80121f2:	6962      	ldrpl	r2, [r4, #20]
 80121f4:	60a2      	str	r2, [r4, #8]
 80121f6:	e7f4      	b.n	80121e2 <__swsetup_r+0x8e>
 80121f8:	2000      	movs	r0, #0
 80121fa:	e7f7      	b.n	80121ec <__swsetup_r+0x98>
 80121fc:	20000164 	.word	0x20000164

08012200 <__swhatbuf_r>:
 8012200:	b570      	push	{r4, r5, r6, lr}
 8012202:	460c      	mov	r4, r1
 8012204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012208:	2900      	cmp	r1, #0
 801220a:	b096      	sub	sp, #88	@ 0x58
 801220c:	4615      	mov	r5, r2
 801220e:	461e      	mov	r6, r3
 8012210:	da0d      	bge.n	801222e <__swhatbuf_r+0x2e>
 8012212:	89a3      	ldrh	r3, [r4, #12]
 8012214:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012218:	f04f 0100 	mov.w	r1, #0
 801221c:	bf14      	ite	ne
 801221e:	2340      	movne	r3, #64	@ 0x40
 8012220:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012224:	2000      	movs	r0, #0
 8012226:	6031      	str	r1, [r6, #0]
 8012228:	602b      	str	r3, [r5, #0]
 801222a:	b016      	add	sp, #88	@ 0x58
 801222c:	bd70      	pop	{r4, r5, r6, pc}
 801222e:	466a      	mov	r2, sp
 8012230:	f000 f848 	bl	80122c4 <_fstat_r>
 8012234:	2800      	cmp	r0, #0
 8012236:	dbec      	blt.n	8012212 <__swhatbuf_r+0x12>
 8012238:	9901      	ldr	r1, [sp, #4]
 801223a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801223e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012242:	4259      	negs	r1, r3
 8012244:	4159      	adcs	r1, r3
 8012246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801224a:	e7eb      	b.n	8012224 <__swhatbuf_r+0x24>

0801224c <__smakebuf_r>:
 801224c:	898b      	ldrh	r3, [r1, #12]
 801224e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012250:	079d      	lsls	r5, r3, #30
 8012252:	4606      	mov	r6, r0
 8012254:	460c      	mov	r4, r1
 8012256:	d507      	bpl.n	8012268 <__smakebuf_r+0x1c>
 8012258:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801225c:	6023      	str	r3, [r4, #0]
 801225e:	6123      	str	r3, [r4, #16]
 8012260:	2301      	movs	r3, #1
 8012262:	6163      	str	r3, [r4, #20]
 8012264:	b003      	add	sp, #12
 8012266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012268:	ab01      	add	r3, sp, #4
 801226a:	466a      	mov	r2, sp
 801226c:	f7ff ffc8 	bl	8012200 <__swhatbuf_r>
 8012270:	9f00      	ldr	r7, [sp, #0]
 8012272:	4605      	mov	r5, r0
 8012274:	4639      	mov	r1, r7
 8012276:	4630      	mov	r0, r6
 8012278:	f7fe ff94 	bl	80111a4 <_malloc_r>
 801227c:	b948      	cbnz	r0, 8012292 <__smakebuf_r+0x46>
 801227e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012282:	059a      	lsls	r2, r3, #22
 8012284:	d4ee      	bmi.n	8012264 <__smakebuf_r+0x18>
 8012286:	f023 0303 	bic.w	r3, r3, #3
 801228a:	f043 0302 	orr.w	r3, r3, #2
 801228e:	81a3      	strh	r3, [r4, #12]
 8012290:	e7e2      	b.n	8012258 <__smakebuf_r+0xc>
 8012292:	89a3      	ldrh	r3, [r4, #12]
 8012294:	6020      	str	r0, [r4, #0]
 8012296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801229a:	81a3      	strh	r3, [r4, #12]
 801229c:	9b01      	ldr	r3, [sp, #4]
 801229e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80122a2:	b15b      	cbz	r3, 80122bc <__smakebuf_r+0x70>
 80122a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122a8:	4630      	mov	r0, r6
 80122aa:	f000 f81d 	bl	80122e8 <_isatty_r>
 80122ae:	b128      	cbz	r0, 80122bc <__smakebuf_r+0x70>
 80122b0:	89a3      	ldrh	r3, [r4, #12]
 80122b2:	f023 0303 	bic.w	r3, r3, #3
 80122b6:	f043 0301 	orr.w	r3, r3, #1
 80122ba:	81a3      	strh	r3, [r4, #12]
 80122bc:	89a3      	ldrh	r3, [r4, #12]
 80122be:	431d      	orrs	r5, r3
 80122c0:	81a5      	strh	r5, [r4, #12]
 80122c2:	e7cf      	b.n	8012264 <__smakebuf_r+0x18>

080122c4 <_fstat_r>:
 80122c4:	b538      	push	{r3, r4, r5, lr}
 80122c6:	4d07      	ldr	r5, [pc, #28]	@ (80122e4 <_fstat_r+0x20>)
 80122c8:	2300      	movs	r3, #0
 80122ca:	4604      	mov	r4, r0
 80122cc:	4608      	mov	r0, r1
 80122ce:	4611      	mov	r1, r2
 80122d0:	602b      	str	r3, [r5, #0]
 80122d2:	f7f4 ff33 	bl	800713c <_fstat>
 80122d6:	1c43      	adds	r3, r0, #1
 80122d8:	d102      	bne.n	80122e0 <_fstat_r+0x1c>
 80122da:	682b      	ldr	r3, [r5, #0]
 80122dc:	b103      	cbz	r3, 80122e0 <_fstat_r+0x1c>
 80122de:	6023      	str	r3, [r4, #0]
 80122e0:	bd38      	pop	{r3, r4, r5, pc}
 80122e2:	bf00      	nop
 80122e4:	20005600 	.word	0x20005600

080122e8 <_isatty_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4d06      	ldr	r5, [pc, #24]	@ (8012304 <_isatty_r+0x1c>)
 80122ec:	2300      	movs	r3, #0
 80122ee:	4604      	mov	r4, r0
 80122f0:	4608      	mov	r0, r1
 80122f2:	602b      	str	r3, [r5, #0]
 80122f4:	f7f4 ff32 	bl	800715c <_isatty>
 80122f8:	1c43      	adds	r3, r0, #1
 80122fa:	d102      	bne.n	8012302 <_isatty_r+0x1a>
 80122fc:	682b      	ldr	r3, [r5, #0]
 80122fe:	b103      	cbz	r3, 8012302 <_isatty_r+0x1a>
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	bd38      	pop	{r3, r4, r5, pc}
 8012304:	20005600 	.word	0x20005600

08012308 <_raise_r>:
 8012308:	291f      	cmp	r1, #31
 801230a:	b538      	push	{r3, r4, r5, lr}
 801230c:	4605      	mov	r5, r0
 801230e:	460c      	mov	r4, r1
 8012310:	d904      	bls.n	801231c <_raise_r+0x14>
 8012312:	2316      	movs	r3, #22
 8012314:	6003      	str	r3, [r0, #0]
 8012316:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801231a:	bd38      	pop	{r3, r4, r5, pc}
 801231c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801231e:	b112      	cbz	r2, 8012326 <_raise_r+0x1e>
 8012320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012324:	b94b      	cbnz	r3, 801233a <_raise_r+0x32>
 8012326:	4628      	mov	r0, r5
 8012328:	f000 f830 	bl	801238c <_getpid_r>
 801232c:	4622      	mov	r2, r4
 801232e:	4601      	mov	r1, r0
 8012330:	4628      	mov	r0, r5
 8012332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012336:	f000 b817 	b.w	8012368 <_kill_r>
 801233a:	2b01      	cmp	r3, #1
 801233c:	d00a      	beq.n	8012354 <_raise_r+0x4c>
 801233e:	1c59      	adds	r1, r3, #1
 8012340:	d103      	bne.n	801234a <_raise_r+0x42>
 8012342:	2316      	movs	r3, #22
 8012344:	6003      	str	r3, [r0, #0]
 8012346:	2001      	movs	r0, #1
 8012348:	e7e7      	b.n	801231a <_raise_r+0x12>
 801234a:	2100      	movs	r1, #0
 801234c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012350:	4620      	mov	r0, r4
 8012352:	4798      	blx	r3
 8012354:	2000      	movs	r0, #0
 8012356:	e7e0      	b.n	801231a <_raise_r+0x12>

08012358 <raise>:
 8012358:	4b02      	ldr	r3, [pc, #8]	@ (8012364 <raise+0xc>)
 801235a:	4601      	mov	r1, r0
 801235c:	6818      	ldr	r0, [r3, #0]
 801235e:	f7ff bfd3 	b.w	8012308 <_raise_r>
 8012362:	bf00      	nop
 8012364:	20000164 	.word	0x20000164

08012368 <_kill_r>:
 8012368:	b538      	push	{r3, r4, r5, lr}
 801236a:	4d07      	ldr	r5, [pc, #28]	@ (8012388 <_kill_r+0x20>)
 801236c:	2300      	movs	r3, #0
 801236e:	4604      	mov	r4, r0
 8012370:	4608      	mov	r0, r1
 8012372:	4611      	mov	r1, r2
 8012374:	602b      	str	r3, [r5, #0]
 8012376:	f7f4 fe81 	bl	800707c <_kill>
 801237a:	1c43      	adds	r3, r0, #1
 801237c:	d102      	bne.n	8012384 <_kill_r+0x1c>
 801237e:	682b      	ldr	r3, [r5, #0]
 8012380:	b103      	cbz	r3, 8012384 <_kill_r+0x1c>
 8012382:	6023      	str	r3, [r4, #0]
 8012384:	bd38      	pop	{r3, r4, r5, pc}
 8012386:	bf00      	nop
 8012388:	20005600 	.word	0x20005600

0801238c <_getpid_r>:
 801238c:	f7f4 be6e 	b.w	800706c <_getpid>

08012390 <sqrtf>:
 8012390:	b508      	push	{r3, lr}
 8012392:	ed2d 8b02 	vpush	{d8}
 8012396:	eeb0 8a40 	vmov.f32	s16, s0
 801239a:	f000 f9ff 	bl	801279c <__ieee754_sqrtf>
 801239e:	eeb4 8a48 	vcmp.f32	s16, s16
 80123a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a6:	d60c      	bvs.n	80123c2 <sqrtf+0x32>
 80123a8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80123c8 <sqrtf+0x38>
 80123ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80123b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b4:	d505      	bpl.n	80123c2 <sqrtf+0x32>
 80123b6:	f7fd fee9 	bl	801018c <__errno>
 80123ba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80123be:	2321      	movs	r3, #33	@ 0x21
 80123c0:	6003      	str	r3, [r0, #0]
 80123c2:	ecbd 8b02 	vpop	{d8}
 80123c6:	bd08      	pop	{r3, pc}
 80123c8:	00000000 	.word	0x00000000

080123cc <atanf>:
 80123cc:	b538      	push	{r3, r4, r5, lr}
 80123ce:	ee10 5a10 	vmov	r5, s0
 80123d2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80123d6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80123da:	eef0 7a40 	vmov.f32	s15, s0
 80123de:	d310      	bcc.n	8012402 <atanf+0x36>
 80123e0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80123e4:	d904      	bls.n	80123f0 <atanf+0x24>
 80123e6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80123ea:	eeb0 0a67 	vmov.f32	s0, s15
 80123ee:	bd38      	pop	{r3, r4, r5, pc}
 80123f0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012528 <atanf+0x15c>
 80123f4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801252c <atanf+0x160>
 80123f8:	2d00      	cmp	r5, #0
 80123fa:	bfc8      	it	gt
 80123fc:	eef0 7a47 	vmovgt.f32	s15, s14
 8012400:	e7f3      	b.n	80123ea <atanf+0x1e>
 8012402:	4b4b      	ldr	r3, [pc, #300]	@ (8012530 <atanf+0x164>)
 8012404:	429c      	cmp	r4, r3
 8012406:	d810      	bhi.n	801242a <atanf+0x5e>
 8012408:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801240c:	d20a      	bcs.n	8012424 <atanf+0x58>
 801240e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8012534 <atanf+0x168>
 8012412:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801241a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012422:	dce2      	bgt.n	80123ea <atanf+0x1e>
 8012424:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012428:	e013      	b.n	8012452 <atanf+0x86>
 801242a:	f000 f8a3 	bl	8012574 <fabsf>
 801242e:	4b42      	ldr	r3, [pc, #264]	@ (8012538 <atanf+0x16c>)
 8012430:	429c      	cmp	r4, r3
 8012432:	d84f      	bhi.n	80124d4 <atanf+0x108>
 8012434:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012438:	429c      	cmp	r4, r3
 801243a:	d841      	bhi.n	80124c0 <atanf+0xf4>
 801243c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8012440:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012444:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012448:	2300      	movs	r3, #0
 801244a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801244e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012452:	1c5a      	adds	r2, r3, #1
 8012454:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012458:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801253c <atanf+0x170>
 801245c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8012540 <atanf+0x174>
 8012460:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8012544 <atanf+0x178>
 8012464:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012468:	eee6 5a87 	vfma.f32	s11, s13, s14
 801246c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012548 <atanf+0x17c>
 8012470:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012474:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801254c <atanf+0x180>
 8012478:	eee7 5a26 	vfma.f32	s11, s14, s13
 801247c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012550 <atanf+0x184>
 8012480:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012484:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012554 <atanf+0x188>
 8012488:	eee7 5a26 	vfma.f32	s11, s14, s13
 801248c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012558 <atanf+0x18c>
 8012490:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012494:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801255c <atanf+0x190>
 8012498:	eea5 7a26 	vfma.f32	s14, s10, s13
 801249c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8012560 <atanf+0x194>
 80124a0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80124a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8012564 <atanf+0x198>
 80124a8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80124ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 80124b0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80124b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80124b8:	d121      	bne.n	80124fe <atanf+0x132>
 80124ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80124be:	e794      	b.n	80123ea <atanf+0x1e>
 80124c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80124c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80124c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80124cc:	2301      	movs	r3, #1
 80124ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80124d2:	e7be      	b.n	8012452 <atanf+0x86>
 80124d4:	4b24      	ldr	r3, [pc, #144]	@ (8012568 <atanf+0x19c>)
 80124d6:	429c      	cmp	r4, r3
 80124d8:	d80b      	bhi.n	80124f2 <atanf+0x126>
 80124da:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80124de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80124e2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80124e6:	2302      	movs	r3, #2
 80124e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80124ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80124f0:	e7af      	b.n	8012452 <atanf+0x86>
 80124f2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80124f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80124fa:	2303      	movs	r3, #3
 80124fc:	e7a9      	b.n	8012452 <atanf+0x86>
 80124fe:	4a1b      	ldr	r2, [pc, #108]	@ (801256c <atanf+0x1a0>)
 8012500:	491b      	ldr	r1, [pc, #108]	@ (8012570 <atanf+0x1a4>)
 8012502:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012506:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801250a:	edd3 6a00 	vldr	s13, [r3]
 801250e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012512:	2d00      	cmp	r5, #0
 8012514:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012518:	edd2 7a00 	vldr	s15, [r2]
 801251c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012520:	bfb8      	it	lt
 8012522:	eef1 7a67 	vneglt.f32	s15, s15
 8012526:	e760      	b.n	80123ea <atanf+0x1e>
 8012528:	bfc90fdb 	.word	0xbfc90fdb
 801252c:	3fc90fdb 	.word	0x3fc90fdb
 8012530:	3edfffff 	.word	0x3edfffff
 8012534:	7149f2ca 	.word	0x7149f2ca
 8012538:	3f97ffff 	.word	0x3f97ffff
 801253c:	3c8569d7 	.word	0x3c8569d7
 8012540:	3d4bda59 	.word	0x3d4bda59
 8012544:	bd6ef16b 	.word	0xbd6ef16b
 8012548:	3d886b35 	.word	0x3d886b35
 801254c:	3dba2e6e 	.word	0x3dba2e6e
 8012550:	3e124925 	.word	0x3e124925
 8012554:	3eaaaaab 	.word	0x3eaaaaab
 8012558:	bd15a221 	.word	0xbd15a221
 801255c:	bd9d8795 	.word	0xbd9d8795
 8012560:	bde38e38 	.word	0xbde38e38
 8012564:	be4ccccd 	.word	0xbe4ccccd
 8012568:	401bffff 	.word	0x401bffff
 801256c:	08014190 	.word	0x08014190
 8012570:	08014180 	.word	0x08014180

08012574 <fabsf>:
 8012574:	ee10 3a10 	vmov	r3, s0
 8012578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801257c:	ee00 3a10 	vmov	s0, r3
 8012580:	4770      	bx	lr
	...

08012584 <tanf>:
 8012584:	ee10 3a10 	vmov	r3, s0
 8012588:	b507      	push	{r0, r1, r2, lr}
 801258a:	4a12      	ldr	r2, [pc, #72]	@ (80125d4 <tanf+0x50>)
 801258c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012590:	4293      	cmp	r3, r2
 8012592:	d807      	bhi.n	80125a4 <tanf+0x20>
 8012594:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80125d8 <tanf+0x54>
 8012598:	2001      	movs	r0, #1
 801259a:	b003      	add	sp, #12
 801259c:	f85d eb04 	ldr.w	lr, [sp], #4
 80125a0:	f000 b81c 	b.w	80125dc <__kernel_tanf>
 80125a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80125a8:	d304      	bcc.n	80125b4 <tanf+0x30>
 80125aa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80125ae:	b003      	add	sp, #12
 80125b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80125b4:	4668      	mov	r0, sp
 80125b6:	f000 f8f5 	bl	80127a4 <__ieee754_rem_pio2f>
 80125ba:	0040      	lsls	r0, r0, #1
 80125bc:	f000 0002 	and.w	r0, r0, #2
 80125c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80125c4:	ed9d 0a00 	vldr	s0, [sp]
 80125c8:	f1c0 0001 	rsb	r0, r0, #1
 80125cc:	f000 f806 	bl	80125dc <__kernel_tanf>
 80125d0:	e7ed      	b.n	80125ae <tanf+0x2a>
 80125d2:	bf00      	nop
 80125d4:	3f490fda 	.word	0x3f490fda
 80125d8:	00000000 	.word	0x00000000

080125dc <__kernel_tanf>:
 80125dc:	b508      	push	{r3, lr}
 80125de:	ee10 3a10 	vmov	r3, s0
 80125e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80125e6:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80125ea:	eef0 7a40 	vmov.f32	s15, s0
 80125ee:	d217      	bcs.n	8012620 <__kernel_tanf+0x44>
 80125f0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80125f4:	ee17 1a10 	vmov	r1, s14
 80125f8:	bb41      	cbnz	r1, 801264c <__kernel_tanf+0x70>
 80125fa:	1c43      	adds	r3, r0, #1
 80125fc:	4313      	orrs	r3, r2
 80125fe:	d108      	bne.n	8012612 <__kernel_tanf+0x36>
 8012600:	f7ff ffb8 	bl	8012574 <fabsf>
 8012604:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012608:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801260c:	eeb0 0a67 	vmov.f32	s0, s15
 8012610:	bd08      	pop	{r3, pc}
 8012612:	2801      	cmp	r0, #1
 8012614:	d0fa      	beq.n	801260c <__kernel_tanf+0x30>
 8012616:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801261a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801261e:	e7f5      	b.n	801260c <__kernel_tanf+0x30>
 8012620:	494c      	ldr	r1, [pc, #304]	@ (8012754 <__kernel_tanf+0x178>)
 8012622:	428a      	cmp	r2, r1
 8012624:	d312      	bcc.n	801264c <__kernel_tanf+0x70>
 8012626:	2b00      	cmp	r3, #0
 8012628:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8012758 <__kernel_tanf+0x17c>
 801262c:	bfb8      	it	lt
 801262e:	eef1 7a40 	vneglt.f32	s15, s0
 8012632:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012636:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801275c <__kernel_tanf+0x180>
 801263a:	bfb8      	it	lt
 801263c:	eef1 0a60 	vneglt.f32	s1, s1
 8012640:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012644:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8012760 <__kernel_tanf+0x184>
 8012648:	ee77 7a87 	vadd.f32	s15, s15, s14
 801264c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012650:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8012764 <__kernel_tanf+0x188>
 8012654:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8012768 <__kernel_tanf+0x18c>
 8012658:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 801276c <__kernel_tanf+0x190>
 801265c:	493d      	ldr	r1, [pc, #244]	@ (8012754 <__kernel_tanf+0x178>)
 801265e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012662:	428a      	cmp	r2, r1
 8012664:	eea7 6a25 	vfma.f32	s12, s14, s11
 8012668:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8012770 <__kernel_tanf+0x194>
 801266c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012670:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8012774 <__kernel_tanf+0x198>
 8012674:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012678:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8012778 <__kernel_tanf+0x19c>
 801267c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012680:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 801277c <__kernel_tanf+0x1a0>
 8012684:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012688:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8012780 <__kernel_tanf+0x1a4>
 801268c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8012690:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8012784 <__kernel_tanf+0x1a8>
 8012694:	eea5 5a87 	vfma.f32	s10, s11, s14
 8012698:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8012788 <__kernel_tanf+0x1ac>
 801269c:	eee5 5a07 	vfma.f32	s11, s10, s14
 80126a0:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801278c <__kernel_tanf+0x1b0>
 80126a4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80126a8:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8012790 <__kernel_tanf+0x1b4>
 80126ac:	eee5 5a07 	vfma.f32	s11, s10, s14
 80126b0:	eeb0 7a46 	vmov.f32	s14, s12
 80126b4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80126b8:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80126bc:	eeb0 6a60 	vmov.f32	s12, s1
 80126c0:	eea7 6a05 	vfma.f32	s12, s14, s10
 80126c4:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8012794 <__kernel_tanf+0x1b8>
 80126c8:	eee6 0a26 	vfma.f32	s1, s12, s13
 80126cc:	eee5 0a07 	vfma.f32	s1, s10, s14
 80126d0:	ee37 6aa0 	vadd.f32	s12, s15, s1
 80126d4:	d31d      	bcc.n	8012712 <__kernel_tanf+0x136>
 80126d6:	ee07 0a10 	vmov	s14, r0
 80126da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80126de:	ee26 5a06 	vmul.f32	s10, s12, s12
 80126e2:	ee36 6a07 	vadd.f32	s12, s12, s14
 80126e6:	179b      	asrs	r3, r3, #30
 80126e8:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80126ec:	f003 0302 	and.w	r3, r3, #2
 80126f0:	f1c3 0301 	rsb	r3, r3, #1
 80126f4:	ee06 3a90 	vmov	s13, r3
 80126f8:	ee35 6ae0 	vsub.f32	s12, s11, s1
 80126fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012700:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012704:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8012708:	eea7 7ac6 	vfms.f32	s14, s15, s12
 801270c:	ee66 7a87 	vmul.f32	s15, s13, s14
 8012710:	e77c      	b.n	801260c <__kernel_tanf+0x30>
 8012712:	2801      	cmp	r0, #1
 8012714:	d01b      	beq.n	801274e <__kernel_tanf+0x172>
 8012716:	4b20      	ldr	r3, [pc, #128]	@ (8012798 <__kernel_tanf+0x1bc>)
 8012718:	ee16 2a10 	vmov	r2, s12
 801271c:	401a      	ands	r2, r3
 801271e:	ee05 2a90 	vmov	s11, r2
 8012722:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8012726:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801272a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801272e:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8012732:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8012736:	ee16 2a90 	vmov	r2, s13
 801273a:	4013      	ands	r3, r2
 801273c:	ee07 3a90 	vmov	s15, r3
 8012740:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012744:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8012748:	eee7 7a26 	vfma.f32	s15, s14, s13
 801274c:	e75e      	b.n	801260c <__kernel_tanf+0x30>
 801274e:	eef0 7a46 	vmov.f32	s15, s12
 8012752:	e75b      	b.n	801260c <__kernel_tanf+0x30>
 8012754:	3f2ca140 	.word	0x3f2ca140
 8012758:	3f490fda 	.word	0x3f490fda
 801275c:	33222168 	.word	0x33222168
 8012760:	00000000 	.word	0x00000000
 8012764:	b79bae5f 	.word	0xb79bae5f
 8012768:	38a3f445 	.word	0x38a3f445
 801276c:	37d95384 	.word	0x37d95384
 8012770:	3a1a26c8 	.word	0x3a1a26c8
 8012774:	3b6b6916 	.word	0x3b6b6916
 8012778:	3cb327a4 	.word	0x3cb327a4
 801277c:	3e088889 	.word	0x3e088889
 8012780:	3895c07a 	.word	0x3895c07a
 8012784:	398137b9 	.word	0x398137b9
 8012788:	3abede48 	.word	0x3abede48
 801278c:	3c11371f 	.word	0x3c11371f
 8012790:	3d5d0dd1 	.word	0x3d5d0dd1
 8012794:	3eaaaaab 	.word	0x3eaaaaab
 8012798:	fffff000 	.word	0xfffff000

0801279c <__ieee754_sqrtf>:
 801279c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80127a0:	4770      	bx	lr
	...

080127a4 <__ieee754_rem_pio2f>:
 80127a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127a6:	ee10 6a10 	vmov	r6, s0
 80127aa:	4b88      	ldr	r3, [pc, #544]	@ (80129cc <__ieee754_rem_pio2f+0x228>)
 80127ac:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80127b0:	429d      	cmp	r5, r3
 80127b2:	b087      	sub	sp, #28
 80127b4:	4604      	mov	r4, r0
 80127b6:	d805      	bhi.n	80127c4 <__ieee754_rem_pio2f+0x20>
 80127b8:	2300      	movs	r3, #0
 80127ba:	ed80 0a00 	vstr	s0, [r0]
 80127be:	6043      	str	r3, [r0, #4]
 80127c0:	2000      	movs	r0, #0
 80127c2:	e022      	b.n	801280a <__ieee754_rem_pio2f+0x66>
 80127c4:	4b82      	ldr	r3, [pc, #520]	@ (80129d0 <__ieee754_rem_pio2f+0x22c>)
 80127c6:	429d      	cmp	r5, r3
 80127c8:	d83a      	bhi.n	8012840 <__ieee754_rem_pio2f+0x9c>
 80127ca:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80127ce:	2e00      	cmp	r6, #0
 80127d0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80129d4 <__ieee754_rem_pio2f+0x230>
 80127d4:	4a80      	ldr	r2, [pc, #512]	@ (80129d8 <__ieee754_rem_pio2f+0x234>)
 80127d6:	f023 030f 	bic.w	r3, r3, #15
 80127da:	dd18      	ble.n	801280e <__ieee754_rem_pio2f+0x6a>
 80127dc:	4293      	cmp	r3, r2
 80127de:	ee70 7a47 	vsub.f32	s15, s0, s14
 80127e2:	bf09      	itett	eq
 80127e4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80129dc <__ieee754_rem_pio2f+0x238>
 80127e8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80129e0 <__ieee754_rem_pio2f+0x23c>
 80127ec:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80129e4 <__ieee754_rem_pio2f+0x240>
 80127f0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80127f4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80127f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80127fc:	ed80 7a00 	vstr	s14, [r0]
 8012800:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012804:	edc0 7a01 	vstr	s15, [r0, #4]
 8012808:	2001      	movs	r0, #1
 801280a:	b007      	add	sp, #28
 801280c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801280e:	4293      	cmp	r3, r2
 8012810:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012814:	bf09      	itett	eq
 8012816:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80129dc <__ieee754_rem_pio2f+0x238>
 801281a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80129e0 <__ieee754_rem_pio2f+0x23c>
 801281e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80129e4 <__ieee754_rem_pio2f+0x240>
 8012822:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8012826:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801282a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801282e:	ed80 7a00 	vstr	s14, [r0]
 8012832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012836:	edc0 7a01 	vstr	s15, [r0, #4]
 801283a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801283e:	e7e4      	b.n	801280a <__ieee754_rem_pio2f+0x66>
 8012840:	4b69      	ldr	r3, [pc, #420]	@ (80129e8 <__ieee754_rem_pio2f+0x244>)
 8012842:	429d      	cmp	r5, r3
 8012844:	d873      	bhi.n	801292e <__ieee754_rem_pio2f+0x18a>
 8012846:	f7ff fe95 	bl	8012574 <fabsf>
 801284a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80129ec <__ieee754_rem_pio2f+0x248>
 801284e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012852:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801285a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801285e:	ee17 0a90 	vmov	r0, s15
 8012862:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80129d4 <__ieee754_rem_pio2f+0x230>
 8012866:	eea7 0a67 	vfms.f32	s0, s14, s15
 801286a:	281f      	cmp	r0, #31
 801286c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80129e0 <__ieee754_rem_pio2f+0x23c>
 8012870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012874:	eeb1 6a47 	vneg.f32	s12, s14
 8012878:	ee70 6a67 	vsub.f32	s13, s0, s15
 801287c:	ee16 1a90 	vmov	r1, s13
 8012880:	dc09      	bgt.n	8012896 <__ieee754_rem_pio2f+0xf2>
 8012882:	4a5b      	ldr	r2, [pc, #364]	@ (80129f0 <__ieee754_rem_pio2f+0x24c>)
 8012884:	1e47      	subs	r7, r0, #1
 8012886:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801288a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801288e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012892:	4293      	cmp	r3, r2
 8012894:	d107      	bne.n	80128a6 <__ieee754_rem_pio2f+0x102>
 8012896:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801289a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801289e:	2a08      	cmp	r2, #8
 80128a0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80128a4:	dc14      	bgt.n	80128d0 <__ieee754_rem_pio2f+0x12c>
 80128a6:	6021      	str	r1, [r4, #0]
 80128a8:	ed94 7a00 	vldr	s14, [r4]
 80128ac:	ee30 0a47 	vsub.f32	s0, s0, s14
 80128b0:	2e00      	cmp	r6, #0
 80128b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80128b6:	ed84 0a01 	vstr	s0, [r4, #4]
 80128ba:	daa6      	bge.n	801280a <__ieee754_rem_pio2f+0x66>
 80128bc:	eeb1 7a47 	vneg.f32	s14, s14
 80128c0:	eeb1 0a40 	vneg.f32	s0, s0
 80128c4:	ed84 7a00 	vstr	s14, [r4]
 80128c8:	ed84 0a01 	vstr	s0, [r4, #4]
 80128cc:	4240      	negs	r0, r0
 80128ce:	e79c      	b.n	801280a <__ieee754_rem_pio2f+0x66>
 80128d0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80129dc <__ieee754_rem_pio2f+0x238>
 80128d4:	eef0 6a40 	vmov.f32	s13, s0
 80128d8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80128dc:	ee70 7a66 	vsub.f32	s15, s0, s13
 80128e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80128e4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80129e4 <__ieee754_rem_pio2f+0x240>
 80128e8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80128ec:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80128f0:	ee15 2a90 	vmov	r2, s11
 80128f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80128f8:	1a5b      	subs	r3, r3, r1
 80128fa:	2b19      	cmp	r3, #25
 80128fc:	dc04      	bgt.n	8012908 <__ieee754_rem_pio2f+0x164>
 80128fe:	edc4 5a00 	vstr	s11, [r4]
 8012902:	eeb0 0a66 	vmov.f32	s0, s13
 8012906:	e7cf      	b.n	80128a8 <__ieee754_rem_pio2f+0x104>
 8012908:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80129f4 <__ieee754_rem_pio2f+0x250>
 801290c:	eeb0 0a66 	vmov.f32	s0, s13
 8012910:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012914:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012918:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80129f8 <__ieee754_rem_pio2f+0x254>
 801291c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012920:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012924:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012928:	ed84 7a00 	vstr	s14, [r4]
 801292c:	e7bc      	b.n	80128a8 <__ieee754_rem_pio2f+0x104>
 801292e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8012932:	d306      	bcc.n	8012942 <__ieee754_rem_pio2f+0x19e>
 8012934:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012938:	edc0 7a01 	vstr	s15, [r0, #4]
 801293c:	edc0 7a00 	vstr	s15, [r0]
 8012940:	e73e      	b.n	80127c0 <__ieee754_rem_pio2f+0x1c>
 8012942:	15ea      	asrs	r2, r5, #23
 8012944:	3a86      	subs	r2, #134	@ 0x86
 8012946:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801294a:	ee07 3a90 	vmov	s15, r3
 801294e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012952:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80129fc <__ieee754_rem_pio2f+0x258>
 8012956:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801295a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801295e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012962:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012966:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801296a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801296e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012972:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012976:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801297a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012982:	edcd 7a05 	vstr	s15, [sp, #20]
 8012986:	d11e      	bne.n	80129c6 <__ieee754_rem_pio2f+0x222>
 8012988:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801298c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012990:	bf0c      	ite	eq
 8012992:	2301      	moveq	r3, #1
 8012994:	2302      	movne	r3, #2
 8012996:	491a      	ldr	r1, [pc, #104]	@ (8012a00 <__ieee754_rem_pio2f+0x25c>)
 8012998:	9101      	str	r1, [sp, #4]
 801299a:	2102      	movs	r1, #2
 801299c:	9100      	str	r1, [sp, #0]
 801299e:	a803      	add	r0, sp, #12
 80129a0:	4621      	mov	r1, r4
 80129a2:	f000 f82f 	bl	8012a04 <__kernel_rem_pio2f>
 80129a6:	2e00      	cmp	r6, #0
 80129a8:	f6bf af2f 	bge.w	801280a <__ieee754_rem_pio2f+0x66>
 80129ac:	edd4 7a00 	vldr	s15, [r4]
 80129b0:	eef1 7a67 	vneg.f32	s15, s15
 80129b4:	edc4 7a00 	vstr	s15, [r4]
 80129b8:	edd4 7a01 	vldr	s15, [r4, #4]
 80129bc:	eef1 7a67 	vneg.f32	s15, s15
 80129c0:	edc4 7a01 	vstr	s15, [r4, #4]
 80129c4:	e782      	b.n	80128cc <__ieee754_rem_pio2f+0x128>
 80129c6:	2303      	movs	r3, #3
 80129c8:	e7e5      	b.n	8012996 <__ieee754_rem_pio2f+0x1f2>
 80129ca:	bf00      	nop
 80129cc:	3f490fd8 	.word	0x3f490fd8
 80129d0:	4016cbe3 	.word	0x4016cbe3
 80129d4:	3fc90f80 	.word	0x3fc90f80
 80129d8:	3fc90fd0 	.word	0x3fc90fd0
 80129dc:	37354400 	.word	0x37354400
 80129e0:	37354443 	.word	0x37354443
 80129e4:	2e85a308 	.word	0x2e85a308
 80129e8:	43490f80 	.word	0x43490f80
 80129ec:	3f22f984 	.word	0x3f22f984
 80129f0:	080141a0 	.word	0x080141a0
 80129f4:	2e85a300 	.word	0x2e85a300
 80129f8:	248d3132 	.word	0x248d3132
 80129fc:	43800000 	.word	0x43800000
 8012a00:	08014220 	.word	0x08014220

08012a04 <__kernel_rem_pio2f>:
 8012a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a08:	ed2d 8b04 	vpush	{d8-d9}
 8012a0c:	b0d9      	sub	sp, #356	@ 0x164
 8012a0e:	4690      	mov	r8, r2
 8012a10:	9001      	str	r0, [sp, #4]
 8012a12:	4ab9      	ldr	r2, [pc, #740]	@ (8012cf8 <__kernel_rem_pio2f+0x2f4>)
 8012a14:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8012a16:	f118 0f04 	cmn.w	r8, #4
 8012a1a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8012a1e:	460f      	mov	r7, r1
 8012a20:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8012a24:	db27      	blt.n	8012a76 <__kernel_rem_pio2f+0x72>
 8012a26:	f1b8 0203 	subs.w	r2, r8, #3
 8012a2a:	bf48      	it	mi
 8012a2c:	f108 0204 	addmi.w	r2, r8, #4
 8012a30:	10d2      	asrs	r2, r2, #3
 8012a32:	1c55      	adds	r5, r2, #1
 8012a34:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012a36:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8012d08 <__kernel_rem_pio2f+0x304>
 8012a3a:	00e8      	lsls	r0, r5, #3
 8012a3c:	eba2 060b 	sub.w	r6, r2, fp
 8012a40:	9002      	str	r0, [sp, #8]
 8012a42:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8012a46:	eb0a 0c0b 	add.w	ip, sl, fp
 8012a4a:	ac1c      	add	r4, sp, #112	@ 0x70
 8012a4c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8012a50:	2000      	movs	r0, #0
 8012a52:	4560      	cmp	r0, ip
 8012a54:	dd11      	ble.n	8012a7a <__kernel_rem_pio2f+0x76>
 8012a56:	a91c      	add	r1, sp, #112	@ 0x70
 8012a58:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8012a5c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8012a60:	f04f 0c00 	mov.w	ip, #0
 8012a64:	45d4      	cmp	ip, sl
 8012a66:	dc27      	bgt.n	8012ab8 <__kernel_rem_pio2f+0xb4>
 8012a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012a6c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8012d08 <__kernel_rem_pio2f+0x304>
 8012a70:	4606      	mov	r6, r0
 8012a72:	2400      	movs	r4, #0
 8012a74:	e016      	b.n	8012aa4 <__kernel_rem_pio2f+0xa0>
 8012a76:	2200      	movs	r2, #0
 8012a78:	e7db      	b.n	8012a32 <__kernel_rem_pio2f+0x2e>
 8012a7a:	42c6      	cmn	r6, r0
 8012a7c:	bf5d      	ittte	pl
 8012a7e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8012a82:	ee07 1a90 	vmovpl	s15, r1
 8012a86:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012a8a:	eef0 7a47 	vmovmi.f32	s15, s14
 8012a8e:	ece4 7a01 	vstmia	r4!, {s15}
 8012a92:	3001      	adds	r0, #1
 8012a94:	e7dd      	b.n	8012a52 <__kernel_rem_pio2f+0x4e>
 8012a96:	ecfe 6a01 	vldmia	lr!, {s13}
 8012a9a:	ed96 7a00 	vldr	s14, [r6]
 8012a9e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012aa2:	3401      	adds	r4, #1
 8012aa4:	455c      	cmp	r4, fp
 8012aa6:	f1a6 0604 	sub.w	r6, r6, #4
 8012aaa:	ddf4      	ble.n	8012a96 <__kernel_rem_pio2f+0x92>
 8012aac:	ece9 7a01 	vstmia	r9!, {s15}
 8012ab0:	f10c 0c01 	add.w	ip, ip, #1
 8012ab4:	3004      	adds	r0, #4
 8012ab6:	e7d5      	b.n	8012a64 <__kernel_rem_pio2f+0x60>
 8012ab8:	a908      	add	r1, sp, #32
 8012aba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012abe:	9104      	str	r1, [sp, #16]
 8012ac0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012ac2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8012d04 <__kernel_rem_pio2f+0x300>
 8012ac6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8012d00 <__kernel_rem_pio2f+0x2fc>
 8012aca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012ace:	9203      	str	r2, [sp, #12]
 8012ad0:	4654      	mov	r4, sl
 8012ad2:	00a2      	lsls	r2, r4, #2
 8012ad4:	9205      	str	r2, [sp, #20]
 8012ad6:	aa58      	add	r2, sp, #352	@ 0x160
 8012ad8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8012adc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8012ae0:	a944      	add	r1, sp, #272	@ 0x110
 8012ae2:	aa08      	add	r2, sp, #32
 8012ae4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8012ae8:	4694      	mov	ip, r2
 8012aea:	4626      	mov	r6, r4
 8012aec:	2e00      	cmp	r6, #0
 8012aee:	f1a0 0004 	sub.w	r0, r0, #4
 8012af2:	dc4c      	bgt.n	8012b8e <__kernel_rem_pio2f+0x18a>
 8012af4:	4628      	mov	r0, r5
 8012af6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012afa:	f000 fa39 	bl	8012f70 <scalbnf>
 8012afe:	eeb0 8a40 	vmov.f32	s16, s0
 8012b02:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8012b06:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012b0a:	f000 f9ed 	bl	8012ee8 <floorf>
 8012b0e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8012b12:	eea0 8a67 	vfms.f32	s16, s0, s15
 8012b16:	2d00      	cmp	r5, #0
 8012b18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012b1c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012b20:	ee17 9a90 	vmov	r9, s15
 8012b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b28:	ee38 8a67 	vsub.f32	s16, s16, s15
 8012b2c:	dd41      	ble.n	8012bb2 <__kernel_rem_pio2f+0x1ae>
 8012b2e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8012b32:	a908      	add	r1, sp, #32
 8012b34:	f1c5 0e08 	rsb	lr, r5, #8
 8012b38:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8012b3c:	fa46 f00e 	asr.w	r0, r6, lr
 8012b40:	4481      	add	r9, r0
 8012b42:	fa00 f00e 	lsl.w	r0, r0, lr
 8012b46:	1a36      	subs	r6, r6, r0
 8012b48:	f1c5 0007 	rsb	r0, r5, #7
 8012b4c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8012b50:	4106      	asrs	r6, r0
 8012b52:	2e00      	cmp	r6, #0
 8012b54:	dd3c      	ble.n	8012bd0 <__kernel_rem_pio2f+0x1cc>
 8012b56:	f04f 0e00 	mov.w	lr, #0
 8012b5a:	f109 0901 	add.w	r9, r9, #1
 8012b5e:	4670      	mov	r0, lr
 8012b60:	4574      	cmp	r4, lr
 8012b62:	dc68      	bgt.n	8012c36 <__kernel_rem_pio2f+0x232>
 8012b64:	2d00      	cmp	r5, #0
 8012b66:	dd03      	ble.n	8012b70 <__kernel_rem_pio2f+0x16c>
 8012b68:	2d01      	cmp	r5, #1
 8012b6a:	d074      	beq.n	8012c56 <__kernel_rem_pio2f+0x252>
 8012b6c:	2d02      	cmp	r5, #2
 8012b6e:	d07d      	beq.n	8012c6c <__kernel_rem_pio2f+0x268>
 8012b70:	2e02      	cmp	r6, #2
 8012b72:	d12d      	bne.n	8012bd0 <__kernel_rem_pio2f+0x1cc>
 8012b74:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012b78:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012b7c:	b340      	cbz	r0, 8012bd0 <__kernel_rem_pio2f+0x1cc>
 8012b7e:	4628      	mov	r0, r5
 8012b80:	9306      	str	r3, [sp, #24]
 8012b82:	f000 f9f5 	bl	8012f70 <scalbnf>
 8012b86:	9b06      	ldr	r3, [sp, #24]
 8012b88:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012b8c:	e020      	b.n	8012bd0 <__kernel_rem_pio2f+0x1cc>
 8012b8e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012b92:	3e01      	subs	r6, #1
 8012b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b9c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012ba0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012ba4:	ecac 0a01 	vstmia	ip!, {s0}
 8012ba8:	ed90 0a00 	vldr	s0, [r0]
 8012bac:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012bb0:	e79c      	b.n	8012aec <__kernel_rem_pio2f+0xe8>
 8012bb2:	d105      	bne.n	8012bc0 <__kernel_rem_pio2f+0x1bc>
 8012bb4:	1e60      	subs	r0, r4, #1
 8012bb6:	a908      	add	r1, sp, #32
 8012bb8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8012bbc:	11f6      	asrs	r6, r6, #7
 8012bbe:	e7c8      	b.n	8012b52 <__kernel_rem_pio2f+0x14e>
 8012bc0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012bc4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bcc:	da31      	bge.n	8012c32 <__kernel_rem_pio2f+0x22e>
 8012bce:	2600      	movs	r6, #0
 8012bd0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd8:	f040 8098 	bne.w	8012d0c <__kernel_rem_pio2f+0x308>
 8012bdc:	1e60      	subs	r0, r4, #1
 8012bde:	2200      	movs	r2, #0
 8012be0:	4550      	cmp	r0, sl
 8012be2:	da4b      	bge.n	8012c7c <__kernel_rem_pio2f+0x278>
 8012be4:	2a00      	cmp	r2, #0
 8012be6:	d065      	beq.n	8012cb4 <__kernel_rem_pio2f+0x2b0>
 8012be8:	3c01      	subs	r4, #1
 8012bea:	ab08      	add	r3, sp, #32
 8012bec:	3d08      	subs	r5, #8
 8012bee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d0f8      	beq.n	8012be8 <__kernel_rem_pio2f+0x1e4>
 8012bf6:	4628      	mov	r0, r5
 8012bf8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012bfc:	f000 f9b8 	bl	8012f70 <scalbnf>
 8012c00:	1c63      	adds	r3, r4, #1
 8012c02:	aa44      	add	r2, sp, #272	@ 0x110
 8012c04:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8012d04 <__kernel_rem_pio2f+0x300>
 8012c08:	0099      	lsls	r1, r3, #2
 8012c0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012c0e:	4623      	mov	r3, r4
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	f280 80a9 	bge.w	8012d68 <__kernel_rem_pio2f+0x364>
 8012c16:	4623      	mov	r3, r4
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	f2c0 80c7 	blt.w	8012dac <__kernel_rem_pio2f+0x3a8>
 8012c1e:	aa44      	add	r2, sp, #272	@ 0x110
 8012c20:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8012c24:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8012cfc <__kernel_rem_pio2f+0x2f8>
 8012c28:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8012d08 <__kernel_rem_pio2f+0x304>
 8012c2c:	2000      	movs	r0, #0
 8012c2e:	1ae2      	subs	r2, r4, r3
 8012c30:	e0b1      	b.n	8012d96 <__kernel_rem_pio2f+0x392>
 8012c32:	2602      	movs	r6, #2
 8012c34:	e78f      	b.n	8012b56 <__kernel_rem_pio2f+0x152>
 8012c36:	f852 1b04 	ldr.w	r1, [r2], #4
 8012c3a:	b948      	cbnz	r0, 8012c50 <__kernel_rem_pio2f+0x24c>
 8012c3c:	b121      	cbz	r1, 8012c48 <__kernel_rem_pio2f+0x244>
 8012c3e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8012c42:	f842 1c04 	str.w	r1, [r2, #-4]
 8012c46:	2101      	movs	r1, #1
 8012c48:	f10e 0e01 	add.w	lr, lr, #1
 8012c4c:	4608      	mov	r0, r1
 8012c4e:	e787      	b.n	8012b60 <__kernel_rem_pio2f+0x15c>
 8012c50:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8012c54:	e7f5      	b.n	8012c42 <__kernel_rem_pio2f+0x23e>
 8012c56:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8012c5a:	aa08      	add	r2, sp, #32
 8012c5c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012c60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012c64:	a908      	add	r1, sp, #32
 8012c66:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8012c6a:	e781      	b.n	8012b70 <__kernel_rem_pio2f+0x16c>
 8012c6c:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8012c70:	aa08      	add	r2, sp, #32
 8012c72:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012c76:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012c7a:	e7f3      	b.n	8012c64 <__kernel_rem_pio2f+0x260>
 8012c7c:	a908      	add	r1, sp, #32
 8012c7e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8012c82:	3801      	subs	r0, #1
 8012c84:	430a      	orrs	r2, r1
 8012c86:	e7ab      	b.n	8012be0 <__kernel_rem_pio2f+0x1dc>
 8012c88:	3201      	adds	r2, #1
 8012c8a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8012c8e:	2e00      	cmp	r6, #0
 8012c90:	d0fa      	beq.n	8012c88 <__kernel_rem_pio2f+0x284>
 8012c92:	9905      	ldr	r1, [sp, #20]
 8012c94:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012c98:	eb0d 0001 	add.w	r0, sp, r1
 8012c9c:	18e6      	adds	r6, r4, r3
 8012c9e:	a91c      	add	r1, sp, #112	@ 0x70
 8012ca0:	f104 0c01 	add.w	ip, r4, #1
 8012ca4:	384c      	subs	r0, #76	@ 0x4c
 8012ca6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8012caa:	4422      	add	r2, r4
 8012cac:	4562      	cmp	r2, ip
 8012cae:	da04      	bge.n	8012cba <__kernel_rem_pio2f+0x2b6>
 8012cb0:	4614      	mov	r4, r2
 8012cb2:	e70e      	b.n	8012ad2 <__kernel_rem_pio2f+0xce>
 8012cb4:	9804      	ldr	r0, [sp, #16]
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	e7e7      	b.n	8012c8a <__kernel_rem_pio2f+0x286>
 8012cba:	9903      	ldr	r1, [sp, #12]
 8012cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012cc0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8012cc4:	9105      	str	r1, [sp, #20]
 8012cc6:	ee07 1a90 	vmov	s15, r1
 8012cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012cce:	2400      	movs	r4, #0
 8012cd0:	ece6 7a01 	vstmia	r6!, {s15}
 8012cd4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8012d08 <__kernel_rem_pio2f+0x304>
 8012cd8:	46b1      	mov	r9, r6
 8012cda:	455c      	cmp	r4, fp
 8012cdc:	dd04      	ble.n	8012ce8 <__kernel_rem_pio2f+0x2e4>
 8012cde:	ece0 7a01 	vstmia	r0!, {s15}
 8012ce2:	f10c 0c01 	add.w	ip, ip, #1
 8012ce6:	e7e1      	b.n	8012cac <__kernel_rem_pio2f+0x2a8>
 8012ce8:	ecfe 6a01 	vldmia	lr!, {s13}
 8012cec:	ed39 7a01 	vldmdb	r9!, {s14}
 8012cf0:	3401      	adds	r4, #1
 8012cf2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012cf6:	e7f0      	b.n	8012cda <__kernel_rem_pio2f+0x2d6>
 8012cf8:	08014564 	.word	0x08014564
 8012cfc:	08014538 	.word	0x08014538
 8012d00:	43800000 	.word	0x43800000
 8012d04:	3b800000 	.word	0x3b800000
 8012d08:	00000000 	.word	0x00000000
 8012d0c:	9b02      	ldr	r3, [sp, #8]
 8012d0e:	eeb0 0a48 	vmov.f32	s0, s16
 8012d12:	eba3 0008 	sub.w	r0, r3, r8
 8012d16:	f000 f92b 	bl	8012f70 <scalbnf>
 8012d1a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8012d00 <__kernel_rem_pio2f+0x2fc>
 8012d1e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d26:	db19      	blt.n	8012d5c <__kernel_rem_pio2f+0x358>
 8012d28:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8012d04 <__kernel_rem_pio2f+0x300>
 8012d2c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012d30:	aa08      	add	r2, sp, #32
 8012d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d36:	3508      	adds	r5, #8
 8012d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d3c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012d48:	ee10 3a10 	vmov	r3, s0
 8012d4c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012d50:	ee17 3a90 	vmov	r3, s15
 8012d54:	3401      	adds	r4, #1
 8012d56:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012d5a:	e74c      	b.n	8012bf6 <__kernel_rem_pio2f+0x1f2>
 8012d5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012d60:	aa08      	add	r2, sp, #32
 8012d62:	ee10 3a10 	vmov	r3, s0
 8012d66:	e7f6      	b.n	8012d56 <__kernel_rem_pio2f+0x352>
 8012d68:	a808      	add	r0, sp, #32
 8012d6a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8012d6e:	9001      	str	r0, [sp, #4]
 8012d70:	ee07 0a90 	vmov	s15, r0
 8012d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d78:	3b01      	subs	r3, #1
 8012d7a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012d7e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012d82:	ed62 7a01 	vstmdb	r2!, {s15}
 8012d86:	e743      	b.n	8012c10 <__kernel_rem_pio2f+0x20c>
 8012d88:	ecfc 6a01 	vldmia	ip!, {s13}
 8012d8c:	ecb5 7a01 	vldmia	r5!, {s14}
 8012d90:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012d94:	3001      	adds	r0, #1
 8012d96:	4550      	cmp	r0, sl
 8012d98:	dc01      	bgt.n	8012d9e <__kernel_rem_pio2f+0x39a>
 8012d9a:	4282      	cmp	r2, r0
 8012d9c:	daf4      	bge.n	8012d88 <__kernel_rem_pio2f+0x384>
 8012d9e:	a858      	add	r0, sp, #352	@ 0x160
 8012da0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012da4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012da8:	3b01      	subs	r3, #1
 8012daa:	e735      	b.n	8012c18 <__kernel_rem_pio2f+0x214>
 8012dac:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012dae:	2b02      	cmp	r3, #2
 8012db0:	dc09      	bgt.n	8012dc6 <__kernel_rem_pio2f+0x3c2>
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	dc2b      	bgt.n	8012e0e <__kernel_rem_pio2f+0x40a>
 8012db6:	d044      	beq.n	8012e42 <__kernel_rem_pio2f+0x43e>
 8012db8:	f009 0007 	and.w	r0, r9, #7
 8012dbc:	b059      	add	sp, #356	@ 0x164
 8012dbe:	ecbd 8b04 	vpop	{d8-d9}
 8012dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dc6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012dc8:	2b03      	cmp	r3, #3
 8012dca:	d1f5      	bne.n	8012db8 <__kernel_rem_pio2f+0x3b4>
 8012dcc:	aa30      	add	r2, sp, #192	@ 0xc0
 8012dce:	1f0b      	subs	r3, r1, #4
 8012dd0:	4413      	add	r3, r2
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	f1a2 0204 	sub.w	r2, r2, #4
 8012ddc:	dc52      	bgt.n	8012e84 <__kernel_rem_pio2f+0x480>
 8012dde:	4622      	mov	r2, r4
 8012de0:	2a01      	cmp	r2, #1
 8012de2:	f1a3 0304 	sub.w	r3, r3, #4
 8012de6:	dc5d      	bgt.n	8012ea4 <__kernel_rem_pio2f+0x4a0>
 8012de8:	ab30      	add	r3, sp, #192	@ 0xc0
 8012dea:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8012d08 <__kernel_rem_pio2f+0x304>
 8012dee:	440b      	add	r3, r1
 8012df0:	2c01      	cmp	r4, #1
 8012df2:	dc67      	bgt.n	8012ec4 <__kernel_rem_pio2f+0x4c0>
 8012df4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012df8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8012dfc:	2e00      	cmp	r6, #0
 8012dfe:	d167      	bne.n	8012ed0 <__kernel_rem_pio2f+0x4cc>
 8012e00:	edc7 6a00 	vstr	s13, [r7]
 8012e04:	ed87 7a01 	vstr	s14, [r7, #4]
 8012e08:	edc7 7a02 	vstr	s15, [r7, #8]
 8012e0c:	e7d4      	b.n	8012db8 <__kernel_rem_pio2f+0x3b4>
 8012e0e:	ab30      	add	r3, sp, #192	@ 0xc0
 8012e10:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8012d08 <__kernel_rem_pio2f+0x304>
 8012e14:	440b      	add	r3, r1
 8012e16:	4622      	mov	r2, r4
 8012e18:	2a00      	cmp	r2, #0
 8012e1a:	da24      	bge.n	8012e66 <__kernel_rem_pio2f+0x462>
 8012e1c:	b34e      	cbz	r6, 8012e72 <__kernel_rem_pio2f+0x46e>
 8012e1e:	eef1 7a47 	vneg.f32	s15, s14
 8012e22:	edc7 7a00 	vstr	s15, [r7]
 8012e26:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8012e2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e2e:	aa31      	add	r2, sp, #196	@ 0xc4
 8012e30:	2301      	movs	r3, #1
 8012e32:	429c      	cmp	r4, r3
 8012e34:	da20      	bge.n	8012e78 <__kernel_rem_pio2f+0x474>
 8012e36:	b10e      	cbz	r6, 8012e3c <__kernel_rem_pio2f+0x438>
 8012e38:	eef1 7a67 	vneg.f32	s15, s15
 8012e3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8012e40:	e7ba      	b.n	8012db8 <__kernel_rem_pio2f+0x3b4>
 8012e42:	ab30      	add	r3, sp, #192	@ 0xc0
 8012e44:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8012d08 <__kernel_rem_pio2f+0x304>
 8012e48:	440b      	add	r3, r1
 8012e4a:	2c00      	cmp	r4, #0
 8012e4c:	da05      	bge.n	8012e5a <__kernel_rem_pio2f+0x456>
 8012e4e:	b10e      	cbz	r6, 8012e54 <__kernel_rem_pio2f+0x450>
 8012e50:	eef1 7a67 	vneg.f32	s15, s15
 8012e54:	edc7 7a00 	vstr	s15, [r7]
 8012e58:	e7ae      	b.n	8012db8 <__kernel_rem_pio2f+0x3b4>
 8012e5a:	ed33 7a01 	vldmdb	r3!, {s14}
 8012e5e:	3c01      	subs	r4, #1
 8012e60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e64:	e7f1      	b.n	8012e4a <__kernel_rem_pio2f+0x446>
 8012e66:	ed73 7a01 	vldmdb	r3!, {s15}
 8012e6a:	3a01      	subs	r2, #1
 8012e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e70:	e7d2      	b.n	8012e18 <__kernel_rem_pio2f+0x414>
 8012e72:	eef0 7a47 	vmov.f32	s15, s14
 8012e76:	e7d4      	b.n	8012e22 <__kernel_rem_pio2f+0x41e>
 8012e78:	ecb2 7a01 	vldmia	r2!, {s14}
 8012e7c:	3301      	adds	r3, #1
 8012e7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e82:	e7d6      	b.n	8012e32 <__kernel_rem_pio2f+0x42e>
 8012e84:	edd2 7a00 	vldr	s15, [r2]
 8012e88:	edd2 6a01 	vldr	s13, [r2, #4]
 8012e8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012e90:	3801      	subs	r0, #1
 8012e92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e96:	ed82 7a00 	vstr	s14, [r2]
 8012e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012e9e:	edc2 7a01 	vstr	s15, [r2, #4]
 8012ea2:	e798      	b.n	8012dd6 <__kernel_rem_pio2f+0x3d2>
 8012ea4:	edd3 7a00 	vldr	s15, [r3]
 8012ea8:	edd3 6a01 	vldr	s13, [r3, #4]
 8012eac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012eb0:	3a01      	subs	r2, #1
 8012eb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012eb6:	ed83 7a00 	vstr	s14, [r3]
 8012eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012ebe:	edc3 7a01 	vstr	s15, [r3, #4]
 8012ec2:	e78d      	b.n	8012de0 <__kernel_rem_pio2f+0x3dc>
 8012ec4:	ed33 7a01 	vldmdb	r3!, {s14}
 8012ec8:	3c01      	subs	r4, #1
 8012eca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ece:	e78f      	b.n	8012df0 <__kernel_rem_pio2f+0x3ec>
 8012ed0:	eef1 6a66 	vneg.f32	s13, s13
 8012ed4:	eeb1 7a47 	vneg.f32	s14, s14
 8012ed8:	edc7 6a00 	vstr	s13, [r7]
 8012edc:	ed87 7a01 	vstr	s14, [r7, #4]
 8012ee0:	eef1 7a67 	vneg.f32	s15, s15
 8012ee4:	e790      	b.n	8012e08 <__kernel_rem_pio2f+0x404>
 8012ee6:	bf00      	nop

08012ee8 <floorf>:
 8012ee8:	ee10 3a10 	vmov	r3, s0
 8012eec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012ef0:	3a7f      	subs	r2, #127	@ 0x7f
 8012ef2:	2a16      	cmp	r2, #22
 8012ef4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012ef8:	dc2b      	bgt.n	8012f52 <floorf+0x6a>
 8012efa:	2a00      	cmp	r2, #0
 8012efc:	da12      	bge.n	8012f24 <floorf+0x3c>
 8012efe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012f64 <floorf+0x7c>
 8012f02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012f06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f0e:	dd06      	ble.n	8012f1e <floorf+0x36>
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	da24      	bge.n	8012f5e <floorf+0x76>
 8012f14:	2900      	cmp	r1, #0
 8012f16:	4b14      	ldr	r3, [pc, #80]	@ (8012f68 <floorf+0x80>)
 8012f18:	bf08      	it	eq
 8012f1a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8012f1e:	ee00 3a10 	vmov	s0, r3
 8012f22:	4770      	bx	lr
 8012f24:	4911      	ldr	r1, [pc, #68]	@ (8012f6c <floorf+0x84>)
 8012f26:	4111      	asrs	r1, r2
 8012f28:	420b      	tst	r3, r1
 8012f2a:	d0fa      	beq.n	8012f22 <floorf+0x3a>
 8012f2c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8012f64 <floorf+0x7c>
 8012f30:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012f34:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f3c:	ddef      	ble.n	8012f1e <floorf+0x36>
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	bfbe      	ittt	lt
 8012f42:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8012f46:	fa40 f202 	asrlt.w	r2, r0, r2
 8012f4a:	189b      	addlt	r3, r3, r2
 8012f4c:	ea23 0301 	bic.w	r3, r3, r1
 8012f50:	e7e5      	b.n	8012f1e <floorf+0x36>
 8012f52:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012f56:	d3e4      	bcc.n	8012f22 <floorf+0x3a>
 8012f58:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012f5c:	4770      	bx	lr
 8012f5e:	2300      	movs	r3, #0
 8012f60:	e7dd      	b.n	8012f1e <floorf+0x36>
 8012f62:	bf00      	nop
 8012f64:	7149f2ca 	.word	0x7149f2ca
 8012f68:	bf800000 	.word	0xbf800000
 8012f6c:	007fffff 	.word	0x007fffff

08012f70 <scalbnf>:
 8012f70:	ee10 3a10 	vmov	r3, s0
 8012f74:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012f78:	d02b      	beq.n	8012fd2 <scalbnf+0x62>
 8012f7a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012f7e:	d302      	bcc.n	8012f86 <scalbnf+0x16>
 8012f80:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012f84:	4770      	bx	lr
 8012f86:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012f8a:	d123      	bne.n	8012fd4 <scalbnf+0x64>
 8012f8c:	4b24      	ldr	r3, [pc, #144]	@ (8013020 <scalbnf+0xb0>)
 8012f8e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013024 <scalbnf+0xb4>
 8012f92:	4298      	cmp	r0, r3
 8012f94:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012f98:	db17      	blt.n	8012fca <scalbnf+0x5a>
 8012f9a:	ee10 3a10 	vmov	r3, s0
 8012f9e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012fa2:	3a19      	subs	r2, #25
 8012fa4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012fa8:	4288      	cmp	r0, r1
 8012faa:	dd15      	ble.n	8012fd8 <scalbnf+0x68>
 8012fac:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8013028 <scalbnf+0xb8>
 8012fb0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801302c <scalbnf+0xbc>
 8012fb4:	ee10 3a10 	vmov	r3, s0
 8012fb8:	eeb0 7a67 	vmov.f32	s14, s15
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	bfb8      	it	lt
 8012fc0:	eef0 7a66 	vmovlt.f32	s15, s13
 8012fc4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012fc8:	4770      	bx	lr
 8012fca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013030 <scalbnf+0xc0>
 8012fce:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012fd2:	4770      	bx	lr
 8012fd4:	0dd2      	lsrs	r2, r2, #23
 8012fd6:	e7e5      	b.n	8012fa4 <scalbnf+0x34>
 8012fd8:	4410      	add	r0, r2
 8012fda:	28fe      	cmp	r0, #254	@ 0xfe
 8012fdc:	dce6      	bgt.n	8012fac <scalbnf+0x3c>
 8012fde:	2800      	cmp	r0, #0
 8012fe0:	dd06      	ble.n	8012ff0 <scalbnf+0x80>
 8012fe2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012fe6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012fea:	ee00 3a10 	vmov	s0, r3
 8012fee:	4770      	bx	lr
 8012ff0:	f110 0f16 	cmn.w	r0, #22
 8012ff4:	da09      	bge.n	801300a <scalbnf+0x9a>
 8012ff6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013030 <scalbnf+0xc0>
 8012ffa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013034 <scalbnf+0xc4>
 8012ffe:	ee10 3a10 	vmov	r3, s0
 8013002:	eeb0 7a67 	vmov.f32	s14, s15
 8013006:	2b00      	cmp	r3, #0
 8013008:	e7d9      	b.n	8012fbe <scalbnf+0x4e>
 801300a:	3019      	adds	r0, #25
 801300c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013010:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013014:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8013038 <scalbnf+0xc8>
 8013018:	ee07 3a90 	vmov	s15, r3
 801301c:	e7d7      	b.n	8012fce <scalbnf+0x5e>
 801301e:	bf00      	nop
 8013020:	ffff3cb0 	.word	0xffff3cb0
 8013024:	4c000000 	.word	0x4c000000
 8013028:	7149f2ca 	.word	0x7149f2ca
 801302c:	f149f2ca 	.word	0xf149f2ca
 8013030:	0da24260 	.word	0x0da24260
 8013034:	8da24260 	.word	0x8da24260
 8013038:	33000000 	.word	0x33000000

0801303c <_init>:
 801303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801303e:	bf00      	nop
 8013040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013042:	bc08      	pop	{r3}
 8013044:	469e      	mov	lr, r3
 8013046:	4770      	bx	lr

08013048 <_fini>:
 8013048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801304a:	bf00      	nop
 801304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801304e:	bc08      	pop	{r3}
 8013050:	469e      	mov	lr, r3
 8013052:	4770      	bx	lr
